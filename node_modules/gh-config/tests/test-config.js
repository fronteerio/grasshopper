/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var assert = require('assert');

var AppsTestUtil = require('gh-apps/tests/util');
var TenantsTestUtil = require('gh-tenants/tests/util');
var TestsUtil = require('gh-tests');

var ConfigTestsUtil = require('./util');

describe('Config', function() {

    /**
     * Test that verifies that a config is automatically created when a new application is created
     */
    it('verify a config is automatically created when a new application is created', function(callback) {
        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {

            // Create the application
            TestsUtil.generateTestTenant(1, function(tenant, app) {

                // Verify a config has been created
                ConfigTestsUtil.assertGetConfig(globalAdminClient, app.id, false, function(config) {
                    return callback();
                });
            });
        });
    });

    describe('Retrieving a config', function() {

        /**
         * Test that verifies validation when retrieving a config
         */
        it('verify validation when retrieving a config', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {

                // Invalid app id
                ConfigTestsUtil.assertGetConfigFails(globalAdminClient, 'not a number', 400, function() {

                    // Unknown app
                    ConfigTestsUtil.assertGetConfigFails(globalAdminClient, -1, 404, function() {
                        ConfigTestsUtil.assertGetConfigFails(globalAdminClient, 324234234, 404, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when retrieving a config
         */
        it('verify authorization when retrieving a config', function(callback) {
            // Verify anonymous users can retrieve a config
            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                ConfigTestsUtil.assertGetConfig(anonymousClient, null, true, function(config) {

                    // Anonymous users cannot retrieve a config from another application
                    ConfigTestsUtil.assertGetConfigFails(anonymousClient, global.tests.apps.oxford2014.id, 401, function(config) {

                        // Verify regular users can retrieve a config
                        TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                            ConfigTestsUtil.assertGetConfig(simon.client, null, true, function(config) {

                                // Regular users cannot retrieve a config from another application
                                ConfigTestsUtil.assertGetConfigFails(simon.client, global.tests.apps.oxford2014.id, 401, function(config) {

                                    // Verify application admins can retrieve a config
                                    ConfigTestsUtil.assertGetConfig(global.tests.admins.cam2013.client, null, false, function(config) {

                                        // Application admins cannot retrieve a config from another application
                                        ConfigTestsUtil.assertGetConfigFails(global.tests.admins.cam2013.client, global.tests.apps.oxford2014.id, 401, function(config) {

                                            // Verify global admins can retrieve a config
                                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                ConfigTestsUtil.assertGetConfig(globalAdminClient, global.tests.apps.cam2013.id, false, function(config) {

                                                    // Verify anonymous users on the global application cannot retrieve configs
                                                    TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                                                        ConfigTestsUtil.assertGetConfigFails(anonymousGlobalAdminClient, global.tests.apps.cam2013.id, 401, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('verify updating a config', function() {

        /**
         * Test that verifies validation when updating a config
         */
        it('verify validation when updating a config', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant, app) {

                    var update = {'enableLocalAuth': false};
                    // Invalid app id
                    ConfigTestsUtil.assertUpdateConfigFails(globalAdminClient, 'not a number', update, 400, function() {

                        // Unknown app
                        ConfigTestsUtil.assertUpdateConfigFails(globalAdminClient, -1, update, 404, function() {
                            ConfigTestsUtil.assertUpdateConfigFails(globalAdminClient, 432423423423, update, 404, function() {

                                // Missing updates
                                ConfigTestsUtil.assertUpdateConfigFails(globalAdminClient, app.id, null, 400, function() {
                                    ConfigTestsUtil.assertUpdateConfigFails(globalAdminClient, app.id, {}, 400, function() {

                                        // Unknown update fields
                                        ConfigTestsUtil.assertUpdateConfigFails(globalAdminClient, app.id, {'trololol': true}, 400, function() {

                                            // Incorrect value for boolean fields
                                            ConfigTestsUtil.assertUpdateConfigFails(globalAdminClient, app.id, {'enableLocalAuth': 'Not a boolean'}, 400, function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when updating a config
         */
        it('verify authorization when updating a config', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant, app) {

                    var update = {'enableLocalAuth': false};
                    // Verify anonymous users cannot update a config
                    TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {
                        ConfigTestsUtil.assertUpdateConfigFails(anonymousClient, null, update, 401, function() {

                            // Verify regular users cannot update a config
                            TestsUtil.generateTestUsers(app, 1, false, function(simon) {
                                ConfigTestsUtil.assertUpdateConfigFails(simon.client, null, update, 401, function() {
                                    ConfigTestsUtil.assertUpdateConfigFails(simon.client, global.tests.apps.oxford2014.id, update, 401, function() {

                                        // Verify application admins can update a config
                                        TestsUtil.generateTestUsers(app, 1, true, function(appAdmin) {
                                            ConfigTestsUtil.assertUpdateConfig(appAdmin.client, null, update, function() {
                                                ConfigTestsUtil.assertUpdateConfigFails(appAdmin.client, global.tests.apps.oxford2014.id, update, 401, function() {

                                                    // Verify global admins can update a config
                                                    ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, update, function() {

                                                        // Verify anonymous users on the global application cannot update configs
                                                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                                                            ConfigTestsUtil.assertUpdateConfigFails(anonymousGlobalAdminClient, app.id, update, 401, function() {
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that boolean values are not coerced to strings
         */
        it('verify boolean values are not coerced to strings', function(callback) {
            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                TestsUtil.generateTestTenant(1, function(tenant, app) {

                    var update = {'enableLocalAuth': false};
                    ConfigTestsUtil.assertUpdateConfig(globalAdminClient, app.id, update, function() {
                        return callback();
                    });
                });
            });
        });
    });
});
