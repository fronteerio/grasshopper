/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var ConfigAPI = require('gh-config');

/**
 * Assert that a config can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             [appId]                         The id of the application whose config to retrieve. If left null, retrieve the config of the current application
 * @param  {Boolean}            expectSuppressed                Set to `true` if the config should not contain suppressed values
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie}              callback.config                 The retrieved config
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetConfig = module.exports.assertGetConfig = function(client, appId, expectSuppressed, callback) {
    client.config.getConfig(appId, function(err, config) {
        assert.ok(!err);
        assert.ok(config);

        if (expectSuppressed) {
            assert.ok(_.isUndefined(config.shibIdpEntityId));
            assert.ok(_.isUndefined(config.shibExternalIdAttributes));
            assert.ok(_.isUndefined(config.shibMapDisplayname));
            assert.ok(_.isUndefined(config.shibMapEmail));
        } else {
            assert.ok(_.has(config, 'shibIdpEntityId'));
            assert.ok(_.has(config, 'shibExternalIdAttributes'));
            assert.ok(_.has(config, 'shibMapDisplayname'));
            assert.ok(_.has(config, 'shibMapEmail'));
        }

        return callback(config);
    });
};

/**
 * Assert that a config can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             [appId]                         The id of the application whose config to retrieve. If left null, retrieve the config of the current application
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetConfigFails = module.exports.assertGetConfigFails = function(client, appId, code, callback) {
    client.config.getConfig(appId, function(err, config) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!config);
        return callback();
    });
};

/**
 * Assert that a config can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             [appId]                         The id of the application whose config to update. If left null, update the config of the current application
 * @param  {Object}             update                          The updates to persist
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateConfig = module.exports.assertUpdateConfig = function(client, appId, update, callback) {
    // To avoid intermittent test failures, we only return to
    // the caller once the configuration object has been re-cached
    ConfigAPI.once('cached', function() {

        // First check the config was actually updated
        assertGetConfig(client, appId, false, function(config) {
            assert.ok(config);
            _.each(update, function(val, key) {
                // Assert boolean fields always return boolean values
                if (key.indexOf('enable') === 0 || key.indexOf('allow') === 0) {
                    assert.strictEqual(typeof config[key], 'boolean');
                }

                // Assert the value is correct
                assert.equal(config[key], val);
            });

            return callback();
        });
    });

    // Update the config
    client.config.updateConfig(appId, update, function(err) {
        assert.ok(!err);
    });
};

/**
 * Assert that a config can not be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             [appId]                         The id of the application whose config to update. If left null, update the config of the current application
 * @param  {Object}             update                          The updates to persist
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateConfigFails = module.exports.assertUpdateConfigFails = function(client, appId, update, code, callback) {
    client.config.updateConfig(appId, update, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};
