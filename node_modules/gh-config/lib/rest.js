/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');

var ConfigAPI = require('./api');

/**
 * @REST getConfig
 *
 * Get the configuration for the current app
 *
 * @Server      app
 * @Method      GET
 * @Path        /config
 * @Return      {Config}                            The configuration for the current app
 */
/**
 * @REST getConfigByApp
 *
 * Get the configuration for an app
 *
 * @Server      admin
 * @Method      GET
 * @Path        /config/{app}
 * @PathParam   {number}            app             The id of the app to get the configuration for
 * @Return      {Config}                            The configuration for the specified app
 */
var getConfig = function(req, res) {
    var appId = req.params.app || req.ctx.app.id;
    ConfigAPI.getApplicationConfig(req.ctx, appId, function(err, config) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(200).send(config);
    });
};
GrassHopper.appRouter.on('get', '/api/config', getConfig);
GrassHopper.globalAdminRouter.on('get', '/api/config/:app', getConfig);

/**
 * @REST updateConfig
 *
 * Update a configuration value for the current app
 *
 * @Server      app
 * @Method      POST
 * @Path        /config
 * @BodyParam   {ConfigValues}      body            Configuration value(s) to update
 * @Return      {void}
 */
/**
 * @REST updateConfigByApp
 *
 * Update a configuration value for an app
 *
 * @Server      admin
 * @Method      POST
 * @Path        /config/{app}
 * @PathParam   {number}            app             The id of the app to update the configuration value(s) for
 * @BodyParam   {ConfigValues}      body            Configuration value(s) to update
 * @Return      {void}
 */
var updateConfig = function(req, res) {
    var appId = req.params.app || req.ctx.app.id;
    ConfigAPI.updateConfig(req.ctx, appId, req.body, function(err) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.sendStatus(200);
    });
};

GrassHopper.appRouter.on('post', '/api/config', updateConfig);
GrassHopper.globalAdminRouter.on('post', '/api/config/:app', updateConfig);
