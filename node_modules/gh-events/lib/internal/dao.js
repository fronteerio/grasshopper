/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-events');

/**
 * Create a new event
 *
 * @param  {Number}         appId                       The id of the application that this event will belong to
 * @param  {String}         displayName                 The name of the event
 * @param  {Number}         start                       When the event starts, in millis since epoch (UTC)
 * @param  {Number}         end                         When the event ends, in millis since epoch (UTC)
 * @param  {Object}         [opts]                      A set of optional parameters
 * @param  {String}         [opts.description]          The description of the event
 * @param  {Number}         [opts.group]                The id of the group that can manage the event
 * @param  {String}         [opts.location]             The location of the event
 * @param  {String}         [opts.notes]                The notes for the event
 * @param  {String}         [opts.organiserOther]       The name(s) of the unrecognised user(s) that organise the event. If no organisers are added, the current user will be added as the organiser
 * @param  {User[]}         [opts.organiserUsers]       The id(s) of the recognised user(s) that organise the event
 * @param  {Number[]}       [opts.serie]                The id(s) of the serie(s) that the event belongs to
 */
var createEvent = module.exports.createEvent = function(appId, displayName, start, end, opts, callback) {
    // TODO: Support serie
    // TODO: Support group
    // TODO: Transactions
    var event = {
        'AppId': appId,
        'description': opts.description,
        'displayName': displayName,
        'end': end,
        'location': opts.location,
        'notes': opts.notes,
        'organiserOther': opts.organiserOther,
        'start': start
    };
    DB.Event.create(event).complete(function(err, event) {
        if (err) {
            log().error({'err': err}, 'Failed to create a new event');
            return callback({'code': 500, 'msg': err.message});
        }

        event.setOrganisers(opts.organiserUsers).complete(function(err) {
            if (err) {
                log().error({'err': err}, 'Failed to add the organisers on a new event');
                return callback({'code': 500, 'msg': err.message});
            }

            return getEvent(event.id, callback);
        });
    });
};

/**
 * Get an event
 *
 * @param  {Number}         id                  The id of the event to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Event}          callback.event      The requested event
 */
var getEvent = module.exports.getEvent = function(id, callback) {
    var options = {
        'where': {'id': id},
        'include': [
            {'model': DB.User, 'as': 'Organisers'}
        ]
    };
    DB.Event.find(options).complete(function(err, event) {
        if (err) {
            log().error({'err': err, 'id': id}, 'Failed to get an event');
            return callback({'code': 500, 'msg': err.message});
        } else if (!event) {
            log().debug({'id': id}, 'An event with the specified id could not be found');
            return callback({'code': 404, 'msg': 'An event with the specified id could not be found'});
        }

        return callback(null, event);
    });
};

/**
 * Update an event
 *
 * @param  {Event}      event               The event to update
 * @param  {object}     update              The updates to persist
 * @param  {Function}   callback            Standard callback function
 * @param  {Object}     callback.err        An error object, if any
 * @param  {Event}      callback.event      The updated event
 */
var updateEvent = module.exports.updateEvent = function(event, update, callback) {
    event.updateAttributes(update).complete(function(err, event) {
        if (err) {
            log().error({'err': err, 'id': event.id}, 'Failed to update an event');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'event': event, 'update': update}, 'Updated an event');
        return callback(null, event);
    });
};

/**
 * Delete an event
 *
 * @param  {Event}      event           The event to delete
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var deleteEvent = module.exports.deleteEvent = function(event, callback) {
    event.destroy().complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Failed to delete an event');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'event': event}, 'Deleted an event');
        return callback();
    });
};
