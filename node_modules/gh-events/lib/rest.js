/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var GrassHopper = require('gh-core');
var GrasshopperUtil = require('gh-core/lib/util');

var EventsAPI = require('./api');

/**
 * @REST getEvent
 *
 * Get an event
 *
 * @Server      admin,app
 * @Method      GET
 * @Path        /events/{id}
 * @PathParam   {number}            id                  The id of the event to retrieve
 * @Return      {Event}                                 The requested event
 */
var getEvent = function(req, res) {
    EventsAPI.getEvent(req.ctx, req.params.id, function(err, event) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(200).send(event);
    });
};

GrassHopper.globalAdminRouter.on('get', '/api/events/:id', getEvent);
GrassHopper.appRouter.on('get', '/api/events/:id', getEvent);

/**
 * @REST createEvent
 *
 * Create a new event in the current app
 *
 * @Server      app
 * @Method      POST
 * @Path        /events
 * @FormParam   {string}            displayName         The name of the event
 * @FormParam   {number}            end                 The timestamp (ISO 8601) at which the event ends
 * @FormParam   {number}            start               The timestamp (ISO 8601) at which the event starts
 * @FormParam   {string}            [description]       The description of the event
 * @FormParam   {number}            [group]             The id of the group that can manage the event
 * @FormParam   {string}            [location]          The location of the event
 * @FormParam   {string}            [notes]             The notes for the event
 * @FormParam   {string[]}          [organiserOther]    The name(s) of the unrecognised user(s) that organise the event. If no organisers are added, the current user will be added as the organiser
 * @FormParam   {string[]}          [organiserUser]     The id(s) of the recognised user(s) that organise the event
 * @FormParam   {number}            [serie]             The id(s) of the serie(s) that the event belongs to
 * @Return      {Event}                                 The created event
 */

/**
 * @REST createEventByApp
 *
 * Create a new event in an app
 *
 * @Server      admin
 * @Method      POST
 * @Path        /events
 * @FormParam   {number}            app                 The id of the app to create the event for
 * @FormParam   {string}            displayName         The name of the event
 * @FormParam   {date-time}         end                 The timestamp (ISO 8601) at which the event ends
 * @FormParam   {date-time}         start               The timestamp (ISO 8601) at which the event starts
 * @FormParam   {string}            [description]       The description of the event
 * @FormParam   {number}            [group]             The id of the group that can manage the event
 * @FormParam   {string}            [location]          The location of the event
 * @FormParam   {string}            [notes]             The notes for the event
 * @FormParam   {string[]}          [organiserOther]    The name(s) of the unrecognised user(s) that organise the event. If no organisers are added, the current user will be added as the organiser
 * @FormParam   {number[]}          [organiserUsers]    The id(s) of the recognised user(s) that organise the event
 * @FormParam   {number}            [serie]             The id(s) of the serie(s) that the event belongs to
 * @Return      {Event}                                 The created event
 */
var createEvent = function(req, res) {
    var opts = {
        'description': req.body.description,
        'location': req.body.location,
        'notes': req.body.notes,
        'organiserOther': GrasshopperUtil.toArray(req.body.organiserOther),
        'organiserUsers': GrasshopperUtil.toArray(req.body.organiserUsers),
        'serie': GrasshopperUtil.toArray(req.body.serie)
    };
    EventsAPI.createEvent(req.ctx, req.body.app, req.body.displayName, req.body.start, req.body.end, opts, function(err, event) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(201).send(event);
    });
};
GrassHopper.appRouter.on('post', '/api/events', createEvent);
GrassHopper.globalAdminRouter.on('post', '/api/events', createEvent);

/**
 * @REST updateEvent
 *
 * Update an event
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /events/{id}
 * @PathParam   {number}                id                  The id of the event to update
 * @FormParam   {string}                [description]       Updated event description
 * @FormParam   {string}                [displayName]       Updated event name
 * @FormParam   {number}                [end]               The updated timestamp (ISO 8601) at which the event ends
 * @FormParam   {string}                [location]          The updatedlocation of the event
 * @FormParam   {group}                 [group]             Updated id of the group that can manage the event
 * @FormParam   {string}                [notes]             The updated notes for the event
 * @FormParam   {number}                [start]             The updated timestamp (ISO 8601) at which the event starts
 * @Return      {Event}                                     The updated event
 */
var updateEvent = function(req, res) {
    EventsAPI.updateEvent(req.ctx, req.params.id, req.body, function(err, event) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(201).send(event);
    });
};

GrassHopper.globalAdminRouter.on('post', '/api/events/:id', updateEvent);
GrassHopper.appRouter.on('post', '/api/events/:id', updateEvent);

/**
 * @REST updateEventOrganisers
 *
 * Update the organisers of an event
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /events/{id}/organisers
 * @PathParam   {number}                id                  The id of the group for which to update the organisers
 * @BodyParam   {EventOrganiserUpdate}  body                Object that describes the event organiser changes to apply
 * @Return      {Event}                                     The updated event
 */
var updateEventOrganisers = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/events/:id/organisers', updateEvent);
GrassHopper.appRouter.on('post', '/api/events/:id/organisers', updateEvent);

/**
 * @REST setEventPicture
 *
 * Store a picture for an event
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /events/{id}/picture
 * @PathParam   {number}                id                  The id of the event to store the picture for
 * @FormParam   {File}                  file                Image that should be stored as the event picture
 * @Return      {Event}                                     The updated event
 */
var setEventPicture = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/events/:id/picture', setEventPicture);
GrassHopper.appRouter.on('post', '/api/events/:id/picture', setEventPicture);

/**
 * @REST cropEventPicture
 *
 * Crop the picture for an event
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /events/{id}/picture/crop
 * @FormParam   {number}        id                      The id of the event to crop the picture for
 * @FormParam   {number}        width                   The width of the square that needs to be cropped out
 * @FormParam   {number}        x                       The x coordinate of the top left corner to start cropping at
 * @FormParam   {number}        y                       The y coordinate of the top left corner to start cropping at
 * @Return      {Event}                                The updated event
 */
var cropEventPicture = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/events/:id/picture/crop', cropEventPicture);
GrassHopper.appRouter.on('post', '/api/events/:id/picture/crop', cropEventPicture);

/**
 * @REST deleteEvent
 *
 * Delete an event
 *
 * @Server      admin,app
 * @Method      DELETE
 * @Path        /events/{id}
 * @PathParam   {number}            id                  The id of the event to delete
 * @Return      {void}
 */
var deleteEvent = function(req, res) {
    EventsAPI.deleteEvent(req.ctx, req.params.id, function(err) {
        if (err) {
            return res.status(err.code).send(err.msg);
        }

        return res.status(200).send();
    });
};

GrassHopper.globalAdminRouter.on('delete', '/api/events/:id', deleteEvent);
GrassHopper.appRouter.on('delete', '/api/events/:id', deleteEvent);

/**
 * @REST getEventSubscribers
 *
 * Get the users that have subscribed to an event series
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /series/{id}/subscribers
 * @PathParam   {number}            id                  The id of the event to get the subscribers for
 * @QueryParam  {number}            [limit]             The maximum number of results to retrieve. Default: 10
 * @QueryParam  {number}            [offset]            The paging number of the results to retrieve
 * @Return      {UserList}                              The users that have subscribed to the event
 */
var getEventSubscribers = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/events/:id/subscribers', getEventSubscribers);
GrassHopper.appRouter.on('post', '/api/events/:id/subscribers', getEventSubscribers);

/**
 * @REST subscribeEvent
 *
 * Subscribe to an event
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /events/{id}/subscribe
 * @PathParam   {number}            id                  The id of the event to subscribe to
 * @Return      {void}
 */
var subscribeEvent = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminRouter.on('post', '/api/events/:id/subscribe', subscribeEvent);
GrassHopper.appRouter.on('post', '/api/events/:id/subscribe', subscribeEvent);
