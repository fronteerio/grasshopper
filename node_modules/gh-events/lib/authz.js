/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var GroupsDAO = require('gh-groups/lib/internal/dao');
var SeriesAuthz = require('gh-series/lib/authz');

var EventsDAO = require('./internal/dao');

/**
 * Determine whether or not the user in context can create an event
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Number}     appId                       The id of the application on which the event is created
 * @param  {Serie[]}    [series]                    The series to which the new event should be added
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canCreateEvent     `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canCreateEvent = module.exports.canCreateEvent = function(ctx, appId, series, callback) {
    // Anonymous users cannot create events
    if (!ctx.user) {
        return callback(null, false);

    // Only global admins can create an event on another application
    } else if (ctx.app.id !== appId && !ctx.user.isGlobalAdmin()) {
        return callback({'code': 401, 'msg': 'Only global administrators can create events on other applications'});
    }

    // TODO: Check the configuration whether regular users can create events

    // Check whether the user can add an event under each serie, if any
    _checkSeries(ctx, _.clone(series), callback);
};

/**
 * Determine whether or not the user in context can add events to one or more series
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Serie[]}    series                      The series to which the current user wants to add events
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canAdd             `true` if the user in context has the appropriate permission. `false` otherwise
 * @api private
 */
var _checkSeries = function(ctx, series, callback) {
    // If there are no series left to check, the user can create the event
    // under each serie (if any)
    if (_.isEmpty(series)) {
        return callback(null, true);
    }

    // Check the next serie
    var serie = series.pop();
    SeriesAuthz.canAddSeriesEvents(ctx, serie, function(err, canAddEvents) {
        if (err) {
            return callback(err);
        } else if (!canAddEvents) {
            return callback(null, false);
        }

        // Move on to the next serie, if any
        _checkSeries(ctx, series, callback);
    });
};

/**
 * Determine whether or not the user in context can update an event
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Event}      event                       The event that will be updated
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canUpdateEvent     `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canUpdateEvent = module.exports.canUpdateEvent = function(ctx, event, callback) {
    // Anonymous users cannot update events
    if (!ctx.user) {
        return callback(null, false);

    // Application admins of the event's application and global admins can update events
    } else if (ctx.user.canAdmin(event.AppId)) {
        return callback(null, true);
    }

    // Organisers can update an event
    EventsDAO.getOrganisers(event, function(err, organisers) {
        if (err) {
            return callback(err);
        }

        var isOrganiser = (!_.isUndefined(_.find(organisers, {'id': ctx.user.id})));
        if (isOrganiser) {
            return callback(null, true);
        }

        // We need to check if the user is a member of the group the event belongs to
        GroupsDAO.isMember(event.Group, ctx.user, callback);
    });
};

/**
 * Determine whether or not the user in context can delete an event
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Event}      event                       The event that will be deleted
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canDeleteEvent     `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canDeleteEvent = module.exports.canDeleteEvent = function(ctx, event, callback) {
    // The rules for deleting an event are the same as updating it
    canUpdateEvent(ctx, event, callback);
};
