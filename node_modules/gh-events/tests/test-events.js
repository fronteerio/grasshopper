/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var assert = require('assert');
var moment = require('moment');

var TestsUtil = require('gh-tests');

var EventsTestUtil = require('./util');

describe('Events', function() {

    describe('Create event', function() {

        /**
         * Test that verifies that a new event can be created
         */
        it('verify create event', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 3, function(simon, nico, sam) {

                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                // Verify creating a basic event
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {

                    // Verify creating an event with more metadata
                    var opts = {
                        'description': 'Analysis of Up the movie',
                        'notes': 'Bring tissues',
                        'location': 'Drama house, 2nd floor, room 304B'
                    };
                    EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, opts, function(createdEvent) {

                        // Verify creating an event and specifying the organiser in plain-text
                        opts.organiserOther = ['Po', 'Lala', 'Tinky', 'Winky', 'Dipsy'];
                        EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, opts, function(createdEvent) {

                            // Verify creating an event and specifying actual users as organisers
                            opts.organiserUsers = [nico.profile.id, sam.profile.id];
                            EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, opts, function(createdEvent) {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that organisers are validated
         */
        it('verify organisers are validated', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {
                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                // Invalid plain-text organisers
                var opts = {'organiserOther': ['A value with a ,']};
                EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 400, function() {
                    opts = {'organiserOther': [TestsUtil.generateString(257)]};
                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 400, function() {

                        // Invalid user organisers
                        opts = {'organiserUsers': ['not a number']};
                        EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 400, function() {
                            opts = {'organiserUsers': [-1]};
                            EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 404, callback);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the organiser defaults to the current user if no organiser was specified
         */
        it('verify the organiser defaults to the current user if no organiser was specified', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {
                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {
                    assert.strictEqual(createdEvent.organisers.length, 1);
                    assert.strictEqual(createdEvent.organisers[0].id, simon.profile.id);
                    return callback();
                });
            });
        });

        /**
         * Test that verifies validation for creating events
         */
        it('verify create events validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                var opts = {};

                // Missing displayName
                EventsTestUtil.assertCreateEventFails(simon.client, null, start, end, opts, 400, function() {

                    // Mising start date
                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', null, end, opts, 400, function() {

                        // Missing end date
                        EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, null, opts, 400, function() {

                            // Invalid start date
                            EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', 'bleh', end, opts, 400, function() {

                                // Invalid end date
                                EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, 'bleh', opts, 400, function() {
                                
                                    // The start date cannot come after the end date
                                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                        // Too long description
                                        opts = {'description': TestsUtil.generateString(1001)};
                                        EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                            // Too long location
                                            opts = {'location': TestsUtil.generateString(257)};
                                            EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                                // Too long notes
                                                opts = {'notes': TestsUtil.generateString(10001)};
                                                EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                                    // Invalid application
                                                    opts = {'app': 'not a number'};
                                                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, callback);
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for creating events
         */
        it('verify create events authorization', function(callback) {
            // Anonymous users cannot create an event
            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEventFails(anonymousClient, 'Test event', start, end, null, 401, function() {

                    // Regular users have to stick to creating events on their own tenant
                    TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {
                        var opts = {'app': global.tests.apps.cam2014.id};
                        EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 401, callback);
                    });
                });
            });
        });
    });

    describe('Getting an event', function() {

        /**
         * Test that verifies getting an event
         */
        it('verify getting an event', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {

                    // Retrieve it
                    EventsTestUtil.assertGetEvent(simon.client, createdEvent.id, createdEvent, function(retrievedEvent) {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation for getting an event
         */
        it('verify getting an event validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {

                // Invalid event id
                EventsTestUtil.assertGetEventFails(simon.client, 'not a number', 400, function() {

                    // Unknown event id
                    EventsTestUtil.assertGetEventFails(simon.client, -1, 404, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for getting an event
         */
        it('verify getting an event authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {
                TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, function(nico) {

                    // Create an event on the 2013 app
                    var start = moment().format();
                    var end = moment().add(2, 'hour').format();
                    EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {

                        // Assert that it can't be retrieved on the 2014 app
                        EventsTestUtil.assertGetEventFails(nico.client, createdEvent.id, 401, function() {

                            // Assert a global admin can retrieve it
                            TestsUtil.getGlobalAdminRestClient(function(adminClient) {
                                EventsTestUtil.assertGetEvent(adminClient, createdEvent.id, createdEvent, function(retrievedEvent) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Updating an event', function() {

        /**
         * Test that verifies that an event can be updated
         */
        it('verify updating an event', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {

                    // Update it
                    var update = {'displayName': 'Updated event'};
                    EventsTestUtil.assertUpdateEvent(simon.client, createdEvent.id, update, function(updatedEvent) {

                        // Retrieve it
                        EventsTestUtil.assertGetEvent(simon.client, createdEvent.id, updatedEvent, function(retrievedEvent) {
                            return callback();
                        });
                    });
                });
            });            
        });

        /**
         * Test that verifies that organisers are validated
         */
        it('verify updating an event validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(event) {

                    // No updates
                    var update = {};
                    EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                        // Invalid start date
                        update = {'start': 'bleh'};
                        EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                            // Invalid end date
                            update = {'end': 'bleh'};
                            EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                // The start date cannot come after the end date
                                update = {
                                    'start': end,
                                    'end': start
                                };
                                EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                    // Too long displayName
                                    update = {'displayName': TestsUtil.generateString(257)};
                                    EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                        // Too long description
                                        update = {'description': TestsUtil.generateString(1001)};
                                        EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                            // Too long location
                                            update = {'location': TestsUtil.generateString(257)};
                                            EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                                // Too long notes
                                                update = {'notes': TestsUtil.generateString(10001)};
                                                EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization for updating an event
         */
        it('verify updating an event authorization', function(callback) {
            // TODO: Implement when groups land
            return callback();
        });
    });

    describe('Deleting an event', function() {

        /**
         * Test that verifies deleting an event
         */
        it('verify deleting an event', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {

                    // Delete it
                    EventsTestUtil.assertDeleteEvent(simon.client, createdEvent.id, function() {

                        // Try to retrieve the event, it should be gone
                        EventsTestUtil.assertGetEventFails(simon.client, createdEvent.id, 404, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies the validation for deleting an event
         */
        it('verify deleting an event validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, function(simon) {

                // Invalid event id
                EventsTestUtil.assertDeleteEventFails(simon.client, 'not a number', 400, function() {

                    // Unknown event id
                    EventsTestUtil.assertDeleteEventFails(simon.client, -1, 404, callback);
                });
            });
        });

        /**
         * Test that verifies the validation for deleting an event
         */
        it('verify deleting an event validation', function(callback) {
            // TODO: Implement when groups land
            return callback();
        });
    });
});
