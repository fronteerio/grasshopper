/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var assert = require('assert');
var moment = require('moment');

var GroupsTestUtil = require('gh-groups/tests/util');
var OrgUnitTestUtil = require('gh-orgunit/tests/util');
var SeriesTestUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');

var EventsTestUtil = require('./util');

describe('Events', function() {

    describe('Create event', function() {

        /**
         * Test that verifies that a new event can be created
         */
        it('verify create event', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 3, false, function(simon, nico, sam) {

                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                // Verify creating a basic event
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {

                    // Verify creating an event with more metadata
                    var opts = {
                        'description': 'Analysis of Up the movie',
                        'notes': 'Bring tissues',
                        'location': 'Drama house, 2nd floor, room 304B'
                    };
                    EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, opts, function(createdEvent) {

                        // Verify creating an event and specifying the organiser in plain-text
                        opts.organiserOther = ['Po', 'Lala', 'Tinky', 'Winky', 'Dipsy'];
                        EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, opts, function(createdEvent) {

                            // Verify creating an event and specifying actual users as organisers
                            opts.organiserUsers = [nico.profile.id, sam.profile.id];
                            EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, opts, function(createdEvent) {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that organisers are validated
         */
        it('verify organisers are validated', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(nicolaas) {
                    var start = moment().format();
                    var end = moment().add(2, 'hour').format();

                    // Invalid plain-text organisers
                    var opts = {'organiserOther': ['A value with a ,']};
                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 400, function() {
                        opts = {'organiserOther': [TestsUtil.generateString(257)]};
                        EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 400, function() {

                            // Invalid user organisers
                            opts = {'organiserUsers': ['not a number']};
                            EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 400, function() {
                                opts = {'organiserUsers': [-1]};
                                EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 400, function () {

                                    // Organiser from another applicaton
                                    opts = {'organiserUsers': [nicolaas.profile.id]};
                                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 400, function () {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the organiser defaults to the current user if no organiser was specified
         */
        it('verify the organiser defaults to the current user if no organiser was specified', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                var start = moment().format();
                var end = moment().add(2, 'hour').format();

                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {
                    assert.strictEqual(createdEvent.organisers.length, 1);
                    assert.strictEqual(createdEvent.organisers[0].id, simon.profile.id);

                    // When a global administrator creates the event, no organisers will be added
                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                        var opts = {'app': global.tests.apps.cam2013.id};
                        EventsTestUtil.assertCreateEvent(globalAdminClient, 'Test event', start, end, opts, function(createdEvent) {
                            assert.strictEqual(createdEvent.organisers.length, 0);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an existing group can be used when creating events
         */
        it('verify an existing group can be used when creating events', function(callback) {
            // Verify a group from another application cannot be used
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2014.client, 'Test org unit', 'course', null, function(otherAppOrgUnit) {
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                var opts = {'group': otherAppOrgUnit.GroupId};
                EventsTestUtil.assertCreateEventFails(global.tests.admins.cam2013.client, 'Test event', start, end, opts, 401, function() {


                    // A group from the same application can be used
                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {
                        opts = {'group': orgUnit.GroupId};
                        EventsTestUtil.assertCreateEvent(global.tests.admins.cam2013.client, 'Test event', start, end, opts, function(createdEvent) {
                            assert.strictEqual(createdEvent.GroupId, orgUnit.GroupId);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an event can be created under one or more series
         */
        it('verify an event can be created under one or more series', function(callback) {
            // Create a few series
            SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serieA) {
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serieB) {
                    SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serieC) {

                        // Create an event under one serie
                        var start = moment().format();
                        var end = moment().add(2, 'hour').format();
                        var opts = {'series': [serieA.id]};
                        EventsTestUtil.assertCreateEvent(global.tests.admins.cam2013.client, 'Test Event', start, end, opts, function(eventA) {

                            // Create an event under two series
                            opts.series = [serieB.id, serieC.id];
                            EventsTestUtil.assertCreateEvent(global.tests.admins.cam2013.client, 'Test Event', start, end, opts, function(eventB) {

                                // Sanity-check the event was added to each serie
                                SeriesTestUtil.assertGetSeriesEvents(global.tests.admins.cam2013.client, serieA.id, null, null, null, [eventA], function() {
                                    SeriesTestUtil.assertGetSeriesEvents(global.tests.admins.cam2013.client, serieB.id, null, null, null, [eventB], function() {
                                        SeriesTestUtil.assertGetSeriesEvents(global.tests.admins.cam2013.client, serieC.id, null, null, null, [eventB], function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation for creating events
         */
        it('verify create events validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                var opts = {};

                // Missing displayName
                EventsTestUtil.assertCreateEventFails(simon.client, null, start, end, opts, 400, function() {

                    // Mising start date
                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', null, end, opts, 400, function() {

                        // Missing end date
                        EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, null, opts, 400, function() {

                            // Invalid start date
                            EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', 'bleh', end, opts, 400, function() {

                                // Invalid end date
                                EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, 'bleh', opts, 400, function() {

                                    // The start date cannot come after the end date
                                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                        // Too long description
                                        opts = {'description': TestsUtil.generateString(1001)};
                                        EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                            // Too long location
                                            opts = {'location': TestsUtil.generateString(257)};
                                            EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                                // Too long notes
                                                opts = {'notes': TestsUtil.generateString(10001)};
                                                EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                                    // Invalid application
                                                    opts = {'app': 'not a number'};
                                                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                                        // Invalid group
                                                        opts = {'group': 'not a number'};
                                                        EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                                            // Unknown group
                                                            opts = {'group': -1};
                                                            EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                                                // Invalid serie
                                                                opts = {'series': 'not a number'};
                                                                EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {
                                                                    opts = {'series': [1, 'not a number']};
                                                                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {

                                                                        // Unknown serie
                                                                        opts = {'series': -1};
                                                                        EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {
                                                                            opts = {'series': [1, -1]};
                                                                            EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', end, start, opts, 400, function() {
                                                                                return callback();
                                                                            });
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for creating events
         */
        it('verify create events authorization', function(callback) {
            // Anonymous users cannot create an event
            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEventFails(anonymousClient, 'Test event', start, end, null, 401, function() {

                    // Regular users have to stick to creating events on their own tenant
                    TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                        var opts = {'app': global.tests.apps.cam2014.id};
                        EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 401, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when creating events under series
         */
        it('verify authorization when creating events under series', function(callback) {
            var start = moment().format();
            var end = moment().add(2, 'hour').format();

            // Verify the serie must be from the same application
            SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(camSerie) {
                SeriesTestUtil.assertCreateSerie(global.tests.admins.oxford2014.client, 'Test serie', null, function(oxSerie) {
                    var opts = {'series': oxSerie.id};
                    EventsTestUtil.assertCreateEventFails(global.tests.admins.cam2013.client, 'Test event', start, end, opts, 401, function() {
                        opts.series = [camSerie.id, oxSerie.id];
                        EventsTestUtil.assertCreateEventFails(global.tests.admins.cam2013.client, 'Test event', start, end, opts, 401, function() {

                            // Verify regular users can only add events to their own series
                            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(simonSerie) {
                                    opts.series = [camSerie.id];
                                    EventsTestUtil.assertCreateEventFails(simon.client, 'Test event', start, end, opts, 401, function() {
                                        // Sanity-check Simon can add the event to his own serie
                                        opts.series = [simonSerie.id];
                                        EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, opts, function() {

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Getting an event', function() {

        /**
         * Test that verifies getting an event
         */
        it('verify getting an event', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {

                    // Retrieve it
                    EventsTestUtil.assertGetEvent(simon.client, createdEvent.id, createdEvent, function(retrievedEvent) {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation for getting an event
         */
        it('verify getting an event validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Invalid event id
                EventsTestUtil.assertGetEventFails(simon.client, 'not a number', 400, function() {

                    // Unknown event id
                    EventsTestUtil.assertGetEventFails(simon.client, -1, 404, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for getting an event
         */
        it('verify getting an event authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(nico) {

                    // Create an event on the 2013 app
                    var start = moment().format();
                    var end = moment().add(2, 'hour').format();
                    EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {

                        // Assert that it can't be retrieved on the 2014 app
                        EventsTestUtil.assertGetEventFails(nico.client, createdEvent.id, 401, function() {

                            // Assert a global admin can retrieve it
                            TestsUtil.getGlobalAdminRestClient(function(adminClient) {
                                EventsTestUtil.assertGetEvent(adminClient, createdEvent.id, createdEvent, function(retrievedEvent) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Updating an event', function() {

        /**
         * Test that verifies that an event can be updated
         */
        it('verify updating an event', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {

                    // Update it
                    var update = {'displayName': 'Updated event'};
                    EventsTestUtil.assertUpdateEvent(simon.client, createdEvent.id, update, function(updatedEvent) {

                        // Retrieve it
                        EventsTestUtil.assertGetEvent(simon.client, createdEvent.id, updatedEvent, function(retrievedEvent) {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when updating an event
         */
        it('verify updating an event validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(event) {

                    // No updates
                    var update = {};
                    EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                        // Invalid start date
                        update = {'start': 'bleh'};
                        EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                            // Invalid end date
                            update = {'end': 'bleh'};
                            EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                // The start date cannot come after the end date
                                update = {
                                    'start': end,
                                    'end': start
                                };
                                EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                    // Too long displayName
                                    update = {'displayName': TestsUtil.generateString(257)};
                                    EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                        // Too long description
                                        update = {'description': TestsUtil.generateString(1001)};
                                        EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                            // Too long location
                                            update = {'location': TestsUtil.generateString(257)};
                                            EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                                // Too long notes
                                                update = {'notes': TestsUtil.generateString(10001)};
                                                EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                                    // Invalid group
                                                    update = {'group': 'not a number'};
                                                    EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 400, function() {

                                                        // Unknown group
                                                        update = {'group': -1};
                                                        EventsTestUtil.assertUpdateEventFails(simon.client, event.id, update, 404, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization for updating an event
         */
        it('verify updating an event authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 4, false, function(simon, nico, sam, bert) {

                // Create an event, that Nico organises
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                var opts = {
                    'organiserUsers': [nico.profile.id]
                };
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, opts, function(event) {


                    var update = {'displayName': 'Updated event'};

                    // Anonymous users cannot update an event
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        EventsTestUtil.assertUpdateEventFails(anonymousClient, event.id, update, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                                EventsTestUtil.assertUpdateEventFails(anonymousGlobalAdminClient, event.id, update, 401, function() {

                                    // Authenticated users unrelated to the event cannot update the event
                                    EventsTestUtil.assertUpdateEventFails(bert.client, event.id, update, 401, function() {

                                        // App admins from another application cannot update the event
                                        EventsTestUtil.assertUpdateEventFails(global.tests.admins.oxford2014.client, event.id, update, 401, function() {

                                            // Organisers can update the event
                                            EventsTestUtil.assertUpdateEvent(nico.client, event.id, update, function() {

                                                // Members of the event's group can update the event
                                                var membersUpdate = {};
                                                membersUpdate[sam.profile.id] = true;
                                                GroupsTestUtil.assertUpdateGroupMembers(simon.client, event.GroupId, membersUpdate, function() {
                                                    EventsTestUtil.assertUpdateEvent(sam.client, event.id, update, function() {

                                                        // Application admins can update the event
                                                        EventsTestUtil.assertUpdateEvent(global.tests.admins.cam2013.client, event.id, update, function() {

                                                            // Global admins can update the event
                                                            TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                                EventsTestUtil.assertUpdateEvent(globalAdminClient, event.id, update, function() {
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Deleting an event', function() {

        /**
         * Test that verifies deleting an event
         */
        it('verify deleting an event', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create an event
                var start = moment().format();
                var end = moment().add(2, 'hour').format();
                EventsTestUtil.assertCreateEvent(simon.client, 'Test event', start, end, null, function(createdEvent) {

                    // Delete it
                    EventsTestUtil.assertDeleteEvent(simon.client, createdEvent.id, function() {

                        // Try to retrieve the event, it should be gone
                        EventsTestUtil.assertGetEventFails(simon.client, createdEvent.id, 404, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies the validation for deleting an event
         */
        it('verify deleting an event validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Invalid event id
                EventsTestUtil.assertDeleteEventFails(simon.client, 'not a number', 400, function() {

                    // Unknown event id
                    EventsTestUtil.assertDeleteEventFails(simon.client, -1, 404, callback);
                });
            });
        });

        /**
         * Create an event and try to delete it
         *
         * @param  {Object}     creator             Holds the client/user who will create the event
         * @param  {Object}     organiser           Holds the client/user who will be the event organiser
         * @param  {Object}     extraGroupMember    Holds the client/user who will be added to the group that can manage the event
         * @param  {Client}     deleterClient       The client that will try to delete the event
         * @param  {Boolean}    expectFailure       Whether or not the delete request should fail
         * @param  {Function}   callback            Standard callback function
         * @throws {AssertionError}                 Error thrown when an assertion failed
         */
        var _deleteEvent = function(creator, organiser, extraGroupMember, deleterClient, expectFailure, callback) {
            // Create an event
            var start = moment().format();
            var end = moment().add(2, 'hour').format();
            var opts = {
                'organiserUsers': [organiser.profile.id]
            };
            EventsTestUtil.assertCreateEvent(creator.client, 'Test event', start, end, opts, function(event) {

                // Add an extra group member
                var membersUpdate = {};
                membersUpdate[extraGroupMember.profile.id] = true;
                GroupsTestUtil.assertUpdateGroupMembers(creator.client, event.GroupId, membersUpdate, function() {

                    // Try to delete the event
                    if (expectFailure) {
                        EventsTestUtil.assertDeleteEventFails(deleterClient, event.id, 401, callback);
                    } else {
                        EventsTestUtil.assertDeleteEvent(deleterClient, event.id, callback);
                    }
                });
            });
        };

        /**
         * Test that verifies the validation for deleting an event
         */
        it('verify deleting an event authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 4, false, function(simon, nico, sam, bert) {

                // Anonymous users cannot delete an event
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    _deleteEvent(simon, nico, sam, anonymousClient, true, function() {
                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalAdminClient) {
                            _deleteEvent(simon, nico, sam, anonymousGlobalAdminClient, true, function() {

                                // Authenticated users unrelated to the event cannot delete the event
                                _deleteEvent(simon, nico, sam, bert.client, true, function() {

                                    // App admins from another application cannot delete the event
                                    _deleteEvent(simon, nico, sam, global.tests.admins.oxford2014.client, true, function() {

                                        // Organisers can delete the event
                                        _deleteEvent(simon, nico, sam, nico.client, false, function() {

                                            // Members of the event's group can delete the event
                                            _deleteEvent(simon, nico, sam, sam.client, false, function() {

                                                // Application admins can delete the event
                                                _deleteEvent(simon, nico, sam, global.tests.admins.cam2013.client, false, function() {

                                                    // Global admins can delete the event
                                                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                        _deleteEvent(simon, nico, sam, globalAdminClient, false, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
