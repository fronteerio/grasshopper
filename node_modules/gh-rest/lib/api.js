/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var RestUtil = require('./util');

/**
 * Create a client that can talk to the REST APIs
 *
 * @param  {Object}     options                             The options that specify where the client should connect to and how
 * @param  {String}     options.protocol                    The protocol over which to connect. One of `http` or `https`
 * @param  {String}     options.host                        The host to which to connect (including the port)
 * @param  {Boolean}    [options.strictSSL]                 Whether or not SSL should be strictly enforced. This can be useful to connect to QA servers which have a self-signed certificate. Defaults to `false`
 * @param  {String}     [options.authenticationStrategy]    The authentication strategy for the user. If left blank, all requests will be made anonymously. Options are `local`
 * @param  {String}     [options.username]                  In case of `local` authentication, this should hold the username to authenticate with
 * @param  {String}     [options.password]                  In case of `local` authentication, this should hold the password to authenticate with
 * @param  {String}     [options.hostHeader]                The host header that should be sent to the server. If left blank, `options.host` will be sent
 * @param  {Function}   callback                            Standard callback function
 * @param  {Object}     callback.err                        An error object, if any
 * @param  {Client}     callback.client                     The client to connect with
 */
var createClient = module.exports.createClient = function(options, callback) {
    options = options || {};
    options.protocol = options.protocol || 'http';
    options.strictSSL = options.strictSSL || false;
    options.hostHeader = options.hostHeader || options.host;

    // Create an anonymous client
    var client = _createAnonymousClient(options);

    // Try to authenticate the client if any credentials were provided
    if (options.authenticationStrategy === 'local') {
        client.auth.login(options.username, options.password, function(err) {
            if (err) {
                return callback(err);
            }

            return callback(null, client);
        });
    // If no authentication type was specified, we return a client that will
    // act as the anonymous user
    } else {
        return callback(null, client);
    }
};

/**
 * Create an anonymous REST client
 *
 * @param  {Object}         options     The options that specify where the client should connect to and how
 * @return {RestClient}                 An anonymous REST client
 * @see createClient for more information about the `options`
 * @api private
 */
var _createAnonymousClient = function(options) {
    var client = {
        'options': options
    };

    // Expose some logic to make raw requests
    RestUtil.setup(client);

    // Add all the REST api logic
    require('./rest/auth')(client);
    require('./rest/app')(client);
    require('./rest/config')(client);
    require('./rest/event')(client);
    require('./rest/group')(client);
    require('./rest/orgunit')(client);
    require('./rest/serie')(client);
    require('./rest/tenant')(client);
    require('./rest/user')(client);

    return client;
};

