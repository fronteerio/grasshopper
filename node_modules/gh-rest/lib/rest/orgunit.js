/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module.exports = function(client) {
    client.orgUnit = {};

    /**
     * Get an organisational unit
     *
     * @param  {Number}         id                              The id of the organisational unit to retrieve
     * @param  {Boolean}        [includeSeries]                 Whether to include the event series associated to the organisational units
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.getOrgUnit = function(id, includeSeries, callback) {
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id);
        var data = {
            'includeSeries': includeSeries
        };
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Get the organisational units in an app
     *
     * @param  {Number}         [app]                           The id of the app to get the organisational units for. Defaults to the current app
     * @param  {Boolean}        [includeSeries]                 Whether to include the event series associated to the organisational units. Defaults to `false`
     * @param  {Boolean}        [includePermissions]            Whether to include if the current user can manage the organisational units/series and whether an organisational unit is locked. Defaults to `false`
     * @param  {Number}         [parent]                        The id of the parent to retrieve the organisational units for
     * @param  {String[]}       [type]                          The organisational unit type[s] to filter the organisational unit by
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.getOrgUnits = function(app, includeSeries, includePermissions, parent, type, callback) {
        var data = {
            'app': app,
            'includeSeries': includeSeries,
            'includePermissions': includePermissions,
            'parent': parent,
            'type': type
        };
        client._request('/api/orgunit', 'GET', data, null, callback);
    };

    /**
     * Create an organisational unit
     *
     * @param  {String}         displayName                     The name of the organisational unit
     * @param  {Number}         type                            The organisational unit type (e.g. `tripos`, `part`)
     * @param  {Object}         [opts]                          A set of optional parameters
     * @param  {Number}         [opts.app]                      The id of the application that this organisational unit will belong to
     * @param  {String}         [opts.description]              The description of the organisational unit
     * @param  {Number}         [opts.group]                    The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
     * @param  {Number}         [opts.parent]                   The id of the parent organisational unit
     * @param  {Object|String}  [opts.metadata]                 The metadata of the organisational unit. When using a string, it should be a stringified JSON object
     * @param  {Boolean}        [opts.published]                The published flag of the organisational unit
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.createOrgUnit = function(displayName, type, opts, callback) {
        opts = opts || {};
        var data = {
            'app': opts.app,
            'description': opts.description,
            'displayName': displayName,
            'group': opts.group,
            'parent': opts.parent,
            'metadata': opts.metadata,
            'published': opts.published,
            'type': type
        };
        client._request('/api/orgunit', 'POST', data, null, callback);
    };

    /**
     * Update an organisational unit
     *
     * @param  {Number}         id                              The id of the organisational unit to update
     * @param  {Object}         opts                            The values to update the organisational unit with
     * @param  {String}         [opts.displayName]              The name of the organisational unit
     * @param  {String}         [opts.description]              The description of the organisational unit
     * @param  {Number}         [opts.type]                     The organisational unit type (e.g. `tripos`, `part`)
     * @param  {Number}         [opts.group]                    The id of the group that can manage the organisational unit
     * @param  {Number}         [opts.parent]                   The id of the parent organisational unit
     * @param  {Object|String}  [opts.metadata]                 The metadata of the organisational unit. When using a string, it should be a stringified JSON object
     * @param  {Boolean}        [opts.published]                The published flag of the organisational unit
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.updateOrgUnit = function(id, opts, callback) {
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id);
        client._request(url, 'POST', opts, null, callback);
    };

    /**
     * Delete an organisational unit
     *
     * @param  {Number}         id                              The id of the organisational unit to delete
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.deleteOrgUnit = function(id, callback) {
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id);
        client._request(url, 'DELETE', null, null, callback);
    };

    /**
     * Get the event series for an organisational unit
     *
     * @param  {Number}         id                              The id of the organisational unit to retrieve the event series for
     * @param  {Number}         [limit]                         The maximum number of results to retrieve
     * @param  {[type]}         [offset]                        The paging number of the results to retrieve
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.getOrgUnitSeries = function(id, limit, offset, callback) {
        var data = {
            'limit': limit,
            'offset': offset
        };
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id) + '/series';
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Add a set of event series to an organisational unit
     *
     * @param  {Number}         id                              The id of the organisational unit to add the serie(s) to
     * @param  {Number[]}       series                          The id(s) of the serie(s) to add to the organisational unit
     * @param  {Number}         [fromOrgUnit]                   The id of the organisational unit the series are borrowed from
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.addOrgUnitSeries = function(id, series, fromOrgUnit, callback) {
        var data = {
            'serie': series,
            'fromOrgUnit': fromOrgUnit
        };
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id) + '/series';
        client._request(url, 'POST', data, null, callback);
    };

    /**
     * Delete a set of event series from an organisational unit
     *
     * @param  {Number}         id                              The id of the organisational unit to delete the serie(s) from
     * @param  {Number[]}       series                          The id(s) of the serie(s) to delete from the organisational unit
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.deleteOrgUnitSeries = function(id, series, callback) {
        var data = {
            'serie': series
        };
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id) + '/series';
        client._request(url, 'DELETE', data, null, callback);
    };

    /**
     * Subscribe to the event series and events in an organisational unit
     *
     * @param  {Number}         id                      The id of the organisational unit to subscribe to the event series and events for
     * @param  {Number}         userId                  The id of the user that should be subscribed from the event series and events in an organisational unit
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.subscribeOrgUnit = function(id, userId, callback) {
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id) + '/subscribe';
        var data = {'userId': userId};
        client._request(url, 'POST', data, null, callback);
    };

    /**
     * Unsubscribe from the event series and events in an organisational unit
     *
     * @param  {Number}         id                      The id of the organisational unit to unsubscribe from
     * @param  {Number}         userId                  The id of the user that should be unsubscribed from the event series and events in an organisational unit
     * @param  {Function}       callback                Standard callback function
     * @param  {Object}         callback.err            An error that occurred, if any
     * @param  {Object}         callback.body           The JSON response from the REST API
     * @param  {Response}       callback.response       The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.unsubscribeOrgUnit = function(id, userId, callback) {
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id) + '/unsubscribe';
        var data = {'userId': userId};
        client._request(url, 'POST', data, null, callback);
    };

    /**
     * Get the calendar for an organisational unit
     *
     * @param  {Number}         id                              The id of the organisational unit to get the calendar for
     * @param  {String}         start                           The timestamp (ISO 8601) from which to get the calendar for the organisation unit
     * @param  {String}         end                             The timestamp (ISO 8601) until which to get the calendar for the organisation unit
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.getOrgUnitCalendar = function(id, start, end, callback) {
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id) + '/calendar';
        var data = {
            'start': start,
            'end': end
        };
        client._request(url, 'GET', data, null, callback);
    };

    /**
     * Get the calendar for an organisational unit in iCal format
     *
     * @param  {Number}         id                              The id of the organisational unit to get the calendar for in iCal format
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.getOrgUnitCalendarIcal = function(id, callback) {
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id) + '/calendar.ical';
        client._request(url, 'GET', null, null, callback);
    };

    /**
     * Get the calendar for an organisational unit in RSS format
     *
     * @param  {Number}         id                              The id of the organisational unit to get the calendar for in RSS format
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-orgunit/lib/rest.js for more information
     */
    client.orgUnit.getOrgUnitCalendarRss = function(id, callback) {
        var url = '/api/orgunit/' + client.util.encodeURIComponent(id) + '/calendar.rss';
        client._request(url, 'GET', null, null, callback);
    };
};
