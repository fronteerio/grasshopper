/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

module.exports = function(client) {
    client.event = {};

    /**
     * Get an event
     *
     * @param  {Number}         id                              The id of the event to retrieve
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-events/lib/rest.js for more information
     */
    client.event.getEvent = function(id, callback) {
        var url = '/api/events/' + client.util.encodeURIComponent(id);
        client._request(url, 'GET', null, null, callback);
    };

    /**
     * Create an event
     *
     * @param  {String}         displayName                     The name of the event
     * @param  {Number}         start                           When the event starts, in millis since epoch (UTC)
     * @param  {Number}         end                             When the event ends, in millis since epoch (UTC)
     * @param  {Object}         [opts]                          A set of optional parameters
     * @param  {Number}         [opts.app]                      The id of the application that this event will belong to
     * @param  {String}         [opts.description]              The description of the event
     * @param  {Number}         [opts.group]                    The id of the group that can manage the event
     * @param  {String}         [opts.location]                 The location of the event
     * @param  {String}         [opts.notes]                    The notes for the event
     * @param  {String}         [opts.organiserOther]           The name(s) of the unrecognised user(s) that organise the event. If no organisers are added, the current user will be added as the organiser
     * @param  {Number[]}       [opts.organiserUsers]           The id(s) of the recognised user(s) that organise the event
     * @param  {Number[]}       [opts.series]                   The id(s) of the serie(s) that the event belongs to
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-events/lib/rest.js for more information
     */
    client.event.createEvent = function(displayName, start, end, opts, callback) {
        opts = opts || {};
        var data = {
            'app': opts.app,
            'description': opts.description,
            'displayName': displayName,
            'end': end,
            'group': opts.group,
            'location': opts.location,
            'notes': opts.notes,
            'organiserOther': opts.organiserOther,
            'organiserUsers': opts.organiserUsers,
            'series': opts.series,
            'start': start
        };
        client._request('/api/events', 'POST', data, null, callback);
    };

    /**
     * Update an event
     *
     * @param  {Number}         id                              The id of the event to update
     * @param  {Object}         update                          The updates to persist
     * @param  {string}         [update.description]            Updated event description
     * @param  {string}         [update.displayName]            Updated event name
     * @param  {number}         [update.end]                    Updated timestamp (ISO 8601) at which the event ends
     * @param  {string}         [update.location]               Updated location of the event
     * @param  {group}          [update.group]                  Updated id of the group that can manage the event
     * @param  {string}         [update.notes]                  Updated notes for the event
     * @param  {number}         [update.start]                  Updated timestamp (ISO 8601) at which the event starts
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-events/lib/rest.js for more information
     */
    client.event.updateEvent = function(id, update, callback) {
        update = update || {};
        var url = '/api/events/' + client.util.encodeURIComponent(id);
        client._request(url, 'POST', update, null, callback);
    };

    /**
     * Delete an event
     *
     * @param  {Number}         id                              The id of the event to delete
     * @param  {Function}       callback                        Standard callback function
     * @param  {Object}         callback.err                    An error that occurred, if any
     * @param  {Object}         callback.body                   The JSON response from the REST API
     * @param  {Response}       callback.response               The response object as returned by requestjs
     * @see gh-events/lib/rest.js for more information
     */
    client.event.deleteEvent = function(id, callback) {
        var url = '/api/events/' + client.util.encodeURIComponent(id);
        client._request(url, 'DELETE', null, null, callback);
    };
};
