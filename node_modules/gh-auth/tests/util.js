/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var url = require('url');
var util = require('util');

var TestsUtil = require('gh-tests/lib/util');
var UsersTestsUtil = require('gh-users/tests/util');

/**
 * Assert a user can log in
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {String}         username                The username for the user
 * @param  {String}         password                The password for the user
 * @param  {Function}       callback                Standard callback function
 */
var assertLogin = module.exports.assertLogin = function(client, username, password, callback) {
    client.auth.login(username, password, function(err, body, response) {
        assert.ok(!err);

        // Verify we're logged in
        client.user.getMe(function(err, body, response) {
            assert.ok(!err);
            assert.strictEqual(body.anon, false);
            return callback();
        });
    });
};

/**
 * Assert a user can not log in
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {String}         username                The username for the user
 * @param  {String}         password                The password for the user
 * @param  {Function}       callback                Standard callback function
 */
var assertLoginFails = module.exports.assertLoginFails = function(client, username, password, callback) {
    // Get the me feed before trying to log in so we know what our session was like before
    UsersTestsUtil.assertGetMe(client, function(meBefore) {

        // Attempt to log in, ensuring it fails
        client.auth.login(username, password, function(err, body, response) {
            assert.ok(err);
            assert.strictEqual(err.code, 401);

            // Get the me feed again, ensuring our session hasn't changed
            return UsersTestsUtil.assertGetMeEquals(client, meBefore, callback);
        });
    });
};

/**
 * Assert a user can log out
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Function}       callback                Standard callback function
 */
var assertLogout = module.exports.assertLogout = function(client, callback) {
    client.auth.logout(function(err, body, response) {
        assert.ok(!err);

        // Verify we're being redirected to the main page
        assert.ok(_.has(response.headers, 'location'));
        assert.strictEqual(response.headers.location, '/');

        // Verify we're logged out
        client.user.getMe(function(err, body, response) {
            assert.ok(!err);
            assert.strictEqual(body.anon, true);
            return callback();
        });
    });
};

/**
 * Assert that a user can be redirected from the application to the SP
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {String}         redirectUrl             The URL where the user should be redirect to once he succesfully authenticates
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.params         The parameters that can be used to initialise the shib flow on the Shibboleth application
 */
var assertShibbolethApplicationRedirect = module.exports.assertShibbolethApplicationRedirect = function(client, redirectUrl, callback) {
    client.auth.shibbolethApplicationRedirect(redirectUrl, function(err, body, response) {
        assert.ok(!err);

        // Verify we're being redirected to our Shibboleth application
        var shibHost = TestsUtil.getConfig().servers.shibbolethSPHost;
        assert.ok(_.has(response.headers, 'location'));
        assert.strictEqual(response.headers.location.indexOf(util.format('https://%s', shibHost)), 0);

        // Get the parameters that need to be sent to the Shibboleth application
        var params = url.parse(response.headers.location, true).query;
        assert.ok(_.has(params, 'app'));
        assert.ok(_.has(params, 'signature'));
        assert.ok(_.has(params, 'expires'));
        return callback(params);
    });
};

/**
 * Assert that a user can not be redirected from the application to the SP
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {String}         redirectUrl             The URL where the user should be redirect to once he succesfully authenticates
 * @param  {Number}         code                    The expected HTTP error code
 * @param  {Function}       callback                Standard callback function
 */
var assertShibbolethApplicationRedirectFails = module.exports.assertShibbolethApplicationRedirectFails = function(client, redirectUrl, code, callback) {
    client.auth.shibbolethApplicationRedirect(redirectUrl, function(err, body, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that a user can be redirected from the SP to the IdP
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Object}         params                  The query string parameters for this endpoint
 * @param  {Number}         params.app              The id of the application on which the user wants to authenticate sign on
 * @param  {String}         params.signature        The signature for the application id
 * @param  {Number}         params.expires          The time in ms since epoch when the signature expires
 * @param  {Function}       callback                Standard callback function
 * @param  {Response}       callback.response       The response object as returned by requestjs
 */
var assertShibbolethSPRedirect = module.exports.assertShibbolethSPRedirect = function(client, params, callback) {
    client.auth.shibbolethSPRedirect(params, function(err, body, response) {
        assert.ok(!err);

        // Verify we're being redirected to mod_shib's /Shibboleth.sso/Login
        assert.ok(_.has(response.headers, 'location'));

        var parsedUrl = url.parse(response.headers.location, true);
        assert.strictEqual(parsedUrl.pathname, '/Shibboleth.sso/Login');
        assert.strictEqual(parsedUrl.query.target, '/api/auth/shibboleth/sp/callback');
        assert.ok(_.has(parsedUrl.query, 'entityID'));
        return callback(response);
    });
};

/**
 * Assert that a user can not be redirected from the SP to the IdP
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Object}         params                  The query string parameters for this endpoint
 * @param  {String}         params.app              The id of the application on which the user wants to authenticate
 * @param  {String}         params.signature        The signature for the application id
 * @param  {Number}         params.expires          The time in ms since epoch when the signature expires
 * @param  {Number}         code                    The expected HTTP error code
 * @param  {Function}       callback                Standard callback function
 */
var assertShibbolethSPRedirectFails = module.exports.assertShibbolethSPRedirectFails = function(client, params, code, callback) {
    client.auth.shibbolethSPRedirect(params, function(err, body, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert the user can be sent back to the Shibboleth application from mod_shib
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Object}         attributes              The attributes that should be sent to the app server
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.params         The parameters that can be used to finalise the authentication process on the application
 */
var assertShibbolethSPCallback = module.exports.assertShibbolethSPCallback = function(client, attributes, callback) {
    client.auth.shibbolethSPCallback(attributes, function(err, body, response) {
        assert.ok(!err);

        // Verify we're being redirected to the user's application
        assert.ok(_.has(response.headers, 'location'));

        // Get the parameters that need to be sent to the user's application
        var params = url.parse(response.headers.location, true).query;
        assert.ok(_.has(params, 'user'));
        assert.ok(_.has(params, 'signature'));
        assert.ok(_.has(params, 'expires'));
        return callback(params);
    });
};

/**
 * Assert the user can not be sent back to the Shibboleth application from mod_shib
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Object}         attributes              The attributes that should be sent to the app server
 * @param  {Number}         code                    The expected HTTP error code
 * @param  {Function}       callback                Standard callback function
 */
var assertShibbolethSPCallbackFails = module.exports.assertShibbolethSPCallbackFails = function(client, attributes, code, callback) {
    client.auth.shibbolethSPCallback(attributes, function(err, body, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that the user can be sent back to an application
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Object}         params                  The query string parameters for this endpoint
 * @param  {String}         params.userId           The id of the user that will be signing in
 * @param  {String}         params.signature        A signature for the user id
 * @param  {Number}         params.expires          The time in ms since epoch when the signature expires
 * @param  {Function}       callback                Standard callback function
 * @param  {Response}       callback.response       The response object as returned by requestjs
 */
var assertShibbolethApplicationCallback = module.exports.assertShibbolethApplicationCallback = function(client, params, callback) {
    client.auth.shibbolethApplicationCallback(params, function(err, body, response) {
        assert.ok(!err);

        // If we made it here sucesfully, we should have been logged in
        UsersTestsUtil.assertGetMe(client, function(me) {
            assert.ok(!me.anon);
            assert.ok(me.id);
            return callback(response);
        });
    });
};

/**
 * Assert that the user can not be sent back to an application
 *
 * @param  {RestClient}     client                  The REST client to make the request with
 * @param  {Object}         params                  The query string parameters for this endpoint
 * @param  {String}         params.userId           The id of the user that will be signing in
 * @param  {String}         params.signature        A signature for the user id
 * @param  {Number}         params.expires          The time in ms since epoch when the signature expires
 * @param  {Number}         code                    The expected HTTP error code
 * @param  {Function}       callback                Standard callback function
 */
var assertShibbolethApplicationCallbackFails = module.exports.assertShibbolethApplicationCallbackFails = function(client, params, code, callback) {
    client.auth.shibbolethApplicationCallback(params, function(err, body, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that a user can be authenticated on an application through Shibboleth
 *
 * @param  {App}            app                         The application on which the user should be authentication
 * @param  {String}         [remoteUser]                The value that should be used as the `remote_user` attribute. A random value will be generated if left undefined
 * @param  {Object}         [attributes]                The attributes that mod_shib sends back to the application. Defaults to the empty object
 * @param  {String}         [redirectUrl]               The URL where the user should be redirected to. Defaults to `/`
 * @param  {Function}       callback                    Standard callback function
 * @param  {RestClient}     callback.restClient         The authenticated rest client on the application
 * @param  {String}         callback.remoteUser         The user identifier that was used as the `remote_user` value
 */
var assertShibbolethLogin = module.exports.assertShibbolethLogin = function(app, remoteUser, attributes, redirectUrl, callback) {
    remoteUser = remoteUser || TestsUtil.generateTestUserId();
    redirectUrl = redirectUrl || '/';

    TestsUtil.getAnonymousAppUserClient(app, function(anonymousClient) {

        // 1. Indicate that we want to login in with Shibboleth. The backend will
        // redirect us to the Shibboleth application
        assertShibbolethApplicationRedirect(anonymousClient, redirectUrl, function(params) {

            // 2. Let the Shibboleth application redirect us to mod_shib
            TestsUtil.getShibbolethRestClient(function(shibAppClient) {
                assertShibbolethSPRedirect(shibAppClient, params, function() {

                    // 3. We return from mod_shib
                    var modShibAttributes = _.extend({}, attributes, {
                        // Fake a Shib session
                        'shib-session-id': _.random(100000),

                        // Fake a user
                        'remote_user': remoteUser
                    });
                    assertShibbolethSPCallback(shibAppClient, modShibAttributes, function(params) {

                        // 4. We get sent back to our application and should be logged in
                        assertShibbolethApplicationCallback(anonymousClient, params, function(response) {

                            // Verify the user was sent to the correct redirect url
                            assert.strictEqual(response.headers.location, redirectUrl);

                            // Pass the (now authenticated) rest client back to the caller
                            return callback(anonymousClient, remoteUser);
                        });
                    });
                });
            });
        });
    });
};
