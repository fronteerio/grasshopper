/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var bcrypt = require('bcryptjs');
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;

var DB = require('gh-core/lib/db');
var GrassHopper = require('gh-core');
var log = require('gh-core/lib/logger').logger('gh-auth');
var mixpanel = require('gh-core/lib/mixpanel').mixpanel;
var MixpanelConstants = require('gh-core/lib/mixpanel').MixpanelConstants;


///////////////////////////////////////
// Passport middleware / serializers //
///////////////////////////////////////

/*!
 * Register the local strategy with Passport
 */
passport.use(new LocalStrategy({'passReqToCallback': true}, function(req, username, password, done) {
    DB.User.find({'where': {'username': username, 'TenantId': req.ctx.app.Tenant.id }}).done(function (err, user) {
        if (err) {
            log().error({'err': err, 'username': username}, 'Error during local authentication');
            return done(err);

        } else if (!user || !user.checkPassword(password)) {
            log().warn({'username': username, 'app': req.ctx.app.id}, 'Failed local authentication attempt');
            return done(null, false);
        }

        // The provided credentials check out, return
        // the user object to the passport middleware
        return done(null, user);
    });
}));

/*!
 * The `serializeUser` method takes a user object and returns
 * what should go into a cookie. We will return the user id
 * as that is sufficient to identify the user
 */
passport.serializeUser(function(user, done) {
    done(null, user.id);
});

/*!
 * The `deserializeUser` method takes a value from the session
 * cookie and expects a full user object as it's response. In
 * our case, we've passed in the user id in the session cookie,
 * so we can simply look up a user by their id
 */
passport.deserializeUser(function(id, done) {
    DB.User.find(id).done(done);
});


/**
 * @REST logout
 *
 * Log out
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/logout
 * @Return      {void}
 */
var logout = function(req, res) {
    if (!req.user) {
        return res.status(400).send('You need to be logged in order to log out');
    }

    // Get the id of the user who is logging out
    var userId = req.user.id;

    // Kill the user session
    req.logout();

    // Track the log out event with mixpanel
    mixpanel().people.increment(userId, MixpanelConstants.people.LOG_OUT);
    var opts = {
        'distinct_id': userId,
        'app': req.ctx.app.id
    }
    mixpanel().track(MixpanelConstants.events.USER_LOG_OUT, opts);

    // Redirect the user to the main landing page
    return res.redirect('/');
};

GrassHopper.globalAdminServer.on('post', '/api/auth/logout', logout);
GrassHopper.appServer.on('post', '/api/auth/logout', logout);


//////////////////////////
// Local authentication //
//////////////////////////

/**
 * @REST localLogin
 *
 * Log in using local authentication
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /auth/login
 * @FormParam   {string}        password                    The password for the user
 * @FormParam   {string}        username                    The username for the user
 * @Return      {User}                                      The logged in user
 */
var localLogin = function(req, res, next) {
    passport.authenticate('local', function(err, user, info) {
        var telemetryOpts = {'app': req.ctx.app.id};
        if (err) {
            mixpanel().track(MixpanelConstants.events.AUTHENTICATION_ERROR, telemetryOpts);
            return next(err);
        } else if (!user) {
            telemetryOpts['type'] = 'local';
            telemetryOpts['username'] = 'username';
            mixpanel().track(MixpanelConstants.events.AUTHENTICATION_FAILURE, telemetryOpts);
            return res.status(401).end();
        }

        // Create the user session
        req.logIn(user, function(err) {
            if (err) {
                return next(err);
            }

            // A user session has been established, log this event with mixpanel
            mixpanel().people.increment(user.id, MixpanelConstants.people.LOG_IN);
            var opts = {
                'distinct_id': user.id,
                'app': req.ctx.app.id
            };
            mixpanel().track(MixpanelConstants.events.USER_LOG_IN, opts);

            return res.status(200).send(req.user);
        });
    })(req, res, next);
};

GrassHopper.globalAdminServer.on('post', '/api/auth/login', localLogin);
GrassHopper.appServer.on('post', '/api/auth/login', localLogin);

/**
 * @REST changePassword
 *
 * Change a user's local password
 *
 * @Server      admin,app
 * @Method      POST
 * @Path        /users/{id}/password
 * @PathParam   {string}        id                          The id of user for which to change the local password
 * @FormParam   {string}        newPassword                 The new password for the user
 * @FormParam   {string}        [oldPassword]               The previous password for the user. This is only required when the current user is not an administrator
 * @Return      {void}
 */
var changePassword = function(req, res) {
    res.send(501);
};

GrassHopper.globalAdminServer.on('post', '/api/users/:id/password', changePassword);
GrassHopper.appServer.on('post', '/api/users/:id/password', changePassword);


///////////////////////////////
// Shibboleth authentication //
///////////////////////////////

/**
 * @REST shibbolethLogin
 *
 * Log in using Shibboleth authentication
 *
 * @Server      app
 * @Method      POST
 * @Path        /auth/shibboleth
 * @Return      {void}
 */
GrassHopper.appServer.on('post', '/api/auth/shibboleth', function(req, res) {
    res.send(501);
});

/**
 * @REST redirectToIdentityProvider
 *
 * Redirect the user to the configured identity provider
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/sp
 * @QueryParam  {string}        [app]                       The id of the app on which the user wants to authenticate
 * @QueryParam  {string}        [signature]                 The signature for the app id
 * @QueryParam  {number}        [expires]                   The timestamp (millis since epoch) at which the signature expires
 * @Return      {void}
 */
GrassHopper.appServer.on('get', '/api/auth/shibboleth/sp', function(req, res) {
    res.send(501);
});

/**
 * @REST identityProviderCallback
 *
 * Authenticate the user and redirect back to the originating app
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/sp/callback
 * @Return      {void}
 */
GrassHopper.appServer.on('get', '/api/auth/shibboleth/sp/callback', function(req, res) {
    res.send(501);
});

/**
 * @REST redirectToOriginatingApp
 *
 * Redirect an authenticated user back to their originating app
 *
 * @Api         private
 * @Server      app
 * @Method      GET
 * @Path        /auth/shibboleth/callback
 * @QueryParam  {number}        [userId]                    The id of the user that needs to be signed in
 * @QueryParam  {string}        [signature]                 The signature for the user id
 * @QueryParam  {number}        [expires]                   The timestamp (millis since epoch) at which the signature expires
 * @Return      {void}
 */
GrassHopper.appServer.on('get', '/api/auth/shibboleth/callback', function(req, res) {
    res.send(501);
});
