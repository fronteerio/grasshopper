/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var crypto = require('crypto');
var url = require('url');

var log = require('gh-core/lib/logger').logger('gh-auth');

/**
 * Hash a string using SHA512
 *
 * @param  {String}     password        The password that needs to be hashed
 * @param  {String}     [salt]          A random salt that will be prepended to the password for hashing. If no value is provided, a random value will be generated
 * @return {String}                     The hashed password
 */
var hashPassword = module.exports.hashPassword = function(password, salt) {
    // Prepend a random number to prevent rainbow table attacks
    salt = salt || crypto.randomBytes(16).toString('hex');
    password = salt + password;
    return salt + '$' + crypto.createHash('sha512').update(password).digest('hex');
};

/**
 * Check whether a provided plain-text password matches a hashed password
 *
 * @param  {String}     plainTextPassword   The plain-text password to compare against the hashed password
 * @param  {String}     hashedPassword      The hashed password to compare against the plain-text password
 * @return {Boolean}                        True if the provided password matches the hashed password, false if they are different
 */
var comparePassword = module.exports.comparePassword = function(plainTextPassword, hashedPassword) {
    // Get the salt of the hashed password
    var salt = hashedPassword.split('$')[0];

    // Check if the provided password with the extracted salt is the same as the stored password
    return (hashPassword(plainTextPassword, salt) === hashedPassword);
};

/**
 * Validate a URL that should be used to redirect the user within the application after authentication.
 * If no URL is provided or the URL is invalid, `/` will be returned. Only a path within Grasshopper
 * is considered to be a valid redirect URL
 *
 * @param  {String}     [redirectUrl]   The URL that should be tested
 * @return {String}                     A valid URL
 */
var validateRedirectUrl = module.exports.validateRedirectUrl = function(redirectUrl) {
    // If no redirect URL was specified, we will redirect the user to the home page
    if (!redirectUrl) {
        return '/';
    }

    // If a URL was specified, we ensure that we're dealing with a Grasshopper url
    // so that we're not sending the user to a remote site. We do this by resolving
    // the redirect URL as the browser would. If the domain is not the same, some
    // tampering is going on
    var resolvedUrl = url.resolve('http://grasshopper.local', redirectUrl);
    var parsedUrl = url.parse(resolvedUrl);
    if (parsedUrl.hostname !== 'grasshopper.local') {
        redirectUrl = '/';
        log().warn({'redirectUrl': redirectUrl}, 'Possible Open Redirect attack detected');
    }

    return redirectUrl;
};

/**
 * A catch-all error handler for errors that bubbled out of passport strategies.
 *
 * @param  {Request}    req     The ExpressJS request object
 * @param  {Response}   res     The ExpressJS response object
 * @param  {Function}   next    The middleware which should be executed next
 * @return {Function}           A function that can be used as part of the middleware chain
 */
var handlePassportError = module.exports.handlePassportError = function(req, res, next) {
    return function(err) {
        if (err) {
            log().error({'err': err, 'host': req.host}, 'An error occurred during login');
            return res.redirect('/?authentication=error');
        }

        // If no error ocurred we can move to the next middleware
        return next();
    };
};
