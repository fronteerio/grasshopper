/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var GrasshopperUtil = require('gh-core/lib/util');
var GroupsAPI = require('gh-groups');
var GroupsDAO = require('gh-groups/lib/internal/dao');
var log = require('gh-core/lib/logger').logger('gh-orgunit');
var Validator = require('gh-core/lib/validator').Validator;

var OrgUnitAuthz = require('./authz');
var OrgUnitDAO = require('./internal/dao');

/**
 * Create an organisational unit
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         appId               The id of the application on which to create the organisational unit
 * @param  {String}         displayName         The name of the organisational unit
 * @param  {String}         type                The organisational unit type (e.g. `tripos`, `part`)
 * @param  {String}         description         The description of the organisational unit
 * @param  {Number}         groupId             The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @param  {Number}         parentId            The id of the parent organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The created organisational unit
 */
var createOrgUnit = module.exports.createOrgUnit = function(ctx, appId, displayName, type, description, groupId, parentId, callback) {
    // Ensure that the app id is a valid number
    appId = GrasshopperUtil.getNumberParam(appId);

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only application administrators can create an organisational unit'}).isAdmin(ctx, appId);
    validator.check(appId, {'code': 400, 'msg': 'A valid app id must be provided'}).isInt();
    validator.check(displayName, {'code': 400, 'msg': 'A valid displayName must be provided'}).notEmpty();
    validator.check(displayName, {'code': 400, 'msg': 'A valid displayName must be provided'}).isShortString();
    validator.check(type, {'code': 400, 'msg': 'A valid type must be provided'}).notEmpty();
    validator.check(type, {'code': 400, 'msg': 'A valid type must be between 1 and 16 characters long'}).len(1, 16);
    if (description) {
        validator.check(description, {'code': 400, 'msg': 'A valid description must be provided'}).isMediumString();
    }
    if (groupId) {
        validator.check(groupId, {'code': 400, 'msg': 'A valid group must be a positive integer'}).isInt();
    }
    if (parentId) {
        validator.check(parentId, {'code': 400, 'msg': 'A valid parent organisational unit id must be a positive integer'}).isInt();
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }
    
    // Ensure that the group id (if any) is a valid number
    groupId = GrasshopperUtil.getNumberParam(groupId);

    // Ensure that the parent id (if any) is a valid number
    parentId = GrasshopperUtil.getNumberParam(parentId);

    // Ensure the current user can create an organisational unit
    OrgUnitAuthz.canCreateOrgUnit(ctx, appId, function(err, canCreate) {
        if (err) {
            return callback(err);
        } else if (!canCreate) {
            log().warn({
                'actor': ctx.user.id,
                'displayName': displayName,
                'parentId': parentId
            }, 'An unauthorized attempt at creating an organisational unit occurred');
            return callback({'code': 401, 'msg': 'You are not allowed to create an organisational unit'});
        }

        // If a parent was specified, ensure it exists
        _getOptionalOrgUnit(ctx, parentId, function(err, parent) {
            if (err) {
                return callback(err);

            // Ensure the parent is from the same application
            } else if (parent && parent.AppId !== appId) {
                return callback({'code': 400, 'msg': 'You cannot create an organisational unit under an organisational unit from another application'});
            }

            // If a group was specified, ensure it exists. Create
            // a group if none was specified
            GroupsAPI.getOrCreateGroup(ctx, appId, groupId, function(err, group) {
                if (err) {
                    return callback(err);
                }

                // Create the organisational unit
                OrgUnitDAO.createOrgUnit(appId, displayName, type, description, group.id, parentId, callback);
            });
        });
    });
};

/**
 * Get the organisational units for an application
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         appId               The id of the app to get the organisational units for
 * @param  {Number}         [parentId]          The id of the parent to retrieve the organisational units for
 * @param  {String[]}       [types]             The organisational unit type[s] to filter the organisational unit by
 * @param  {Boolean}        [includeSeries]     Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnits   The matching organisational units
 */
var getOrgUnits = module.exports.getOrgUnits = function(ctx, appId, parentId, types, includeSeries, callback) {
    // Ensure that the app id (if any) is a valid number
    appId = GrasshopperUtil.getNumberParam(appId);

    // Ensure that the parent id (if any) is a valid number
    parentId = GrasshopperUtil.getNumberParam(parentId);

    var validator = new Validator();
    validator.check(appId, {'code': 400, 'msg': 'A valid organisational unit id is a positive integer'}).isInt();
    if (parentId) {
        validator.check(parentId, {'code': 400, 'msg': 'A valid organisational unit id is a positive integer'}).isInt();
    }
    if (types) {
        validator.check(null, {'code': 400, 'msg': 'Types must be specified as an array'}).isArray(types);
        _.each(types, function(type) {
            validator.check(type, {'code': 400, 'msg': 'A valid type must be between 1 and 16 characters long'}).len(1, 16);
        });
    }
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    } else if (appId !== ctx.app.id && (!ctx.user || !ctx.user.isGlobalAdmin())) {
        return callback({'code': 401, 'msg': 'You cannot get the organisational units from another application'});
    }

    // Get the parent organisational unit, if any
    _getOptionalOrgUnit(ctx, parentId, function(err, parent) {
        if (err) {
            return callback(err);
        } else if (parent && parent.AppId !== appId && !ctx.user.isGlobalAdmin()) {
            return callback({'code': 401, 'msg': 'You cannot get the organisational units under an organisational unit from another application'});
        }

        // Get the organisational units in the application
        OrgUnitDAO.getOrgUnits(appId, parentId, types, includeSeries, function(err, orgUnits) {
            if (err) {
                return callback(err);
            }

            // If the current user is anonymous or no organisational
            // units were found, we return them as is
            if (!ctx.user || _.isEmpty(orgUnits)) {
                // Add a `canManage` property to each group
                var augmentedOrgUnits = _.map(orgUnits, function(orgUnit) {
                    var augmentedOrgUnit = orgUnit.values;
                    augmentedOrgUnit.canManage = false;
                    return augmentedOrgUnit;
                });
                return callback(null, augmentedOrgUnits);
            }

            // Otherwise we get the groups the current user is a member of so we can mark
            // those organisational units that the user can edit
            // TODO: Make this optional?
            GroupsDAO.getUserGroups(ctx.user.id, 10000, 0, function(err, groups) {
                if (err) {
                    return callback(err);
                }

                // Add a `canManage` property to each group
                var augmentedOrgUnits = _.map(orgUnits, function(orgUnit) {
                    // Serialize the organisational unit
                    var augmentedOrgUnit = orgUnit.values;

                    // Check if the current user is a member of the group that
                    // this organisational unit belongs to
                    var canManage = !_.isUndefined(_.find(groups, {'id': orgUnit.GroupId}));
                    augmentedOrgUnit.canManage = canManage;
                    return augmentedOrgUnit;
                });
                return callback(null, augmentedOrgUnits);
            });
        });
    });
};

/**
 * Get an organisational unit, if no `orgUnitId` was specified, `null`
 * will be returned rather than a 404 error. If an id was specified
 * that does not point to an existing orgUnit a 404 error will be returned.
 *
 * @param  {Context}        ctx                     Standard context containing the current user and the current app
 * @param  {Number}         orgUnitId               The id of the organisational unit to retrieve
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error object, if any
 * @param  {Group}          [callback.orgUnit]      The retrieved organisational unit or null, if the provided `orgUnitId` was `null`
 * @api private
 */
var _getOptionalOrgUnit = function(ctx, orgUnitId, callback) {
    if (!orgUnitId) {
        return callback(null, null);
    }

    OrgUnitDAO.getOrgUnit(orgUnitId, callback);
};
