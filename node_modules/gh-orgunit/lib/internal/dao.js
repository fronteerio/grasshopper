/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-orgunit');

/**
 * Create an organisational unit
 *
 * @param  {Number}         appId               The id of the application on which to create the organisational unit
 * @param  {String}         displayName         The name of the organisational unit
 * @param  {String}         type                The organisational unit type (e.g. `tripos`, `part`)
 * @param  {String}         description         The description of the organisational unit
 * @param  {Number}         groupId             The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @param  {Number}         parentId            The id of the parent organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The created organisational unit
 */
var createOrgUnit = module.exports.createOrgUnit = function(appId, displayName, type, description, groupId, parentId, callback) {
    var orgUnit = {
        'AppId': appId,
        'description': description,
        'displayName': displayName,
        'GroupId': groupId,
        'parentId': parentId,
        'type': type
    };
    DB.OrgUnit.create(orgUnit).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err}, 'Failed to create organisational unit');
            return callback({'code': 500, 'msg': 'Failed to create an organisational unit'});
        }

        return callback(null, orgUnit);
    });
};

/**
 * Get an organisational unit
 *
 * @param  {Number}         id                  The id of the organisational unit to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The created organisational unit
 */
var getOrgUnit = module.exports.getOrgUnit = function(id, callback) {
    DB.OrgUnit.find({'where': {'id': id}}).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err, 'id': id}, 'Failed to get an organisational unit');
            return callback({'code': 500, 'msg': 'Failed to get an organisational unit'});
        } else if (!orgUnit) {
            log().error({'err': err, 'id': id}, 'Could not find an organisational unit');
            return callback({'code': 404, 'msg': 'Could not find an organisational unit'});
        }

        return callback(null, orgUnit);
    });
};

/**
 * Get the organisational units for an application
 *
 * @param  {Number}         appId               The id of the app to get the organisational units for
 * @param  {Number}         [parentId]          The id of the parent to retrieve the organisational units for
 * @param  {String[]}       [types]             The organisational unit type[s] to filter the organisational unit by
 * @param  {Boolean}        [includeSeries]     Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnits   The matching organisational units
 */
var getOrgUnits = module.exports.getOrgUnits = function(appId, parentId, types, includeSeries, callback) {
    var options = {
        'where': {'AppId': appId}
    };
    if (parentId) {
        options.where.parentId = parentId;
    }
    if (!_.isEmpty(types)) {
        options.where.type = types;
    }
    DB.OrgUnit.findAll(options).complete(function(err, orgUnits) {
        if (err) {
            log().error({
                'err': err,
                'appId': appId,
                'parentId': parentId
            }, 'Failed to get the organisational units for an app');
            return callback({'code': 500, 'msg': 'Failed to get the organisational units for an app'});
        }

        return callback(null, orgUnits);
    });
};
