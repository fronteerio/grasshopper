/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-orgunit');
var UsersDAO = require('gh-users/lib/internal/dao');

/**
 * Create an organisational unit
 *
 * @param  {Number}         appId               The id of the application on which to create the organisational unit
 * @param  {String}         displayName         The name of the organisational unit
 * @param  {String}         type                The organisational unit type (e.g. `tripos`, `part`)
 * @param  {String}         [description]       The description of the organisational unit
 * @param  {Object}         [metadata]          The extra metadata for the organisational unit as a JSON object
 * @param  {Boolean}        [published]         The published flag of the organisational unit
 * @param  {Number}         groupId             The id of the group that can manage the organisational unit
 * @param  {Number}         [parentId]          The id of the parent organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The created organisational unit
 */
var createOrgUnit = module.exports.createOrgUnit = function(appId, displayName, type, description, metadata, published, groupId, parentId, callback) {
    var orgUnit = {
        'AppId': appId,
        'description': description,
        'displayName': displayName,
        'metadata': metadata,
        'published': published,
        'GroupId': groupId,
        'ParentId': parentId,
        'type': type
    };
    DB.OrgUnit.create(orgUnit).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err}, 'Failed to create organisational unit');
            return callback({'code': 500, 'msg': 'Failed to create an organisational unit'});
        }

        return callback(null, orgUnit);
    });
};

/**
 * Update an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to update
 * @param  {Object}         opts                The values to update
 * @param  {String}         [opts.displayName]  Updated organisational unit name
 * @param  {String}         [opts.description]  Updated organisational unit description
 * @param  {String}         [opts.type]         Updated organisational unit type
 * @param  {Object}         [opts.metadata]     Updated organisational unit metadata
 * @param  {Boolean}        [opts.published]    Updated organisational unit published flag
 * @param  {Number}         [opts.GroupId]      Updated organisational unit group
 * @param  {Number}         [opts.ParentId]     Updated organisational unit parent
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The updated organisational unit
 */
var updateOrgUnit = module.exports.updateOrgUnit = function(orgUnit, opts, callback) {
    orgUnit.updateAttributes(opts).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err}, 'Failed to update an organisational unit');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'orgUnit': orgUnit, 'update': opts}, 'Updated an organisational unit');
        return callback(null, orgUnit);
    });
};

/**
 * Delete an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to delete
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var deleteOrgUnit = module.exports.deleteOrgUnit = function(orgUnit, callback) {
    orgUnit.destroy().complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Failed to delete an organisational unit');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'orgUnit': orgUnit}, 'Deleted an organisational unit');
        return callback();
    });
};

/**
 * Get an organisational unit
 *
 * @param  {Number}         id                  The id of the organisational unit to retrieve
 * @param  {Boolean}        [includeSeries]     Whether to include the event series associated to the organisational unit. Defaults to `false`
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {OrgUnit}        callback.orgUnit    The retrieved organisational unit
 */
var getOrgUnit = module.exports.getOrgUnit = function(id, includeSeries, callback) {
    var options = {
        'where': {'id': id},
        'include': [DB.Group]
    };
    if (includeSeries) {
        options.include.push(DB.Serie);
    }
    DB.OrgUnit.find(options).complete(function(err, orgUnit) {
        if (err) {
            log().error({'err': err, 'id': id, 'includeSeries': includeSeries}, 'Failed to get an organisational unit');
            return callback({'code': 500, 'msg': 'Failed to get an organisational unit'});
        } else if (!orgUnit) {
            log().debug({'err': err, 'id': id, 'includeSeries': includeSeries}, 'Could not find an organisational unit');
            return callback({'code': 404, 'msg': 'Could not find an organisational unit'});
        }

        return callback(null, orgUnit);
    });
};

/**
 * Get organisational units by id
 *
 * @param  {Number[]}   ids                     The ids of the organisational units to retrieve
 * @param  {Function}   callback                Standard callback function
 * @param  {Object}     callback.err            An error object, if any
 * @param  {OrgUnit[]}  callback.orgUnits       The retrieved organisational units
 */
var getOrgUnitsById = module.exports.getOrgUnitsById = function(ids, callback) {
    if (_.isEmpty(ids)) {
        return callback(null, []);
    }

    DB.OrgUnit.findAll({'where': {'id': ids}}).complete(function(err, orgUnits) {
        if (err) {
            log().error({'err': err, 'id': ids}, 'Failed to get organisational units by id');
            return callback({'code': 500, 'msg': 'Failed to get organisational units by id'});
        } else if (orgUnits.length !== ids.length) {
            log().debug({'err': err, 'id': ids}, 'Not all organisational units could be found');
            return callback({'code': 404, 'msg': 'Not all organisational units could be found'});
        }

        return callback(null, orgUnits);
    });
};

/**
 * Get the organisational units for an application
 *
 * @param  {Number}         appId                           The id of the app to get the organisational units for
 * @param  {Number}         [parentId]                      The id of the parent to retrieve the organisational units for
 * @param  {String[]}       [types]                         The organisational unit type[s] to filter the organisational unit by
 * @param  {Object}         [opts]                          A set of extra options that can be specified
 * @param  {Boolean}        [opts.includeSeries]            Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {Boolean}        [opts.includeGroups]            Whether to include the group objects associated to the organisational units. Defaults to `false`
 * @param  {Object}         [opts.subscriptions]            The subscription options
 * @param  {Boolean}        [opts.subscriptions.include]    Whether to include if the user specified by `opts.subscriptions.userId` is subscribed to each serie
 * @param  {Number}         [opts.subscriptions.userId]     The id of the user for whom the event series subscriptions need to be checked
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error object, if any
 * @param  {OrgUnit}        callback.orgUnits               The matching organisational units
 */
var getOrgUnits = module.exports.getOrgUnits = function(appId, parentId, types, opts, callback) {
    opts = opts || {};
    opts.subscriptions = opts.subscriptions || {'include': false};

    var options = {
        'where': {'AppId': appId},
        'include': []
    };
    if (parentId) {
        options.where.ParentId = parentId;
    }
    if (!_.isEmpty(types)) {
        options.where.type = types;
    }

    // Include the event series if necessary
    if (opts.includeSeries) {
        var includeSeries = {
            'model': DB.OrgUnitSeries,
            'required': false,
            'include': [
                {'model': DB.Serie, 'required': true},
                {'model': DB.OrgUnit, 'as': 'fromOrgUnit', 'required': false, 'attributes': ['id', 'displayName', 'ParentId']}
            ]
        };

        // Indicate whether the user is subscribed to the series
        if (opts.subscriptions.include && opts.subscriptions.userId) {
            includeSeries.include[0].include = [{'model': DB.Calendar, 'where': {'UserId': opts.subscriptions.userId}, 'required': false, 'limit': null}];
        }

        options.include.push(includeSeries);
    }

    // Include the group object if necessary
    if (opts.includeGroups) {
        options.include.push({'model': DB.Group, 'required': true, 'include': [
            {'model': DB.User, 'required': false, 'as': 'LockedBy', 'attributes': ['id', 'displayName']}
        ]});
    }

    DB.OrgUnit.findAll(options).complete(function(err, orgUnits) {
        if (err) {
            log().error({
                'err': err,
                'appId': appId,
                'parentId': parentId,
                'types': types,
                'includeSeries': opts.includeSeries,
                'includeGroups': opts.includeGroups
            }, 'Failed to get the organisational units for an app');
            return callback({'code': 500, 'msg': 'Failed to get the organisational units for an app'});
        }

        // Because we include the OrgUnitSeries join table and not Series directly, we will have
        // to unroll the OrgUnit -> OrgUnitSeries -> Series structure
        var serializedOrgUnits = _.map(orgUnits, function(orgUnit) {
            var serializedOrgUnit = orgUnit.toJSON();
            serializedOrgUnit.Series = _.map(orgUnit.OrgUnitSeries, function(orgUnitSerie) {
                var serie = orgUnitSerie.Serie.toJSON();
                serie.fromOrgUnit = orgUnitSerie.fromOrgUnit;
                return serie;
            });

            return serializedOrgUnit;
        });

        return callback(null, serializedOrgUnits);
    });
};

/* Series */

/**
 * Get the event series for an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to retrieve the event series for
 * @param  {Number}         limit               The maximum number of results to retrieve
 * @param  {Number}         offset              The paging number of the results to retrieve
 * @param  {Boolean}        upcoming            Whether to only include event series with upcoming events
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Serie[]}        callback.series     The event series for the organisational unit
 */
var getOrgUnitSeries = module.exports.getOrgUnitSeries = function(orgUnit, limit, offset, upcoming, callback) {
    // TODO: upcoming
    var options = {
        'where': {
            'OrgUnitId': orgUnit.id
        },
        'include': [
            {'model': DB.Serie, 'required': true},
            {'model': DB.OrgUnit, 'as': 'fromOrgUnit', 'required': false}
        ],
        'limit': limit,
        'offset': offset
    };
    DB.OrgUnitSeries.findAll(options).complete(function(err, orgUnitSeries) {
        if (err) {
            log().error({
                'err': err,
                'limit': limit,
                'offset': offset,
                'id': orgUnit.id
            }, 'Failed to get the series for an organisational unit');
            return callback({'code': 500, 'msg': 'Failed to get the series for an organisational unit'});
        }

        var series = [];
        _.each(orgUnitSeries, function(orgUnitSerie) {
            var serie = orgUnitSerie.Serie.toJSON();
            serie.fromOrgUnit = orgUnitSerie.fromOrgUnit;
            series.push(serie);
        });

        return callback(null, series);
    });
};

/**
 * Add an event series to an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to add the serie(s) to
 * @param  {Serie[]}        series              The serie(s) to add to the organisational unit
 * @param  {OrgUnit}        [fromOrgUnit]       The organisational unit the series are borrowed from
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var addOrgUnitSeries = module.exports.addOrgUnitSeries = function(orgUnit, series, fromOrgUnit, callback) {
    var opts = {};
    if (fromOrgUnit) {
        opts = {'fromOrgUnitId': fromOrgUnit.id};
    }
    orgUnit.addSeries(series, opts).complete(function(err) {
        if (err) {
            log().error({
                'err': err,
                'id': orgUnit.id,
                'fromOrgUnit': fromOrgUnit.id,
                'series': _.pluck(series, 'id')
            }, 'Unable to add series to an organisational unit');
            return callback({'code': 500, 'msg': 'Unable to add series to an organisational unit'});
        }

        return callback();
    });
};

/**
 * Remove an event series from an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to remove the serie(s) from
 * @param  {Serie[]}        series              The serie(s) to remove from the organisational unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var deleteOrgUnitSeries = module.exports.deleteOrgUnitSeries = function(orgUnit, series, callback) {
    orgUnit.removeSeries(series).complete(function(err) {
        if (err) {
            log().error({
                'err': err,
                'id': orgUnit.id,
                'series': _.pluck(series, 'id')
            }, 'Unable to remove series from an organisational unit');
            return callback({'code': 500, 'msg': 'Unable to remove series from an organisational unit'});
        }

        return callback();
    });
};

/**
 * Subscribe a user to the event series and events in an organisational unit
 *
 * @param  {OrgUnit}    orgUnit         The organisational unit to subscribe the user to
 * @param  {User}       user            The user that needs to be subscribed to the event series and events in an organisational unit
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var subscribeOrgUnit = module.exports.subscribeOrgUnit = function(orgUnit, user, callback) {
    // TODO: Get/Add events & transaction

    // Get all the event series in the organisational unit
    getOrgUnitSeries(orgUnit, null, null, null, function(err, series) {
        if (err) {
            return callback(err);
        }

        UsersDAO.subscribeSeries(series, user, orgUnit.id, callback);
    });
};

/**
 * Unsubscribe a user from the event series and events in an organisational unit
 *
 * @param  {OrgUnit}    orgUnit         The organisational unit to unsubscribe the user from
 * @param  {User}       user            The user that needs to be unsubscribed from the event series and events in an organisational unit
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var unsubscribeOrgUnit = module.exports.unsubscribeOrgUnit = function(orgUnit, user, callback) {
    // TODO: Get/Add events & transactions

    // Get all the event series in the organisational unit
    getOrgUnitSeries(orgUnit, null, null, null, function(err, series) {
        if (err) {
            return callback(err);
        }

        UsersDAO.unsubscribeSeries(series, user, callback);
    });
};

/* Calendar */

/**
 * Get the calendar for an organisational unit
 *
 * @param  {OrgUnit}        orgUnit             The organisational unit to get the calendar for
 * @param  {String}         [start]             The timestamp (ISO 8601) from which to get the calendar for the organisation unit
 * @param  {String}         [end]               The timestamp (ISO 8601) until which to get the calendar for the organisation unit
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Event[]}        callback.events     The requested organisational unit calendar
 */
var getOrgUnitCalendar = module.exports.getOrgUnitCalendar = function(orgUnit, start, end, callback) {
    var dateTimeFilter = {};
    if (start) {
        dateTimeFilter.start = {'gte': start};
    }
    if (end) {
        dateTimeFilter.end = {'lte': end};
    }

    // Minimise the amount of data we retrieve so Sequelize has less to deserialize
    var eventFields = ['id', 'displayName', 'start', 'end', 'location', 'type', 'notes', 'organiserOther', 'updatedAt'];
    var userFields = ['id', 'displayName'];

    var options = {
        // Adding `required` into the model inclusions forces Sequelize to use a
        // `left outer join` to connect the Serie/Events. If these were to be omitted,
        // Sequelize would use an `inner join` which would always result in 0 rows
        'include': [
            {'model': DB.Event, 'where': dateTimeFilter, 'required': false, 'attributes': eventFields, 'include': [
                {'model': DB.User, 'as': 'Organisers', 'required': false, 'attributes': userFields}
            ]}
        ]
    };
    orgUnit.getSeries(options).complete(function(err, series) {
        if (err) {
            log().error({
                'err': err,
                'id': orgUnit.id
            }, 'Unable to get the calendar for an organisational unit');
            return callback({'code': 500, 'msg': 'Unable to get the calendar for an organisational unit'});
        }

        var events = [];
        _.each(series, function(serie) {
            events = events.concat(serie.Events);
        });

        // Sort the events on their start date
        events = _.sortBy(events, 'start');

        // TODO: When implemented, add directly associated events
        return callback(null, events);
    });
};
