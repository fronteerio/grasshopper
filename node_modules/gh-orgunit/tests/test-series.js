/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var GroupsTestUtil = require('gh-groups/tests/util');
var SeriesTestUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');

var OrgUnitTestUtil = require('./util');

describe('Organisational units - Series', function() {

    describe('Adding series to an organisational unit', function() {

        /**
         * Test that verifies adding a serie to an organisational unit
         */
        it('verify adding a serie to an organisational unit', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Add the serie to the organisational unit
                    OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], null, callback);
                });
            });
        });

        /**
         * Test that verifies authorization when adding a serie to an organisational unit
         */
        it('verify adding a serie to an organisational unit authorization', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Anonymous users cannot add series to organisational units
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        OrgUnitTestUtil.assertAddOrgUnitSeriesFails(anonymousClient, orgUnit.id, [serie.id], null, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                OrgUnitTestUtil.assertAddOrgUnitSeriesFails(anonymousGlobalClient, orgUnit.id, [serie.id], null, 401, function() {

                                    // Regular users can't add series to organisational units either
                                    TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                                        OrgUnitTestUtil.assertAddOrgUnitSeriesFails(simon.client, orgUnit.id, [serie.id], null, 401, function() {

                                            // Application admins can't add series to organisational units from other applications
                                            OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.oxford2014.client, orgUnit.id, [serie.id], null, 401, function() {

                                                // When users are a member of the organisational unit's group they can add a serie to it
                                                var update = {};
                                                update[simon.profile.id] = true;
                                                GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {
                                                    OrgUnitTestUtil.assertAddOrgUnitSeries(simon.client, orgUnit.id, [serie.id], null, function() {
                                                        return callback();
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when adding a serie to an organisational unit
         */
        it('verify adding a serie to an organisational unit validation', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Invalid organisational unit id
                    OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, 'not a number', [serie.id], null, 400, function() {
                        OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, -1, [serie.id], null, 404, function() {

                            // Empty series
                            OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [], null, 400, function() {

                                // Invalid serie id
                                OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, 'not a number', null, 400, function() {
                                    OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, -1, null, 404, function() {
                                        OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [serie.id, 'not a number'], null, 400, function() {
                                            OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [serie.id, -1], null, 404, function() {

                                                // Invalid from organisational unit id
                                                OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], 'not a number', 400, function() {
                                                    OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], -1, 404, function() {

                                                        // The "from" organisational unit id can't be the same as the id of the organisational unit we're adding the serie to
                                                        OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], orgUnit.id, 400, function() {

                                                            // Create an organisational unit that won't contain the serie
                                                            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test from org unit', 'course', null, function(unrelatedOrgUnit) {
                                                                OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], unrelatedOrgUnit.id, 400, function() {
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a serie cannot be added to an organisational unit from another application
         */
        it('verify a serie cannot be added to an organisational unit from another application', function(callback) {
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit2013) {
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie2013) {
                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2014.client, 'Test org unit', 'course', null, function(orgUnit2014) {
                        SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2014.client, 'Test serie', null, function(serie2014) {

                            // Mis match between the container organisational unit and the serie
                            OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit2013.id, [serie2014.id], null, 400, function() {
                                OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit2014.id, [serie2013.id], null, 400, function() {

                                    // Mismatch between the container organisational unit and the "from" organisational unit
                                    OrgUnitTestUtil.assertAddOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit2013.id, [serie2013.id], orgUnit2014.id, 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a serie can be added to multiple organisational units
         */
        it('verify a serie can be added to multiple organisational units', function(callback) {
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit 1', 'module', null, function(orgUnit1) {
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit 2', 'module', null, function(orgUnit2) {
                    SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                        // Verify the serie can be added to both organisational units
                        OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit1.id, [serie.id], null, function() {
                            OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit2.id, [serie.id], null, callback);
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a serie cannot be added to an organisational unit twice
         */
        it('verify a serie cannot be added to an organisational unit twice', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Add the serie to the organisational unit
                    OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], null, function() {

                        // Add it again
                        OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], null, function() {

                            // Ensure the serie was only added once
                            OrgUnitTestUtil.assertGetOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, null, null, function(series) {
                                assert.strictEqual(series.length, 1);
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that a serie can be added to an organisational unit and indicate from which organisational unit it was borrowed
         */
        it('verify a serie can be added to an organisational unit and indicate from which organisational unit it was borrowed', function(callback) {
            // Create a couple organisational units
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit1) {
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit2) {

                    // Create a serie and add it to the first organisational unit
                    SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {
                        OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit1.id, [serie.id], null, function() {

                            // Add the serie to the second organisational unit and indicate we borrowed it from the first one
                            OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit2.id, [serie.id], orgUnit1.id, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Deleting series from an organisational unit', function() {

        /**
         * Test that verifies deleting a serie from an organisational unit
         */
        it('verify deleting a serie from an organisational unit', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Add the serie from the organisational unit
                    OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], null, function() {

                        // Delete the serie from the organisational unit
                        OrgUnitTestUtil.assertDeleteOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], callback);
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when deleting a serie from an organisational unit
         */
        it('verify deleting a serie from an organisational unit authorization', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Add the serie from the organisational unit
                    OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], null, function() {

                        // Anonymous users cannot delete series from organisational units
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                            OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(anonymousClient, orgUnit.id, [serie.id], 401, function() {
                                TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                    OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(anonymousGlobalClient, orgUnit.id, [serie.id], 401, function() {

                                        // Regular users can't delete series from organisational units either
                                        TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                                            OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(simon.client, orgUnit.id, [serie.id], 401, function() {

                                                // Application admins can't delete series from organisational units on other applications
                                                OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.oxford2014.client, orgUnit.id, [serie.id], 401, function() {

                                                    // When users are a member of the organisational unit's group they can delete a serie from it
                                                    var update = {};
                                                    update[simon.profile.id] = true;
                                                    GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {
                                                        OrgUnitTestUtil.assertDeleteOrgUnitSeries(simon.client, orgUnit.id, [serie.id], function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when deleting a serie from an organisational unit
         */
        it('verify deleting a serie from an organisational unit validation', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Invalid organisational unit id
                    OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.cam2013.client, 'not a number', [serie.id], 400, function() {
                        OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.cam2013.client, -1, [serie.id], 404, function() {

                            // Empty series
                            OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [], 400, function() {

                                // Invalid serie id
                                OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, 'not a number', 400, function() {
                                    OrgUnitTestUtil.assertDeleteOrgUnitSeriesFails(global.tests.admins.cam2013.client, orgUnit.id, [serie.id, 'not a number'], 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that deleting a serie from an organisational unit does not remove it from any other organisational units
         */
        it('verify deleting a serie from an organisational unit does not remove it from any others', function(callback) {
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit 1', 'module', null, function(orgUnit1) {
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit 2', 'module', null, function(orgUnit2) {
                    SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                        // Add the serie to both organisational units
                        OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit1.id, [serie.id], null, function() {
                            OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit2.id, [serie.id], null, function() {

                                // Remove the serie from the first organisational unit
                                OrgUnitTestUtil.assertDeleteOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit1.id, [serie.id], function() {

                                    // Verify the serie is still connected to the second organisational unit
                                    OrgUnitTestUtil.assertGetOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit2.id, null, null, function(series) {
                                        assert.strictEqual(series.length, 1);
                                        SeriesTestUtil.assertSerie(series[0], serie);

                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that deleting a serie removes it from all connected organisational units
     */
    it('verify deleting a serie removes it from all connected organisational units', function(callback) {
        OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit 1', 'module', null, function(orgUnit1) {
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit 2', 'module', null, function(orgUnit2) {
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Add the serie to both organisational units
                    OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit1.id, [serie.id], null, function() {
                        OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit2.id, [serie.id], null, function() {

                            // Delete the serie
                            SeriesTestUtil.assertDeleteSerie(global.tests.admins.cam2013.client, serie.id, function() {

                                // Verify the serie is no longer connected to the organisational units
                                OrgUnitTestUtil.assertGetOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit1.id, null, null, function(series) {
                                    assert.strictEqual(series.length, 0);
                                    OrgUnitTestUtil.assertGetOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit2.id, null, null, function(series) {
                                        assert.strictEqual(series.length, 0);

                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that the serie subscription status is returned if to include series when getting the organisational units
     */
    it('verify serie subscription status is returned if including series', function(callback) {
        TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(createdOrgUnit) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                    // Add the serie to the organisational unit
                    OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, createdOrgUnit.id, [serie.id], null, function() {

                        // Sanity-check that we're not subscribed yet
                        OrgUnitTestUtil.assertGetOrgUnits(simon.client, null, true, null, null, null, function(orgUnits) {
                            _.each(orgUnits.results, function(orgUnit) {
                                _.each(orgUnit.Series, function(serie) {
                                    assert.strictEqual(serie.subscribed, false);
                                });
                            });

                            // Subscribe to the serie
                            SeriesTestUtil.assertSubscribeSeries(simon.client, serie.id, simon.profile.id, null, function() {

                                // Verify the subscription status
                                OrgUnitTestUtil.assertGetOrgUnits(simon.client, null, true, null, null, null, function(orgUnits) {
                                    var seenSerie = false;
                                    _.each(orgUnits.results, function(orgUnit) {
                                        if (orgUnit.id === createdOrgUnit.id) {
                                            // Assert the serie is present and that the user is subscribed to it
                                            assert.ok(orgUnit.Series);
                                            assert.strictEqual(orgUnit.Series.length, 1);
                                            assert.strictEqual(orgUnit.Series[0].id, serie.id);
                                            assert.strictEqual(orgUnit.Series[0].subscribed, true);
                                            seenSerie = true;
                                        } else {
                                            // The user is not subscribed to any other series
                                            _.each(orgUnit.Series, function(serie) {
                                                assert.strictEqual(serie.subscribed, false);
                                            });
                                        }
                                    });

                                    // Ensure that we asserted that the user is subscribed to the serie
                                    assert.ok(seenSerie);

                                    // Unsubscribe from the serie
                                    SeriesTestUtil.assertUnsubscribeSeries(simon.client, serie.id, simon.profile.id, function() {

                                        // Verify the subscription status
                                        OrgUnitTestUtil.assertGetOrgUnits(simon.client, null, true, null, null, null, function(orgUnits) {
                                            _.each(orgUnits.results, function(orgUnit) {
                                                _.each(orgUnit.Series, function(serie) {
                                                    assert.strictEqual(serie.subscribed, false);
                                                });
                                            });

                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    /**
     * Test that verifies that the from organisational unit is returned when including series
     */
    it('verify the from organisational unit is returned when including series', function(callback) {
        // Create a couple organisational units
        OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Parent', 'parent', null, function(parent) {
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Child', 'child', {'parent': parent.id}, function(child) {
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Original', 'original', null, function(original) {

                    // Create a series and add it to the original organisational unit
                    SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test series', null, function(series) {
                        OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, original.id, [series.id], null, function() {

                            // Add the series to the child organisational unit and indicate we borrowed it from the "original" one
                            OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, child.id, [series.id], original.id, function() {

                                // Now list the organisational units under the parent including their children
                                OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, true, null, parent.id, null, function(orgUnits) {
                                    // There should only be 1 result, the "child" organisational unit
                                    assert.strictEqual(orgUnits.results.length, 1);
                                    assert.strictEqual(orgUnits.results[0].id, child.id);

                                    // The child organisational unit has 1 series
                                    assert.strictEqual(orgUnits.results[0].Series.length, 1);
                                    assert.strictEqual(orgUnits.results[0].Series[0].id, series.id);

                                    // The series was added with the "from" organisational unit set to "original"
                                    assert.ok(orgUnits.results[0].Series[0].fromOrgUnit);
                                    assert.strictEqual(orgUnits.results[0].Series[0].fromOrgUnit.id, original.id);

                                    // Assert we only return an id, displayName and ParentId
                                    var allowedKeys = ['displayName', 'id', 'ParentId'];
                                    assert.strictEqual(_.keys(orgUnits.results[0].Series[0].fromOrgUnit).length, 3);
                                    _.each(orgUnits.results[0].Series[0].fromOrgUnit, function(value, key) {
                                        assert.ok(_.contains(allowedKeys, key));
                                    });

                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
