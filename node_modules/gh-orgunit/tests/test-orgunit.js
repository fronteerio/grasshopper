/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var GroupsTestUtil = require('gh-groups/tests/util');
var SeriesTestUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests');

var OrgUnitTestUtil = require('./util');

describe('Organisational units', function() {

    describe('Creating organisational units', function() {

        /**
         * Test that verifies creating an organisational unit
         */
        it('verify creating an organisational unit', function(callback) {
            // Verify creating a basic organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(parentOrgUnit) {

                // Verify creating an organisational unit with more metadata
                var opts = {
                    'description': 'Test description',
                    'parent': parentOrgUnit.id
                };
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(childOrgUnit) {

                    // Sanity-check the organisational units are created
                    OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, null, null, null, function(orgUnits) {
                        assert.ok(_.find(orgUnits.results, {'id': parentOrgUnit.id}));
                        assert.ok(_.find(orgUnits.results, {'id': childOrgUnit.id}));
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a group is created when no group is specified
         */
        it('verify a group is created when no group is specified', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit1) {

                // A new group with only the admin user should've been created
                GroupsTestUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit1.GroupId, null, null, [global.tests.admins.cam2013.profile], function(members) {

                    // If the group is specified, no new group should be created
                    var opts = {'group': orgUnit1.GroupId};
                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit 2', 'course', opts, function(orgUnit2) {
                        assert.strictEqual(orgUnit1.GroupId, orgUnit2.GroupId);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies creating an organisational unit validation
         */
        it('verify creating an organisational unit validation', function(callback) {
            // Missing display name
            OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, null, 'course', null, 400, function() {

                // Too long displayName
                OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, TestsUtil.generateString(257), 'course', null, 400, function() {

                    // Missing type
                    OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', null, null, 400, function() {

                        // Too long type
                        OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', TestsUtil.generateString(33), null, 400, function() {

                            // Too long description
                            var opts = {'description': TestsUtil.generateString(1001)};
                            OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 400, function() {

                                // Invalid group
                                opts = {'group': 'not a number'};
                                OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 400, function() {

                                    // Unknown group
                                    opts = {'group': -1};
                                    OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 404, function() {

                                        // Invalid parent
                                        opts = {'parent': 'not a number'};
                                        OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 400, function() {

                                            // Unknown parent
                                            opts = {'parent': -1};
                                            OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 404, function() {

                                                TestsUtil.getGlobalAdminRestClient(function(globalAdminRestClient) {
                                                    // Invalid app
                                                    opts = {'app': 'not a number'};
                                                    OrgUnitTestUtil.assertCreateOrgUnitFails(globalAdminRestClient, 'Test orgunit', 'course', opts, 400, function() {

                                                        // Unknown app
                                                        opts = {'app': -1};
                                                        OrgUnitTestUtil.assertCreateOrgUnitFails(globalAdminRestClient, 'Test orgunit', 'course', opts, 404, function() {

                                                            // Invalid metadata
                                                            opts = {'metadata': 'not an object'};
                                                            OrgUnitTestUtil.assertCreateOrgUnitFails(globalAdminRestClient, 'Test orgunit', 'course', opts, 400, function() {
                                                                opts = {'metadata': -1};
                                                                OrgUnitTestUtil.assertCreateOrgUnitFails(globalAdminRestClient, 'Test orgunit', 'course', opts, 400, function() {

                                                                    // Invalid published flag
                                                                    opts = {'published': 'invalid'};
                                                                    OrgUnitTestUtil.assertCreateOrgUnitFails(globalAdminRestClient, 'Test orgunit', 'course', opts, 400, function() {
                                                                        opts = {'published': 42};
                                                                        OrgUnitTestUtil.assertCreateOrgUnitFails(globalAdminRestClient, 'Test orgunit', 'course', opts, 400, function() {
                                                                            return callback();
                                                                        });
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that extra metadata can be set when creating organisational units
         */
        it('verify extra metadata can be set when creating organisational units', function(callback) {
            // Verify a simple metadata object
            var opts = {'metadata': {'url': 'http:/www.google.com'}};
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, function(orgUnit) {

                // Verify a simple metadata object with multiple keys
                opts.metadata = {
                    'url': 'http:/www.google.com',
                    'name': 'Simon'
                };
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, function(orgUnit) {

                    // Verify nested objects
                    opts.metadata = {
                        'foo': 'bar',
                        'name': {
                            'first': 'Jack',
                            'last': 'McJackerson'
                        }
                    };
                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, function(orgUnit) {

                        // Verify an array
                        opts.metadata = [{'url': 'google.com'}, {'url': 'yahoo.com'}];
                        OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, function(orgUnit) {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies creating a top-level organisational unit authorization
         */
        it('verify creating a top-level organisational unit authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Anonymous users cannot create top-level organisational units
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    OrgUnitTestUtil.assertCreateOrgUnitFails(anonymousClient, 'Test orgunit', 'course', null, 401, function() {
                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                            var opts = {'app': global.tests.apps.cam2013.id};
                            OrgUnitTestUtil.assertCreateOrgUnitFails(anonymousGlobalClient, 'Test orgunit', 'course', opts, 401, function() {

                                // Regular users can't create top-level organisational units either
                                OrgUnitTestUtil.assertCreateOrgUnitFails(simon.client, 'Test orgunit', 'course', null, 401, function() {

                                    // Application admins can't create top-level organisational units on other applications
                                    var opts = {'app': global.tests.apps.cam2014.id};
                                    OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 401, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies creating a non-top-level organisational unit authorization
         */
        it('verify creating a non-top-level organisational unit authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create the top-level organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test orgunit', 'course', {}, function(parent) {

                    var opts = {'parent': parent.id, 'app': global.tests.apps.cam2013.id};

                    // Anonymous users cannot create non-top-level organisational units
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        OrgUnitTestUtil.assertCreateOrgUnitFails(anonymousClient, 'Test orgunit', 'course', opts, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                OrgUnitTestUtil.assertCreateOrgUnitFails(anonymousGlobalClient, 'Test orgunit', 'course', opts, 401, function() {

                                    // Regular users can't create non-top-level organisational units either
                                    OrgUnitTestUtil.assertCreateOrgUnitFails(simon.client, 'Test orgunit', 'course', opts, 401, function() {

                                        // Application admins can't create non-top-level organisational units on other applications
                                        opts = {'parent': parent.id, 'app': global.tests.apps.oxford2014.id};
                                        OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 400, function() {

                                            // Regular users who are a member of the top-level organisational unit
                                            // should be able to create an organisational unit underneath it
                                            var update = {};
                                            update[simon.profile.id] = true;
                                            GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, parent.GroupId, update, function() {
                                                opts = {'parent': parent.id, 'app': global.tests.apps.cam2013.id};
                                                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, function() {
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an organisational unit cannot be created with a parent from another application
         */
        it('verify an organisational unit cannot be created with a parent from another application', function(callback) {
            // Create an organisational unit on the 2013 app
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(parentOrgUnit) {

                // Verify creating an organisational unit on the 2014 app with the 2013 org unit as the parent is not allowed
                var opts = {'parent': parentOrgUnit.id};
                OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2014.client, 'Test org unit', 'course', opts, 400, function() {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that an organisational unit cannot be created with a group from another application
         */
        it('verify an organisational unit cannot be created with a group from another application', function(callback) {
            // Create an organisational unit on the 2013 app
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(parentOrgUnit) {

                // Verify creating an organisational unit on the 2014 app with the 2013 org unit's group is not allowed
                var opts = {'group': parentOrgUnit.GroupId};
                OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2014.client, 'Test org unit', 'course', opts, 401, function() {
                    return callback();
                });
            });
        });
    });

    describe('Updating organisational units', function() {

        /**
         * Verify updating an organisational unit
         */
        it('verify updating an organisational unit', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {
                // Create another organisational unit so we have extra group and parent values to test with
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit 2', 'course', null, function(otherOrgUnit) {

                    // Update it
                    var update = {
                        'displayName': 'Foo',
                        'description': 'Bar',
                        'type': 'module',
                        'group': otherOrgUnit.GroupId,
                        'parent': otherOrgUnit.id,
                        'metadata': {'foo': 'bar'},
                        'published': true
                    };
                    OrgUnitTestUtil.assertUpdateOrgUnit(global.tests.admins.cam2013.client, orgUnit.id, update, function(orgUnit) {

                        // Verify it has been updated
                        OrgUnitTestUtil.assertGetOrgUnit(global.tests.admins.cam2013.client, orgUnit.id, false, function(orgUnit) {
                            assert.strictEqual(orgUnit.displayName, update.displayName);
                            assert.strictEqual(orgUnit.description, update.description);
                            assert.strictEqual(orgUnit.type, update.type);
                            assert.strictEqual(orgUnit.GroupId, update.group);
                            assert.strictEqual(orgUnit.ParentId, update.parent);
                            assert.deepEqual(orgUnit.metadata, update.metadata);
                            assert.strictEqual(orgUnit.published, update.published);
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Verify authorization when updating an organisational unit
         */
        it('verify updating an organisational unit authorization', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Verify it was created
                OrgUnitTestUtil.assertGetOrgUnit(global.tests.admins.cam2013.client, orgUnit.id, false, function(orgUnit) {

                    // Anonymous users cannot update organisational units
                    var update = {'displayName': 'foo'};
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        OrgUnitTestUtil.assertUpdateOrgUnitFails(anonymousClient, orgUnit.id, update, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousClient) {
                                OrgUnitTestUtil.assertUpdateOrgUnitFails(anonymousClient, orgUnit.id, update, 401, function() {

                                    // Authenticated users cannot update organisational units
                                    TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                                        OrgUnitTestUtil.assertUpdateOrgUnitFails(simon.client, orgUnit.id, update, 401, function() {

                                            // Application administrators from another application cannot update the organisational unit
                                            OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.oxford2014.client, orgUnit.id, update, 401, function() {

                                                // Sanity-check the organisational unit was not updated
                                                OrgUnitTestUtil.assertGetOrgUnit(global.tests.admins.cam2013.client, orgUnit.id, false, function(orgUnit) {
                                                    assert.strictEqual(orgUnit.displayName, 'Test org unit');

                                                    // Members of the organisational unit's group can update it
                                                    var memberUpdate = {};
                                                    memberUpdate[simon.profile.id] = true;
                                                    GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, memberUpdate, function() {
                                                        OrgUnitTestUtil.assertUpdateOrgUnit(simon.client, orgUnit.id, update, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verify validation when updating an organisational unit
         */
        it('verify updating an organisational unit validation', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Invalid organisational unit id
                var update = {'displayName': 'foo'};
                OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, 'Not a number', update, 400, function() {
                    OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, -1, update, 404, function() {

                        // Too long displayName
                        update = {'type': TestsUtil.generateString(257)};
                        OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 400, function() {

                            // Too long type
                            update = {'type': TestsUtil.generateString(33)};
                            OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 400, function() {

                                // Too long description
                                update = {'description': TestsUtil.generateString(1001)};
                                OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 400, function() {

                                    // Invalid group
                                    update = {'group': 'not a number'};
                                    OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 400, function() {

                                        // Unknown group
                                        update = {'group': -1};
                                        OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 404, function() {

                                            // Invalid parent
                                            update = {'parent': 'not a number'};
                                            OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 400, function() {

                                                // Unknown parent
                                                update = {'parent': -1};
                                                OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 404, function() {

                                                    // Invalid metadata
                                                    update = {'metadata': 'not an object'};
                                                    OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 400, function() {

                                                        // Invalid published flag
                                                        update = {'published': 'invalid'};
                                                        OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 400, function() {
                                                            update = {'published': 42};
                                                            OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 400, function() {

                                                                // Invalid key
                                                                update = {'foo': 'bar'};
                                                                OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, update, 400, function() {
                                                                    return callback();
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an organisational unit cannot be updated with a parent from another application
         */
        it('verify an organisational unit cannot be updated with a parent from another application', function(callback) {
            // Create an organisational unit on the 2013 app
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(parentOrgUnit) {

                // Create an organisational unit on the 2014 app
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2014.client, 'Test org unit', 'course', null, function(orgUnit) {

                    // Verify updating an organisational unit on the 2014 app with the 2013 org unit as the parent is not allowed
                    var update = {'parent': parentOrgUnit.id};
                    OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2014.client, orgUnit.id, update, 400, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that an organisational unit cannot be updated with a group from another application
         */
        it('verify an organisational unit cannot be updated with a group from another application', function(callback) {
            // Create an organisational unit on the 2013 app
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(parentOrgUnit) {

                // Create an organisational unit on the 2014 app
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2014.client, 'Test org unit', 'course', null, function(orgUnit) {

                    // Verify updating an organisational unit on the 2014 app with the 2013 org unit's group is not allowed
                    var update = {'group': parentOrgUnit.GroupId};
                    OrgUnitTestUtil.assertUpdateOrgUnitFails(global.tests.admins.cam2014.client, orgUnit.id, update, 400, function() {
                        return callback();
                    });
                });
            });
        });
    });

    describe('Deleting organisational units', function() {

        /**
         * Verify that an organisational unit can be deleted
         */
        it('verify deleting an organisational unit', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Verify it was created
                OrgUnitTestUtil.assertGetOrgUnit(global.tests.admins.cam2013.client, orgUnit.id, false, function(orgUnit) {

                    // Delete it
                    OrgUnitTestUtil.assertDeleteOrgUnit(global.tests.admins.cam2013.client, orgUnit.id, function() {

                        // Verify it was deleted
                        OrgUnitTestUtil.assertGetOrgUnitFails(global.tests.admins.cam2013.client, orgUnit.id, false, 404, callback);
                    });
                });
            });
        });

        /**
         * Verify authorization when deleting an organisational unit
         */
        it('verify deleting an organisational unit authorization', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Verify it was created
                OrgUnitTestUtil.assertGetOrgUnit(global.tests.admins.cam2013.client, orgUnit.id, false, function(orgUnit) {

                    // Anonymous users cannot delete organisational units
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        OrgUnitTestUtil.assertDeleteOrgUnitFails(anonymousClient, orgUnit.id, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousClient) {
                                OrgUnitTestUtil.assertDeleteOrgUnitFails(anonymousClient, orgUnit.id, 401, function() {

                                    // Authenticated users cannot delete organisational units
                                    TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                                        OrgUnitTestUtil.assertDeleteOrgUnitFails(simon.client, orgUnit.id, 401, function() {

                                            // Application administrators from another application cannot delete the organisational unit
                                            OrgUnitTestUtil.assertDeleteOrgUnitFails(global.tests.admins.oxford2014.client, orgUnit.id, 401, function() {

                                                // Sanity-check the organisational unit was not deleted
                                                OrgUnitTestUtil.assertGetOrgUnit(global.tests.admins.cam2013.client, orgUnit.id, false, function(orgUnit) {

                                                    // When users are a member of the group they can delete the organisational unit
                                                    var update = {};
                                                    update[simon.profile.id] = true;
                                                    GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {
                                                        OrgUnitTestUtil.assertDeleteOrgUnit(simon.client, orgUnit.id, function() {
                                                            return callback();
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verify validation when deleting an organisational unit
         */
        it('verify deleting an organisational unit validation', function(callback) {
            // Invalid organisational unit id
            OrgUnitTestUtil.assertDeleteOrgUnitFails(global.tests.admins.cam2013.client, 'Not a number', 400, function() {
                OrgUnitTestUtil.assertDeleteOrgUnitFails(global.tests.admins.cam2013.client, -1, 404, function() {
                    return callback();
                });
            });
        });
    });

    describe('Getting the organisational units in an app', function() {

        /**
         * Test that verifies getting the organisational units in an app
         */
        it('verify getting the organisational units in an app', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a couple of organisational units
                OrgUnitTestUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit, series) {

                    // Get the organisational units
                    OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, true, null, null, function(orgUnits) {

                        // Assert the organisational units are returned
                        var course = _.find(orgUnits.results, {'id': courseUnit.id});
                        var subject = _.find(orgUnits.results, {'id': subjectUnit.id});
                        var part = _.find(orgUnits.results, {'id': partUnit.id});
                        var module = _.find(orgUnits.results, {'id': moduleUnit.id});

                        // Assert the tree structure
                        OrgUnitTestUtil.assertOrgUnit(course, courseUnit);
                        OrgUnitTestUtil.assertOrgUnit(subject, subjectUnit);
                        OrgUnitTestUtil.assertOrgUnit(part, partUnit);
                        OrgUnitTestUtil.assertOrgUnit(module, moduleUnit);

                        // Sanity-check that the published flag and metadata field are returned
                        assert.strictEqual(course.published, true);
                        assert.strictEqual(subject.published, true);
                        assert.strictEqual(part.published, true);
                        assert.strictEqual(module.published, false);
                        assert.deepEqual(part.metadata, {'url': 'google.com'});

                        // Assert we can manage all of them
                        assert.strictEqual(course.canManage, true);
                        assert.strictEqual(subject.canManage, true);
                        assert.strictEqual(part.canManage, true);
                        assert.strictEqual(module.canManage, true);

                        // Verify the series have a `canManage` property
                        OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, true, true, partUnit.id, null, function(orgUnits) {
                            assert.strictEqual(orgUnits.results.length, 1);
                            assert.strictEqual(orgUnits.results[0].id, moduleUnit.id);

                            assert.strictEqual(orgUnits.results[0].Series.length, series.length);
                            _.each(orgUnits.results[0].Series, function(serie) {
                                assert.strictEqual(serie.canManage, true);
                            });

                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when getting the organisational units in an app
         */
        it('verify getting the organisational units in an app validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Invalid application
                OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2013.client, 'not a number', null, null, null, null, 400, function(orgUnits) {

                    // Unknown parent
                    OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2013.client, null, null, null, -1, null, 404, function(orgUnits) {

                        // Invalid type
                        OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2013.client, null, null, null, null, TestsUtil.generateString(33), 400, function(orgUnits) {
                            OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2013.client, null, null, null, null, ['ok', TestsUtil.generateString(33)], 400, function(orgUnits) {

                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting the organisational units in an app
         */
        it('verify getting the organisational units in an app authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create some test data
                OrgUnitTestUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit) {

                    // Getting the organisational units from another app is not allowed
                    OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2014.client, global.tests.apps.cam2013.id, null, null, true, null, 401, function(orgUnits) {

                        // Verify each org unit has a `canManage` flag that indicates whether or
                        // not the current user can update the organisational unit
                        OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, true, null, null, function(orgUnits) {
                            _.each(orgUnits.results, function(orgUnit) {
                                assert.ok(_.has(orgUnit, 'canManage'));
                                assert.strictEqual(orgUnit.canManage, true);
                            });

                            // Anonymous users cannot manage organisational units or series
                            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                                OrgUnitTestUtil.assertGetOrgUnits(anonymousClient, null, null, true, null, null, function(orgUnits) {
                                    _.each(orgUnits.results, function(orgUnit) {
                                        assert.ok(_.has(orgUnit, 'canManage'));
                                        assert.strictEqual(orgUnit.canManage, false);
                                    });

                                    // Regular users cannot manage organisational units
                                    OrgUnitTestUtil.assertGetOrgUnits(simon.client, null, null, true, null, null, function(orgUnits) {
                                        _.each(orgUnits.results, function(orgUnit) {
                                            assert.ok(_.has(orgUnit, 'canManage'));
                                            assert.strictEqual(orgUnit.canManage, false);
                                        });

                                        // Regular users who are a member of an organisational unit's group can manage it
                                        var update = {};
                                        update[simon.profile.id] = true;
                                        GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, moduleUnit.GroupId, update, function() {
                                            OrgUnitTestUtil.assertGetOrgUnits(simon.client, null, null, true, null, null, function(orgUnits) {
                                                _.each(orgUnits.results, function(orgUnit) {
                                                    assert.ok(_.has(orgUnit, 'canManage'));
                                                    // Simon can only manage the module organisational unit
                                                    if (orgUnit.id === moduleUnit.id) {
                                                        assert.strictEqual(orgUnit.canManage, true);
                                                    } else {
                                                        assert.strictEqual(orgUnit.canManage, false);
                                                    }
                                                });

                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Verify the `canManage` property on series
         *
         * @param  {RestClient}         client                      The REST Client to make the request with
         * @param  {OrgUnit}            parent                      The parent organisational unit
         * @param  {OrgUnit}            child                       The organisational unit that should be under the parent
         * @param  {Serie}              serieA                      A serie that's under the `child` organisational unit
         * @param  {Serie}              serieB                      A serie that's under the `child` organisational unit
         * @param  {Boolean}            canManageSerieA             Whether the `client` can manage `serieA`
         * @param  {Boolean}            canManageSerieB             Whether the `client` can manage `serieB`
         * @param  {Function}           callback                    Standard callback function
         */
        var expectSeries = function(client, parent, child, serieA, serieB, canManageSerieA, canManageSerieB, callback) {
            OrgUnitTestUtil.assertGetOrgUnits(client, parent.AppId, true, true, parent.id, null, function(orgUnits) {
                assert.strictEqual(orgUnits.results.length, 1);
                assert.strictEqual(orgUnits.results[0].id, child.id);
                assert.strictEqual(orgUnits.results[0].Series.length, 2);

                var serieAResult = _.find(orgUnits.results[0].Series, {'id': serieA.id});
                assert.ok(serieAResult);
                assert.strictEqual(serieAResult.canManage, canManageSerieA);
                var serieBResult = _.find(orgUnits.results[0].Series, {'id': serieB.id});
                assert.ok(serieBResult);
                assert.strictEqual(serieBResult.canManage, canManageSerieB);
                return callback();
            });
        };

        /**
         * Test that verifies the canManage property on series
         */
        it('verify the canManage property on series', function(callback) {
            // Create some test data
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2014.client, 'Parent', 'part', null, function(parent) {
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2014.client, 'Module', 'module', {'parent': parent.id}, function(module) {

                    // Generate 3 users
                    TestsUtil.generateTestUsers(global.tests.apps.cam2014, 3, false, function(simon, nico, sam) {

                        // Simon and Nico create a serie
                        var start = moment().subtract(30, 'days').format();
                        var end = moment().add(30, 'days').format();
                        SeriesTestUtil.generateSerieWithEvents(simon.client, 1, 5, start, end, function(simonSeries) {
                            SeriesTestUtil.generateSerieWithEvents(nico.client, 1, 5, start, end, function(nicoSeries) {

                                // Add each serie to the module
                                var serieIds = [simonSeries[0].id, nicoSeries[0].id];
                                OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2014.client, module.id, serieIds, null, function() {

                                    // Anonymous users can't manage any series
                                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2014, function(anonymousAppClient) {
                                        expectSeries(anonymousAppClient, parent, module, simonSeries[0], nicoSeries[0], false, false, function() {

                                            // Sam can't manage any series
                                            expectSeries(sam.client, parent, module, simonSeries[0], nicoSeries[0], false, false, function() {

                                                // Simon can only manage his serie
                                                expectSeries(simon.client, parent, module, simonSeries[0], nicoSeries[0], true, false, function() {

                                                    // Nico can only manage his serie
                                                    expectSeries(nico.client, parent, module, simonSeries[0], nicoSeries[0], false, true, function() {

                                                        // An app admin can manage both
                                                        expectSeries(global.tests.admins.cam2014.client, parent, module, simonSeries[0], nicoSeries[0], true, true, function() {

                                                            // A global admin can manage all series
                                                            TestsUtil.getGlobalAdminRestClient(function(globalAdminRestClient) {
                                                                expectSeries(globalAdminRestClient, parent, module, simonSeries[0], nicoSeries[0], true, true, callback);
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that using an organisational unit from another application as parent is not allowed
         */
        it('verify using an organisational unit from another application as parent is not allowed', function(callback) {
            // Create some test data in the 2014 app
            OrgUnitTestUtil.createSimpleTree(global.tests.admins.cam2014.client, function(courseUnit, subjectUnit, partUnit, moduleUnit) {

                // Verify we cannot use the 2014 data as a parent in the 2013 app
                OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2013.client, null, null, null, courseUnit.id, null, 401, function(orgUnits) {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies filtering the organisational units in an app by type
         */
        it('verify filtering the organisational units in an app by type', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a couple of organisational units
                OrgUnitTestUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit) {

                    // Get just the `part` organisational units
                    OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, null, null, 'part', function(orgUnits) {

                        // Assert only the part is returned
                        var course = _.find(orgUnits.results, {'id': courseUnit.id});
                        var subject = _.find(orgUnits.results, {'id': subjectUnit.id});
                        var part = _.find(orgUnits.results, {'id': partUnit.id});
                        var module = _.find(orgUnits.results, {'id': moduleUnit.id});
                        assert.ok(!course);
                        assert.ok(!subject);
                        assert.ok(part);
                        assert.ok(!module);

                        // Get both the `subject` and the `part` organisational units
                        OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, null, null, ['subject', 'part'], function(orgUnits) {

                            // Assert only the part is returned
                            var course = _.find(orgUnits.results, {'id': courseUnit.id});
                            var subject = _.find(orgUnits.results, {'id': subjectUnit.id});
                            var part = _.find(orgUnits.results, {'id': partUnit.id});
                            var module = _.find(orgUnits.results, {'id': moduleUnit.id});
                            assert.ok(!course);
                            assert.ok(subject);
                            assert.ok(part);
                            assert.ok(!module);

                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies getting the organisational units in an app under a parent
         */
        it('verify getting the organisational units in an app under a parent', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a couple of organisational units
                OrgUnitTestUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit) {

                    // Get the org units under the course. This only works 1 level deep, so just the subject is returned
                    OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, null, courseUnit.id, null, function(orgUnits) {

                        // Assert only the subject is returned
                        var course = _.find(orgUnits.results, {'id': courseUnit.id});
                        var subject = _.find(orgUnits.results, {'id': subjectUnit.id});
                        var part = _.find(orgUnits.results, {'id': partUnit.id});
                        var module = _.find(orgUnits.results, {'id': moduleUnit.id});
                        assert.ok(!course);
                        assert.ok(subject);
                        assert.ok(!part);
                        assert.ok(!module);

                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that series can be included in the response
         */
        it('verify series can be included in the response', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a couple of organisational units
                OrgUnitTestUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit, series) {

                    // Add some more series to ensure paging does not take place
                    SeriesTestUtil.generateSeries(global.tests.admins.cam2013.client, 30, function(extraSeries) {
                        var serieIds = _.pluck(extraSeries, 'id').sort();
                        OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, moduleUnit.id, serieIds, null, function() {

                            // Get the the organisational units under the part AND include the series
                            OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, true, null, partUnit.id, null, function(orgUnits) {

                                // Verify the module (and only the module) is returned
                                assert.strictEqual(orgUnits.results.length, 1);
                                assert.strictEqual(orgUnits.results[0].id, moduleUnit.id);

                                // Verify all the series under the module are returned
                                var allSeries = series.concat(extraSeries);
                                assert.strictEqual(orgUnits.results[0].Series.length, allSeries.length);
                                var ids = _.pluck(orgUnits.results[0].Series, 'id').sort();
                                assert.deepEqual(ids, _.pluck(allSeries, 'id').sort());

                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Getting an organisational unit', function() {

        /**
         * Test that verifies getting an organisational unit
         */
        it('verify getting an organisational unit', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a few organisational units
                OrgUnitTestUtil.createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit, series) {

                    // Get the organisational unit
                    OrgUnitTestUtil.assertGetOrgUnit(simon.client, courseUnit.id, false, function(orgUnit) {
                        OrgUnitTestUtil.assertOrgUnit(orgUnit, courseUnit);

                        // Verify series can be included
                        OrgUnitTestUtil.assertGetOrgUnit(simon.client, moduleUnit.id, true, function(orgUnit) {
                            assert.ok(orgUnit.Series);
                            assert.strictEqual(orgUnit.Series.length, 4);

                            var expectedSeriesById = _.indexBy(series, 'id');
                            _.each(orgUnit.series, function(serie) {
                                SeriesTestUtil.assertSerie(serie, expectedSeriesById[serie.id]);
                            });

                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when getting an organisational unit
         */
        it('verify validation when getting an organisational unit', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Invalid organisational unit id
                OrgUnitTestUtil.assertGetOrgUnitFails(simon.client, 'not a number', false, 400, function() {

                    // Unknown organisational unit id
                    OrgUnitTestUtil.assertGetOrgUnitFails(simon.client, -1, false, 404, function() {
                        OrgUnitTestUtil.assertGetOrgUnitFails(simon.client, 12312312, false, 404, function() {
                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting an organisational unit
         */
        it('verify authorization when getting an organisational unit', function(callback) {
            // Create a few organisational units on the oxford application
            OrgUnitTestUtil.createSimpleTree(global.tests.admins.oxford2014.client, function(courseUnit, subjectUnit, partUnit, moduleUnit, series) {

                // Anonymous users from other applications can't access the organisational unit
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    OrgUnitTestUtil.assertGetOrgUnitFails(anonymousClient, courseUnit.id, false, 401, function() {

                        // Anonymous users from the application can access the organisational unit
                        TestsUtil.getAnonymousAppUserClient(global.tests.apps.oxford2014, function(anonymousOxfordClient) {
                            OrgUnitTestUtil.assertGetOrgUnit(anonymousOxfordClient, courseUnit.id, false, function() {

                                // Regular users from other applications can't access the organisational unit
                                TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(camUser) {
                                    OrgUnitTestUtil.assertGetOrgUnitFails(camUser.client, courseUnit.id, false, 401, function() {

                                        // Regular users from the same application can access the organisational unit
                                        TestsUtil.generateTestUsers(global.tests.apps.oxford2014, 1, false, function(oxfordUser) {
                                            OrgUnitTestUtil.assertGetOrgUnit(oxfordUser.client, courseUnit.id, false, function() {

                                                // Application admins from other applications can't access the organisational unit
                                                OrgUnitTestUtil.assertGetOrgUnitFails(global.tests.admins.cam2013.client, courseUnit.id, false, 401, function() {

                                                    // Application admins from the same application can access the organisational unit
                                                    OrgUnitTestUtil.assertGetOrgUnit(global.tests.admins.oxford2014.client, courseUnit.id, false, function() {

                                                        // Anonymous users on the global admin application can't access the organisational unit
                                                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                                            OrgUnitTestUtil.assertGetOrgUnitFails(anonymousGlobalClient, courseUnit.id, false, 401, function() {

                                                                // Global admins can access the organisational unit
                                                                TestsUtil.getGlobalAdminRestClient(function(globalAdminRestClient) {
                                                                    OrgUnitTestUtil.assertGetOrgUnit(globalAdminRestClient, courseUnit.id, false, function() {
                                                                        return callback();
                                                                    });
                                                                });
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
