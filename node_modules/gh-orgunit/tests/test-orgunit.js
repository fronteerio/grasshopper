/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper OrgUnit Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var GroupsTestUtil = require('gh-groups/tests/util');
var TestsUtil = require('gh-tests');

var OrgUnitTestUtil = require('./util');

describe('Organisational units', function() {

    describe('Creating organisational units', function() {

        /**
         * Test that verifies creating an organisational unit
         */
        it('verify creating an organisational unit', function(callback) {
            // Verify creating a basic organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(parentOrgUnit) {

                // Verify creating an organisational unit with more metadata
                var opts = {
                    'description': 'Test description',
                    'parent': parentOrgUnit.id
                };
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(childOrgUnit) {

                    // Sanity-check the organisational units are created
                    OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, null, null, function(orgUnits) {
                        assert.ok(_.find(orgUnits.results, {'id': parentOrgUnit.id}));
                        assert.ok(_.find(orgUnits.results, {'id': childOrgUnit.id}));
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that a group is created when no group is specified
         */
        it('verify a group is created when no group is specified', function(callback) {
            // Create an organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit1) {

                // A new group with only the admin user should've been created
                GroupsTestUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit1.GroupId, null, null, [global.tests.admins.cam2013.profile], function(members) {

                    // If the group is specified, no new group should be created
                    var opts = {'group': orgUnit1.GroupId};
                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit 2', 'course', opts, function(orgUnit2) {
                        assert.strictEqual(orgUnit1.GroupId, orgUnit2.GroupId);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies creating an organisational unit validation
         */
        it('verify creating an organisational unit validation', function(callback) {
            // Missing display name
            OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, null, 'course', null, 400, function() {

                // Too long displayName
                OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, TestsUtil.generateString(257), 'course', null, 400, function() {

                    // Missing type
                    OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', null, null, 400, function() {

                        // Too long type
                        OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', TestsUtil.generateString(17), null, 400, function() {

                            // Too long description
                            var opts = {'description': TestsUtil.generateString(1001)};
                            OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 400, function() {

                                // Invalid group
                                opts = {'group': 'not a number'};
                                OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 400, function() {

                                    // Unknown group
                                    opts = {'group': -1};
                                    OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 404, function() {

                                        // Invalid parent
                                        opts = {'parent': 'not a number'};
                                        OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 400, function() {

                                            // Unknown parent
                                            opts = {'parent': -1};
                                            OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 404, function() {
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies creating an organisational unit authorization
         */
        it('verify creating an organisational unit authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Anonymous users cannot create organisational units
                TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                    OrgUnitTestUtil.assertCreateOrgUnitFails(anonymousClient, 'Test orgunit', 'course', null, 401, function() {
                        TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                            var opts = {'app': global.tests.apps.cam2013.id};
                            OrgUnitTestUtil.assertCreateOrgUnitFails(anonymousGlobalClient, 'Test orgunit', 'course', opts, 401, function() {

                                // Regular users can't create organisational units either
                                OrgUnitTestUtil.assertCreateOrgUnitFails(simon.client, 'Test orgunit', 'course', null, 401, function() {                                

                                    // Application admins can't create organisational units on other applications
                                    var opts = {'app': global.tests.apps.cam2014.id};
                                    OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2013.client, 'Test orgunit', 'course', opts, 401, function() {                                
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an organisational unit cannot be created with a parent from another application
         */
        it('verify an organisational unit cannot be created with a parent from another application', function(callback) {
            // Create an organisational unit on the 2013 app
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(parentOrgUnit) {

                // Verify creating an organisational unit on the 2014 app with the 2013 org unit as the parent is not allowed
                var opts = {'parent': parentOrgUnit.id};
                OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2014.client, 'Test org unit', 'course', opts, 400, function() {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies that an organisational unit cannot be created with a parent from another application
         */
        it('verify an organisational unit cannot be created with a group from another application', function(callback) {
            // Create an organisational unit on the 2013 app
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(parentOrgUnit) {

                // Verify creating an organisational unit on the 2014 app with the 2013 org unit's group is not allowed
                var opts = {'group': parentOrgUnit.GroupId};
                OrgUnitTestUtil.assertCreateOrgUnitFails(global.tests.admins.cam2014.client, 'Test org unit', 'course', opts, 401, function() {
                    return callback();
                });
            });
        });
    });

    describe('Getting the organisational units in an app', function() {

        /**
         * Create a simple organisational unit tree that looks like:
         *
         * ```
         * Engineering (course)
         *   + Computer science (subject)
         *     + I (part)
         *       + Algorithms 1 (module)
         * ```
         *
         * @param  {Client}     client              The client with which to create the tree structure
         * @param  {Function}   callback            Standard callback function
         * @param  {OrgUnit}    callback.course     The course organisational unit
         * @param  {OrgUnit}    callback.subject    The subject organisational unit
         * @param  {OrgUnit}    callback.part       The part organisational unit
         */
        var _createSimpleTree = function(client, callback) {
            OrgUnitTestUtil.assertCreateOrgUnit(client, 'Engineering', 'course', null, function(course) {
                OrgUnitTestUtil.assertCreateOrgUnit(client, 'Computer Science', 'subject', {'parent': course.id}, function(subject) {
                    OrgUnitTestUtil.assertCreateOrgUnit(client, 'I', 'part', {'parent': subject.id}, function(part) {
                        OrgUnitTestUtil.assertCreateOrgUnit(client, 'Algorithms 1', 'module', {'parent': part.id}, function(module) {
                            return callback(course, subject, part, module);
                        });
                    });
                });
            });
        };

        /**
         * Test that verifies getting the organisational units in an app
         */
        it('verify getting the organisational units in an app', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a couple of organisational units
                _createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit) {

                    // Get the organisational units
                    OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, null, null, function(orgUnits) {

                        // Assert the organisational units are returned
                        var course = _.find(orgUnits.results, {'id': courseUnit.id});
                        var subject = _.find(orgUnits.results, {'id': subjectUnit.id});
                        var part = _.find(orgUnits.results, {'id': partUnit.id});
                        var module = _.find(orgUnits.results, {'id': moduleUnit.id});
                        assert.ok(course);
                        assert.ok(subject);
                        assert.ok(part);
                        assert.ok(module);

                        // Assert the tree structure
                        assert.strictEqual(subject.parentId, course.id);
                        assert.strictEqual(part.parentId, subject.id);
                        assert.strictEqual(module.parentId, part.id);

                        // Assert we can manage all of them
                        assert.strictEqual(course.canManage, true);
                        assert.strictEqual(subject.canManage, true);
                        assert.strictEqual(part.canManage, true);
                        assert.strictEqual(module.canManage, true);

                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation when getting the organisational units in an app
         */
        it('verify getting the organisational units in an app validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Invalid application
                OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2013.client, 'not a number', null, null, null, 400, function(orgUnits) {

                    // Unknown parent
                    OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2013.client, null, null, -1, null, 404, function(orgUnits) {

                        // Invalid type
                        OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2013.client, null, null, null, TestsUtil.generateString(17), 400, function(orgUnits) {
                            OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2013.client, null, null, null, ['ok', TestsUtil.generateString(17)], 400, function(orgUnits) {

                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting the organisational units in an app
         */
        it('verify getting the organisational units in an app authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create some test data
                _createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit) {
                    
                    // Getting the organisational units from another app is not allowed
                    OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2014.client, global.tests.apps.cam2013.id, null, null, null, 401, function(orgUnits) {

                        // Verify each org unit has a `canManage` flag that indicates whether or
                        // not the current user can update the organisational unit
                        OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, null, null, function(orgUnits) {
                            _.each(orgUnits.results, function(orgUnit) {
                                assert.ok(_.has(orgUnit, 'canManage'));
                                assert.strictEqual(orgUnit.canManage, true);
                            });

                            // Anonymous users cannot manage organisational units
                            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                                OrgUnitTestUtil.assertGetOrgUnits(anonymousClient, null, null, null, null, function(orgUnits) {
                                    _.each(orgUnits.results, function(orgUnit) {
                                        assert.ok(_.has(orgUnit, 'canManage'));
                                        assert.strictEqual(orgUnit.canManage, false);
                                    });

                                    // Regular users cannot manage organisational units
                                    OrgUnitTestUtil.assertGetOrgUnits(simon.client, null, null, null, null, function(orgUnits) {
                                        _.each(orgUnits.results, function(orgUnit) {
                                            assert.ok(_.has(orgUnit, 'canManage'));
                                            assert.strictEqual(orgUnit.canManage, false);
                                        });

                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that using an organisational unit from another application as parent is not allowed
         */
        it('verify using an organisational unit from another application as parent is not allowed', function(callback) {
            // Create some test data in the 2014 app
            _createSimpleTree(global.tests.admins.cam2014.client, function(courseUnit, subjectUnit, partUnit, moduleUnit) {

                // Verify we cannot use the 2014 data as a parent in the 2013 app
                OrgUnitTestUtil.assertGetOrgUnitsFails(global.tests.admins.cam2013.client, null, null, courseUnit.id, null, 401, function(orgUnits) {
                    return callback();
                });
            });
        });


        /**
         * Test that verifies filtering the organisational units in an app by type
         */
        it('verify filtering the organisational units in an app by type', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a couple of organisational units
                _createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit) {

                    // Get just the `part` organisational units
                    OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, null, 'part', function(orgUnits) {

                        // Assert only the part is returned
                        var course = _.find(orgUnits.results, {'id': courseUnit.id});
                        var subject = _.find(orgUnits.results, {'id': subjectUnit.id});
                        var part = _.find(orgUnits.results, {'id': partUnit.id});
                        var module = _.find(orgUnits.results, {'id': moduleUnit.id});
                        assert.ok(!course);
                        assert.ok(!subject);
                        assert.ok(part);
                        assert.ok(!module);

                        // Get both the `subject` and the `part` organisational units
                        OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, null, ['subject', 'part'], function(orgUnits) {

                            // Assert only the part is returned
                            var course = _.find(orgUnits.results, {'id': courseUnit.id});
                            var subject = _.find(orgUnits.results, {'id': subjectUnit.id});
                            var part = _.find(orgUnits.results, {'id': partUnit.id});
                            var module = _.find(orgUnits.results, {'id': moduleUnit.id});
                            assert.ok(!course);
                            assert.ok(subject);
                            assert.ok(part);
                            assert.ok(!module);

                            return callback();
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies getting the organisational units in an app under a parent
         */
        it('verify getting the organisational units in an app under a parent', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a couple of organisational units
                _createSimpleTree(global.tests.admins.cam2013.client, function(courseUnit, subjectUnit, partUnit, moduleUnit) {

                    // Get the org units under the course. This only works 1 level deep, so just the subject is returned
                    OrgUnitTestUtil.assertGetOrgUnits(global.tests.admins.cam2013.client, null, null, courseUnit.id, null, function(orgUnits) {

                        // Assert only the subject is returned
                        var course = _.find(orgUnits.results, {'id': courseUnit.id});
                        var subject = _.find(orgUnits.results, {'id': subjectUnit.id});
                        var part = _.find(orgUnits.results, {'id': partUnit.id});
                        var module = _.find(orgUnits.results, {'id': moduleUnit.id});
                        assert.ok(!course);
                        assert.ok(subject);
                        assert.ok(!part);
                        assert.ok(!module);

                        return callback();
                    });
                });
            });
        });
    });
});
