/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper OrgUnit Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

/**
 * Assert that an organisational unit has all expected properties
 *
 * @param  {OrgUnit}              orgUnit               The organisational unit to assert the properties for
 * @param  {OrgUnit}              expectedOrgUnit       The organisational unit to which the provided organisational unit should be compared
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertOrgUnit = module.exports.assertOrgUnit = function(orgUnit, expectedOrgUnit) {
    assert.ok(orgUnit);
    assert.ok(orgUnit.id);
    assert.ok(orgUnit.AppId);
    assert.ok(orgUnit.displayName);
    assert.ok(orgUnit.type);
    assert.ok(orgUnit.createdAt);
    assert.ok(orgUnit.updatedAt);
    assert.strictEqual(orgUnit.id, expectedOrgUnit.id);
    assert.strictEqual(orgUnit.AppId, expectedOrgUnit.AppId);
    assert.strictEqual(orgUnit.displayName, expectedOrgUnit.displayName);
    assert.strictEqual(orgUnit.type, expectedOrgUnit.type);
    assert.strictEqual(orgUnit.group, expectedOrgUnit.group);
};

/**
 * Assert that a new organisational unit can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the organisational unit
 * @param  {Number}             type                            The organisational unit type (e.g. `tripos`, `part`)
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number}             [opts.app]                      The id of the application that this organisational unit will belong to
 * @param  {String}             [opts.description]              The description of the organisational unit
 * @param  {Number}             [opts.group]                    The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @param  {Number}             [opts.parent]                   The id of the parent organisational unit
 * @param  {Function}           callback                        Standard callback function
 * @param  {OrgUnit}            callback.orgUnit                The created organisational unit
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateOrgUnit = module.exports.assertCreateOrgUnit = function(client, displayName, type, opts, callback) {
    opts = opts || {};

    client.orgUnit.createOrgUnit(displayName, type, opts, function(err, createdOrgUnit, response) {
        assert.ok(!err);
        assert.ok(createdOrgUnit);
        assert.ok(createdOrgUnit.id);
        assert.ok(createdOrgUnit.createdAt);
        assert.ok(createdOrgUnit.updatedAt);
        assert.strictEqual(createdOrgUnit.displayName, displayName);
        assert.strictEqual(createdOrgUnit.type, type);

        if (opts.description) {
            assert.strictEqual(createdOrgUnit.description, opts.description);
        }
        if (opts.group) {
            assert.strictEqual(createdOrgUnit.GroupId, opts.group);
        }
        if (opts.parent) {
            assert.strictEqual(createdOrgUnit.parentId, opts.parent);
        }
        return callback(createdOrgUnit);
    });
};

/**
 * Assert that a new organisational unit can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the organisational unit
 * @param  {Number}             type                            The organisational unit type (e.g. `tripos`, `part`)
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number}             [opts.app]                      The id of the application that this organisational unit will belong to
 * @param  {String}             [opts.description]              The description of the organisational unit
 * @param  {Number}             [opts.group]                    The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @param  {Number}             [opts.parent]                   The id of the parent organisational unit
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateOrgUnitFails = module.exports.assertCreateOrgUnitFails = function(client, displayName, type, opts, code, callback) {
    client.orgUnit.createOrgUnit(displayName, type, opts, function(err, orgUnit, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnit);
        return callback();
    });
};

/**
 * Assert that the organisational unit for an app can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {number}             [app]                           The id of the app to get the organisational units for. Defaults to the current app
 * @param  {boolean}            [includeSeries]                 Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {number}             [parent]                        The id of the parent to retrieve the organisational units for
 * @param  {string[]}           [type]                          The organisational unit type[s] to filter the organisational unit by
 * @param  {Function}           callback                        Standard callback function
 * @param  {OrgUnit}            callback.orgUnit                The retrieved organisational unit
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnits = module.exports.assertGetOrgUnits = function(client, app, includeSeries, parent, type, callback) {
    client.orgUnit.getOrgUnits(app, includeSeries, parent, type, function(err, orgUnits) {
        assert.ok(!err);
        assert.ok(orgUnits);
        return callback(orgUnits);
    });
};

/**
 * Assert that an organisational unit can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {number}             [app]                           The id of the app to get the organisational units for. Defaults to the current app
 * @param  {boolean}            [includeSeries]                 Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {number}             [parent]                        The id of the parent to retrieve the organisational units for
 * @param  {string[]}           [type]                          The organisational unit type[s] to filter the organisational unit by
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitsFails = module.exports.assertGetOrgUnitsFails = function(client, app, includeSeries, parent, type, code, callback) {
    client.orgUnit.getOrgUnits(app, includeSeries, parent, type, function(err, orgUnits) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnits);
        return callback();
    });
};
