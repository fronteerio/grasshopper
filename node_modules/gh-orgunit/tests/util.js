/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var SeriesTestsUtil = require('gh-series/tests/util');
var TestsUtil = require('gh-tests/lib/util');
var UsersTestsUtil = require('gh-users/tests/util');

/**
 * Assert that an organisational unit has all expected properties
 *
 * @param  {OrgUnit}              orgUnit               The organisational unit to assert the properties for
 * @param  {OrgUnit}              expectedOrgUnit       The organisational unit to which the provided organisational unit should be compared
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertOrgUnit = module.exports.assertOrgUnit = function(orgUnit, expectedOrgUnit) {
    assert.ok(orgUnit);
    assert.ok(orgUnit.id);
    assert.ok(orgUnit.AppId);
    assert.ok(orgUnit.displayName);
    assert.ok(orgUnit.type);
    assert.ok(orgUnit.createdAt);
    assert.ok(orgUnit.updatedAt);
    assert.strictEqual(orgUnit.id, expectedOrgUnit.id);
    assert.strictEqual(orgUnit.AppId, expectedOrgUnit.AppId);
    assert.strictEqual(orgUnit.displayName, expectedOrgUnit.displayName);
    assert.strictEqual(orgUnit.type, expectedOrgUnit.type);
    assert.strictEqual(orgUnit.description, expectedOrgUnit.description);
    assert.deepEqual(orgUnit.metadata, expectedOrgUnit.metadata);
    assert.strictEqual(orgUnit.published, expectedOrgUnit.published);
    assert.strictEqual(orgUnit.group, expectedOrgUnit.group);
    if (expectedOrgUnit.ParentId) {
        assert.strictEqual(orgUnit.ParentId, expectedOrgUnit.ParentId);
    } else {
        assert.ok(!orgUnit.ParentId);
    }
};

/**
 * Assert that a new organisational unit can be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the organisational unit
 * @param  {Number}             type                            The organisational unit type (e.g. `tripos`, `part`)
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number}             [opts.app]                      The id of the application that this organisational unit will belong to
 * @param  {String}             [opts.description]              The description of the organisational unit
 * @param  {Number}             [opts.group]                    The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @param  {Number}             [opts.parent]                   The id of the parent organisational unit
 * @param  {Object|String}      [opts.metadata]                 The metadata of the organisational unit. When using a string, it should be a stringified JSON object
 * @param  {Boolean}            [opts.published]                The published flag of the organisational unit
 * @param  {Function}           callback                        Standard callback function
 * @param  {OrgUnit}            callback.orgUnit                The created organisational unit
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateOrgUnit = module.exports.assertCreateOrgUnit = function(client, displayName, type, opts, callback) {
    opts = opts || {};

    client.orgUnit.createOrgUnit(displayName, type, opts, function(err, createdOrgUnit, response) {
        assert.ok(!err);
        assert.ok(createdOrgUnit);
        assert.ok(createdOrgUnit.id);
        assert.ok(createdOrgUnit.createdAt);
        assert.ok(createdOrgUnit.updatedAt);
        assert.strictEqual(createdOrgUnit.displayName, displayName);
        assert.strictEqual(createdOrgUnit.type, type);

        if (opts.description) {
            assert.strictEqual(createdOrgUnit.description, opts.description);
        }
        if (opts.metadata) {
            assert.ok(_.isObject(createdOrgUnit.metadata));
            assert.deepEqual(createdOrgUnit.metadata, opts.metadata);
        }
        if (opts.published) {
            assert.strictEqual(createdOrgUnit.published, opts.published);
        }
        if (opts.group) {
            assert.strictEqual(createdOrgUnit.GroupId, opts.group);
        }
        if (opts.parent) {
            assert.strictEqual(createdOrgUnit.ParentId, opts.parent);
        }
        if (opts.app) {
            assert.strictEqual(createdOrgUnit.AppId, opts.app);
        }
        return callback(createdOrgUnit);
    });
};

/**
 * Assert that a new organisational unit can not be created
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {String}             displayName                     The name of the organisational unit
 * @param  {Number}             type                            The organisational unit type (e.g. `tripos`, `part`)
 * @param  {Object}             [opts]                          A set of optional parameters
 * @param  {Number}             [opts.app]                      The id of the application that this organisational unit will belong to
 * @param  {String}             [opts.description]              The description of the organisational unit
 * @param  {Number}             [opts.group]                    The id of the group that can manage the organisational unit. Defaults to creating a new group with the current user as a member
 * @param  {Number}             [opts.parent]                   The id of the parent organisational unit
 * @param  {Object|String}      [opts.metadata]                 The metadata of the organisational unit. When using a string, it should be a stringified JSON object
 * @param  {Boolean}            [opts.published]                The published flag of the organisational unit
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertCreateOrgUnitFails = module.exports.assertCreateOrgUnitFails = function(client, displayName, type, opts, code, callback) {
    client.orgUnit.createOrgUnit(displayName, type, opts, function(err, orgUnit, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnit);
        return callback();
    });
};

/**
 * Assert that an organisational unit can be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to update
 * @param  {Object}             opts                            The values to update the organisational unit with
 * @param  {String}             [opts.displayName]              Updated organisational unit name
 * @param  {String}             [opts.description]              Updated organisational unit description
 * @param  {String}             [opts.type]                     Updated organisational unit type
 * @param  {Number}             [opts.groupId]                  Updated organisational unit group
 * @param  {Number}             [opts.parent]                   Updated organisational unit parent
 * @param  {Object|String}      [opts.metadata]                 Updated organisational unit metadata. When using a string, it should be a stringified JSON object
 * @param  {Boolean}            [opts.published]                Updated organisational unit published flag
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateOrgUnit = module.exports.assertUpdateOrgUnit = function(client, id, opts, callback) {
    client.orgUnit.updateOrgUnit(id, opts, function(err, orgUnit, response) {
        assert.ok(!err);
        if (opts.displayName) {
            assert.strictEqual(orgUnit.displayName, opts.displayName);
        }
        if (opts.description) {
            assert.strictEqual(orgUnit.description, opts.description);
        }
        if (opts.type) {
            assert.strictEqual(orgUnit.type, opts.type);
        }
        if (opts.group) {
            assert.strictEqual(orgUnit.GroupId, opts.group);
        }
        if (opts.parent) {
            assert.strictEqual(orgUnit.ParentId, opts.parent);
        }
        if (!_.isUndefined(opts.published)) {
            assert.strictEqual(orgUnit.published, opts.published);
        }
        if (opts.metadata) {
            assert.deepEqual(orgUnit.metadata, opts.metadata);
        }
        return callback(orgUnit);
    });
};

/**
 * Assert that an organisational unit can not be updated
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to update
 * @param  {Object}             opts                            The values to update the organisational unit with
 * @param  {String}             [opts.displayName]              Updated organisational unit name
 * @param  {String}             [opts.description]              Updated organisational unit description
 * @param  {String}             [opts.type]                     Updated organisational unit type
 * @param  {Number}             [opts.groupId]                  Updated organisational unit group
 * @param  {Number}             [opts.parent]                   Updated organisational unit parent
 * @param  {Object|String}      [opts.metadata]                 Updated organisational unit metadata. When using a string, it should be a stringified JSON object
 * @param  {Boolean}            [opts.published]                Updated organisational unit published flag
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUpdateOrgUnitFails = module.exports.assertUpdateOrgUnitFails = function(client, id, opts, code, callback) {
    client.orgUnit.updateOrgUnit(id, opts, function(err, orgUnit, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnit);
        return callback();
    });
};

/**
 * Assert that an organisational unit can be deleted
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to delete
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteOrgUnit = module.exports.assertDeleteOrgUnit = function(client, id, callback) {
    client.orgUnit.deleteOrgUnit(id, function(err, orgUnit, response) {
        assert.ok(!err);
        return callback();
    });
};

/**
 * Assert that an organisational unit can not be deleted
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to delete
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteOrgUnitFails = module.exports.assertDeleteOrgUnitFails = function(client, id, code, callback) {
    client.orgUnit.deleteOrgUnit(id, function(err, orgUnit, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnit);
        return callback();
    });
};

/**
 * Assert that an organisational unit can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to retrieve
 * @param  {Boolean}            [includeSeries]                 Whether to include the event series associated to the organisational unit
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnit = module.exports.assertGetOrgUnit = function(client, id, includeSeries, callback) {
    client.orgUnit.getOrgUnit(id, includeSeries, function(err, orgUnit, response) {
        assert.ok(!err);
        if (includeSeries) {
            assert.ok(_.has(orgUnit, 'Series'));
            assert.ok(_.isArray(orgUnit.Series));
        }
        return callback(orgUnit);
    });
};

/**
 * Assert that an organisational unit can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to retrieve
 * @param  {Boolean}            [includeSeries]                 Whether to include the event series associated to the organisational unit
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitFails = module.exports.assertGetOrgUnitFails = function(client, id, includeSeries, code, callback) {
    client.orgUnit.getOrgUnit(id, includeSeries, function(err, orgUnit, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnit);
        return callback();
    });
};

/**
 * Assert that the organisational units for an app can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {number}             [app]                           The id of the app to get the organisational units for. Defaults to the current app
 * @param  {boolean}            [includeSeries]                 Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {Boolean}            [includePermissions]            Whether to include if the current user can manage the organisational units/series and whether an organisational unit is locked. Defaults to `false`
 * @param  {number}             [parent]                        The id of the parent to retrieve the organisational units for
 * @param  {string[]}           [type]                          The organisational unit type[s] to filter the organisational unit by
 * @param  {Function}           callback                        Standard callback function
 * @param  {OrgUnit}            callback.orgUnits               The retrieved organisational units
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnits = module.exports.assertGetOrgUnits = function(client, app, includeSeries, includePermissions, parent, type, callback) {
    client.orgUnit.getOrgUnits(app, includeSeries, includePermissions, parent, type, function(err, orgUnits) {
        assert.ok(!err);
        assert.ok(orgUnits);

        // Assert the series are included when includeSeries was set to `true`
        if (includeSeries) {
            _.each(orgUnits.results, function(orgUnit) {
                assert.ok(orgUnit.Series);
            });
        }

        // Assert a `canManage` flag is added when includePermissions was set to `true`
        if (includePermissions) {
            _.each(orgUnits.results, function(orgUnit) {
                assert.ok(_.has(orgUnit, 'canManage'));
                assert.ok(_.has(orgUnit, 'Group'));
                assert.ok(_.has(orgUnit.Group, 'isLocked'));
            });
        }

        return callback(orgUnits);
    });
};

/**
 * Assert that an organisational unit can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {number}             [app]                           The id of the app to get the organisational units for. Defaults to the current app
 * @param  {boolean}            [includeSeries]                 Whether to include the event series associated to the organisational units. Defaults to `false`
 * @param  {Boolean}            [includePermissions]            Whether to include if the current user can manage the organisational units/series and whether an organisational unit is locked. Defaults to `false`
 * @param  {number}             [parent]                        The id of the parent to retrieve the organisational units for
 * @param  {string[]}           [type]                          The organisational unit type[s] to filter the organisational unit by
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitsFails = module.exports.assertGetOrgUnitsFails = function(client, app, includeSeries, includePermissions, parent, type, code, callback) {
    client.orgUnit.getOrgUnits(app, includeSeries, includePermissions, parent, type, function(err, orgUnits) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!orgUnits);
        return callback();
    });
};

/**
 * Assert that the series for an organisational unit can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit for which to retrieve the series
 * @param  {Number}             [limit]                         The maximum number of results to retrieve
 * @param  {Number}             [offset]                        The paging number of the results to retrieve
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitSeries = module.exports.assertGetOrgUnitSeries = function(client, id, limit, offset, callback) {
    client.orgUnit.getOrgUnitSeries(id, limit, offset, function(err, series) {
        assert.ok(!err);
        return callback(series);
    });
};

/**
 * Get all the series under an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit for which to retrieve the series
 * @param  {Function}           callback                        Standard callback function
 * @param  {Serie[]}            [_allSeries]                    All the series under the organisational unit
 * @param  {Number}             [_offset]                       The offset of the page to retrieve
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var getAllOrgUnitSeries = module.exports.getAllOrgUnitSeries = function(client, id, callback, _allSeries, _offset) {
    _allSeries = _allSeries || [];
    _offset = _offset || 0;

    // Get the first page of series
    assertGetOrgUnitSeries(client, id, 25, _offset, function(series) {
        _allSeries = _allSeries.concat(series);

        // If the backend responded with less than 25 series we've retrieved them all
        if (series.length < 25) {
            return callback(_allSeries);

        // Otherwise, we get the next set of series
        } else {
            getAllOrgUnitSeries(client, id, callback, _allSeries, _offset + 25);
        }
    });
};

/**
 * Assert that an organisational unit's series can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit for which to retrieve the series
 * @param  {Number}             [limit]                         The maximum number of results to retrieve
 * @param  {Number}             [offset]                        The paging number of the results to retrieve
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitSeriesFails = module.exports.assertGetOrgUnitSeriesFails = function(client, id, limit, offset, code, callback) {
    client.orgUnit.getOrgUnitSeries(id, limit, offset, function(err, series) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback(series);
    });
};

/**
 * Assert that one or more series can be added to an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to add the serie(s) to
 * @param  {Number[]}           serieIds                        The id of the serie(s) to add to the organisational unit
 * @param  {Number}             [fromOrgUnit]                   The id of the organisational unit the series are borrowed from
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertAddOrgUnitSeries = module.exports.assertAddOrgUnitSeries = function(client, id, serieIds, fromOrgUnit, callback) {
    client.orgUnit.addOrgUnitSeries(id, serieIds, fromOrgUnit, function(err, body, response) {
        assert.ok(!err);

        // Verify all series were added to the organisational unit
        getAllOrgUnitSeries(client, id, function(allSeries) {
            _.each(serieIds, function(serieId) {
                var serie = _.find(allSeries, {'id': serieId});
                assert.ok(serie);

                // If we specified an id of an organisational unit we borrowed the serie from, we assert that organisational unit is returned
                if (fromOrgUnit && _.contains(serieIds, serieId)) {
                    assert.ok(serie.fromOrgUnit);
                    assert.strictEqual(serie.fromOrgUnit.id, fromOrgUnit);
                }
            });

            return callback();
        });
    });
};

/**
 * Assert that one or more series can not be added to an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to add the serie(s) to
 * @param  {Number[]}           serieIds                        The id of the serie(s) to add to the organisational unit
 * @param  {Number}             [fromOrgUnit]                   The id of the organisational unit the series are borrowed from
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertAddOrgUnitSeriesFails = module.exports.assertAddOrgUnitSeriesFails = function(client, id, serieIds, fromOrgUnit, code, callback) {
    client.orgUnit.addOrgUnitSeries(id, serieIds, fromOrgUnit, function(err, body, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that one or more series can be deleted from an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to delete the serie(s) from
 * @param  {Number[]}           serieIds                        The id of the serie(s) to delete from the organisational unit
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteOrgUnitSeries = module.exports.assertDeleteOrgUnitSeries = function(client, id, serieIds, callback) {
    client.orgUnit.deleteOrgUnitSeries(id, serieIds, function(err, body, response) {
        assert.ok(!err);

        // Verify all series were added to the organisational unit
        assertGetOrgUnitSeries(client, id, 1000, null, function(allSeries) {
            _.each(serieIds, function(serieId) {
                assert.ok(!_.find(allSeries, {'id': serieId}));
            });

            return callback();
        });
    });
};

/**
 * Assert that one or more series can not be deleted from an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to delete the serie(s) from
 * @param  {Number[]}           serieIds                        The id of the serie(s) to delete from the organisational unit
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertDeleteOrgUnitSeriesFails = module.exports.assertDeleteOrgUnitSeriesFails = function(client, id, serieIds, code, callback) {
    client.orgUnit.deleteOrgUnitSeries(id, serieIds, function(err, body, response) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that a user can be subscribed to the event series and events in an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit that the user should be subscribed to
 * @param  {Number}             [userId]                        The id of the user that should be subscribed to the event series and events in the organisational unit
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertSubscribeOrgUnit = module.exports.assertSubscribeOrgUnit = function(client, id, userId, callback) {
    client.orgUnit.subscribeOrgUnit(id, userId, function(err) {
        assert.ok(!err);

        // If no `userId` was specified, the current user would have been
        // subscribed. We get the current user's user id from the me feed
        UsersTestsUtil.assertGetMe(client, function(me) {
            if (!userId) {
                userId = me.id;
            }

            // Get all the events in this organisational unit so we can
            // verify they appear in the user's calendar
            _getAllEvents(client, id, function(events) {

                // Generate a broad window for the user's calendar
                var start = moment().subtract(30, 'days').format();
                var end = moment().add(30, 'days').format();

                // If the organisational unit contained (series that contained) events,
                // we generate a window around the serie events and assert that the events
                // are returned in the user's calendar
                if (!_.isEmpty(events)) {
                    start = moment(_.first(events).start).subtract(1, 'day').format();
                    end = moment(_.last(events).end).add(1, 'day').format();
                }

                // Get the user's calendar
                UsersTestsUtil.assertGetUserCalendar(client, userId, start, end, events, function(calendar) {
                    return callback();
                });
            });
        });
    });
};

/**
 * Assert that a user can not be subscribed to the events series and events in an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the serie that the user should be subscribed to
 * @param  {Number}             [userId]                        The id of the user that should be subscribed to the event series and events in the organisational unit
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertSubscribeOrgUnitFails = module.exports.assertSubscribeOrgUnitFails = function(client, id, userId, code, callback) {
    client.orgUnit.subscribeOrgUnit(id, userId, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that a user can be unsubscribed from the event series and events in an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit that the user should be unsubscribed from
 * @param  {Number}             [userId]                        The id of the user that should be unsubscribed from the event series and events in the organisational unit
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUnsubscribeOrgUnit = module.exports.assertUnsubscribeOrgUnit = function(client, id, userId, callback) {
    client.orgUnit.unsubscribeOrgUnit(id, userId, function(err) {
        assert.ok(!err);

        // If no `userId` was specified, the current user would have been
        // unsubscribed. We get the current user's user id from the me feed
        UsersTestsUtil.assertGetMe(client, function(me) {
            if (!userId) {
                userId = me.id;
            }

            // Get all the events in this organisational unit so we can
            // verify they no longer appear in the user's calendar
            _getAllEvents(client, id, function(events) {

                // Generate a broad window for the user's calendar
                var start = moment().subtract(30, 'days').format();
                var end = moment().add(30, 'days').format();

                // If the organisational unit contained (series that contained) events,
                // we generate a window around the serie events and assert that the events
                // are no longer returned in the user's calendar
                if (!_.isEmpty(events)) {
                    start = moment(_.first(events).start).subtract(1, 'day').format();
                    end = moment(_.last(events).end).add(1, 'day').format();
                }

                // Get the user's calendar
                UsersTestsUtil.assertGetUserCalendar(client, userId, start, end, null, function(calendar) {
                    _.each(calendar.results, function(event) {
                        assert.ok(!_.find(events, {'id': event.id}));
                    });

                    return callback();
                });
            });
        });
    });
};

/**
 * Assert that a user can not be unsubscribed from the event series and events in an organisational unit
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit that the user should be unsubscribed from
 * @param  {Number}             [userId]                        The id of the user that should be unsubscribed to the event series and events in the organisational unit
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertUnsubscribeOrgUnitFails = module.exports.assertUnsubscribeOrgUnitFails = function(client, id, userId, code, callback) {
    client.orgUnit.unsubscribeOrgUnit(id, userId, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert that an organisational unit's calendar can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to retrieve the calendar for
 * @param  {String}             start                           The timestamp (ISO 8601) from which to get the calendar for the organisation unit
 * @param  {String}             end                             The timestamp (ISO 8601) until which to get the calendar for the organisation unit
 * @param  {Event[]}            expectedEvents                  The expected events in the calendar
 * @param  {Function}           callback                        Standard callback function
 * @param  {Event[]}            callback.calendar               The retrieved calendar
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitCalendar = module.exports.assertGetOrgUnitCalendar = function(client, id, start, end, expectedEvents, callback) {
    client.orgUnit.getOrgUnitCalendar(id, start, end, function(err, calendar) {
        assert.ok(!err);
        assert.ok(calendar);
        assert.ok(calendar.results);
        assert.ok(_.isArray(calendar.results));

        // Assert the calendar contains the expected events
        if (expectedEvents) {
            _.each(expectedEvents, function(event) {
                assert.ok(_.find(calendar.results, {'id': event.id}));
            });
        }

        // Assert only the required information is returned
        var allowedEventKeys = ['id', 'displayName', 'location', 'start', 'end', 'organisers', 'updatedAt', 'context', 'type', 'notes'];
        var allowedContextKeys = ['id', 'ParentId', 'displayName', 'type'];
        _.each(calendar.results, function(event) {
            _.each(event, function(val, key) {
                assert.ok(_.contains(allowedEventKeys, key), key + ' is not allowed as an event property in a calendar');
            });
            if (event.context) {
                _.each(event.context, function(val, key) {
                    assert.ok(_.contains(allowedContextKeys, key), key + ' is not allowed as an event\'s context property in a calendar');
                });
            }
        });

        return callback(calendar);
    });
};

/**
 * Assert that an organisational unit's calendar can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to retrieve the calendar for
 * @param  {String}             start                           The timestamp (ISO 8601) from which to get the calendar for the organisation unit
 * @param  {String}             end                             The timestamp (ISO 8601) until which to get the calendar for the organisation unit
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitCalendarFails = module.exports.assertGetOrgUnitCalendarFails = function(client, id, start, end, code, callback) {
    client.orgUnit.getOrgUnitCalendar(id, start, end, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!calendar);
        return callback();
    });
};

/**
 * Assert that an organisational unit's iCal calendar can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to retrieve the iCal calendar for
 * @param  {Event[]}            expectedEvents                  The expected events in the calendar
 * @param  {Function}           callback                        Standard callback function
 * @param  {String}             callback.calendar               The retrieved iCal calendar
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitCalendarIcal = module.exports.assertGetOrgUnitCalendarIcal = function(client, id, expectedEvents, callback) {
    client.orgUnit.getOrgUnitCalendarIcal(id, function(err, calendar, response) {
        assert.ok(!err);
        assert.ok(calendar);

        // Assert the response is iCal
        assert.strictEqual(response.headers['content-type'], 'text/calendar; charset=utf-8');

        // Parse the iCal calendar
        TestsUtil.parseIcalCalendar(calendar, function(calendar) {

            // Check if the returned events are the ones we expected
            if (expectedEvents) {
                assert.strictEqual(calendar.subComponents.length, expectedEvents.length);
                _.each(calendar.subComponents, function(subComponent, i) {
                    var id = parseInt(subComponent.model.uid, 10);
                    assert.strictEqual(id, expectedEvents[i].id);
                    assert.strictEqual(subComponent.model.summary, expectedEvents[i].displayName);
                });
            }

            return callback(calendar);
        });
    });
};

/**
 * Assert that an organisational unit's iCal calendar can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to retrieve the calendar for in iCal format
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitCalendarIcalFails = module.exports.assertGetOrgUnitCalendarIcalFails = function(client, id, code, callback) {
    client.orgUnit.getOrgUnitCalendarIcal(id, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!calendar);
        return callback();
    });
};

/**
 * Assert that an organisational unit's RSS calendar can be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to retrieve the RSS calendar for
 * @param  {Event[]}            expectedEvents                  The expected events in the calendar
 * @param  {Function}           callback                        Standard callback function
 * @param  {String}             callback.calendar               The retrieved RSS calendar
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitCalendarRss = module.exports.assertGetOrgUnitCalendarRss = function(client, id, expectedEvents, callback) {
    client.orgUnit.getOrgUnitCalendarRss(id, function(err, calendar, response) {
        assert.ok(!err);
        assert.ok(calendar);

        // Assert the response is RSS
        assert.strictEqual(response.headers['content-type'], 'application/rss+xml; charset=utf-8');

        // Parse the RSS calendar
        TestsUtil.parseRssCalendar(calendar, function(calendar) {

            // Check if the returned events are the ones we expected
            if (expectedEvents) {
                if (_.isEmpty(expectedEvents)) {
                    // If no items should be returned, the RSS feed will not contain an `<item>` tag
                    assert.ok(!calendar.item);
                } else {
                    assert.strictEqual(calendar.item.length, expectedEvents.length);
                    _.each(calendar.item, function(item, i) {
                        var guid = item.guid[0];
                        var id = parseInt(guid.split('/').pop(), 10);
                        assert.strictEqual(id, expectedEvents[i].id);
                        assert.strictEqual(item.title[0], expectedEvents[i].displayName);
                    });
                }
            }

            return callback(calendar);
        });
    });
};

/**
 * Assert that an organisational unit's RSS calendar can not be retrieved
 *
 * @param  {RestClient}         client                          The REST client to make the request with
 * @param  {Number}             id                              The id of the organisational unit to retrieve the calendar for in RSS format
 * @param  {Number}             code                            The expected HTTP error code
 * @param  {Function}           callback                        Standard callback function
 * @throws {AssertionError}                                     Error thrown when an assertion failed
 */
var assertGetOrgUnitCalendarRssFails = module.exports.assertGetOrgUnitCalendarRssFails = function(client, id, code, callback) {
    client.orgUnit.getOrgUnitCalendarRss(id, function(err, calendar) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        assert.ok(!calendar);
        return callback();
    });
};

/**
 * Get all the events in an organisational unit. This also includes the events
 * from the event series that are in the organisational unit
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the organisational unit for which to get the events
 * @param  {Function}           callback            Standard callback function
 * @param  {Event[]}            callback.events     All the events in the organisational unit
 * @api private
 */
var _getAllEvents = function(client, id, callback) {
    // Get all the series
    assertGetOrgUnitSeries(client, id, 10000, null, function(series) {
        if (_.isEmpty(series)) {
            return callback([]);
        }

        var allEvents = [];

        // Return to the caller once we've retrieved the events for each serie
        var done = _.after(series.length, function() {
            // Only retain the unique events
            allEvents = _.uniq(allEvents, 'id');

            // Sort the events on their start time
            allEvents = allEvents.sort(function(a, b) {
                return a.start.localeCompare(b.start);
            });

            return callback(allEvents);
        });

        // Get all the events for each serie
        _.each(series, function(serie) {
            SeriesTestsUtil.assertGetSeriesEvents(client, serie.id, null, null, null, null, function(events) {
                allEvents = allEvents.concat(events.results);
                done();
            });
        });

        // TODO: Get org unit events
    });
};

/**
 * Create a simple organisational unit tree that looks like:
 *
 * ```
 * Engineering (course)
 *   + Computer science (subject)
 *     + I (part)
 *       + Algorithms 1 (module)
 *         + Serie 1
 *           - Event 1
 *           - Event 2
 *           - Event 3
 *           - Event 4
 *           - Event 5
 *         + Serie 2
 *           - Event 1
 *           - Event 2
 *           - Event 3
 *           - Event 4
 *           - Event 5
 *         + Serie 3
 *           - Event 1
 *           - Event 2
 *           - Event 3
 *           - Event 4
 *           - Event 5
 *         + Serie 4
 *           - Event 1
 *           - Event 2
 *           - Event 3
 *           - Event 4
 *           - Event 5
 * ```
 *
 * @param  {Client}             client              The client with which to create the tree structure
 * @param  {Function}           callback            Standard callback function
 * @param  {OrgUnit}            callback.course     The course organisational unit
 * @param  {OrgUnit}            callback.subject    The subject organisational unit
 * @param  {OrgUnit}            callback.part       The part organisational unit
 * @param  {OrgUnit}            callback.module     The module organisational unit
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var createSimpleTree = module.exports.createSimpleTree = function(client, callback) {
    assertCreateOrgUnit(client, 'Engineering', 'course', {}, function(course) {
        assertCreateOrgUnit(client, 'Computer Science', 'subject', {'parent': course.id}, function(subject) {
            assertCreateOrgUnit(client, 'I', 'part', {'parent': subject.id, 'metadata': {'url': 'google.com'}}, function(part) {
                assertCreateOrgUnit(client, 'Algorithms 1', 'module', {'parent': part.id, 'published': false}, function(module) {

                    var start = moment().subtract(30, 'days').format();
                    var end = moment().add(30, 'days').format();
                    SeriesTestsUtil.generateSerieWithEvents(client, 4, 5, start, end, function(series) {
                        var serieIds = _.pluck(series, 'id');
                        assertAddOrgUnitSeries(client, module.id, serieIds, null, function() {
                            return callback(course, subject, part, module, series);
                        });
                    });
                });
            });
        });
    });
};
