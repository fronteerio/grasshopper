/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var Sequelize = require('sequelize');

var DB = require('gh-core/lib/db');
var log = require('gh-core/lib/logger').logger('gh-series');
var UsersDAO = require('gh-users/lib/internal/dao');

/**
 * Create a serie
 *
 * @param  {Number}         appId                       The id of the application that this serie will belong to
 * @param  {String}         displayName                 The name of the serie
 * @param  {String}         [description]               The description of the serie
 * @param  {Number}         group                       The id of the group that can manage the serie
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error object, if any
 * @param  {Serie}          callback.serie              The created serie
 */
var createSerie = module.exports.createSerie = function(appId, displayName, description, group, callback) {
    var serie = {
        'AppId': appId,
        'description': description,
        'displayName': displayName,
        'GroupId': group
    };
    DB.Serie.create(serie).complete(function(err, serie) {
        if (err) {
            log().error({'err': err}, 'Failed to create a new serie');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, serie);
    });
};

/**
 * Update a serie
 *
 * @param  {Serie}          serie                       The serie to update
 * @param  {object}         update                      The updates to persist
 * @param  {String}         [update.displayName]        Updated event series name
 * @param  {String}         [update.description]        Updated event series description
 * @param  {Number}         [update.GroupId]            Updated id of the group that can manage the event series
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error object, if any
 * @param  {Serie}          callback.serie              The updated serie
 */
var updateSerie = module.exports.updateSerie = function(serie, update, callback) {
    serie.updateAttributes(update).complete(function(err, serie) {
        if (err) {
            log().error({'err': err}, 'Failed to update a serie');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, serie);
    });
};

/**
 * Get a serie
 *
 * @param  {Number}         id                          The id of the serie to retrieve
 * @param  {Boolean}        [includeOrgUnits]           Whether the organisational units that this serie is a part of should be included in the response. Defaults to `false`
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error object, if any
 * @param  {Serie}          callback.serie              The retrieved serie
 */
var getSerie = module.exports.getSerie = function(id, includeOrgUnits, callback) {
    var options = {
        'where': {'id': id},
        'include': [DB.App, DB.Group]
    };

    if (includeOrgUnits) {
        options.include.push(DB.OrgUnit);
    }

    DB.Serie.find(options).complete(function(err, serie) {
        if (err) {
            log().error({'err': err}, 'Failed to retrieve a serie');
            return callback({'code': 500, 'msg': err.message});
        } else if (!serie) {
            log().debug({'id': id}, 'A serie with the specified id could not be found');
            return callback({'code': 404, 'msg': 'Could not find a serie by that id'});
        }

        if (includeOrgUnits) {
            // Serialize the serie so Sequelize can't mess with the sorting of the organisational units
            serie = serie.toJSON();

            // Sort the organisational units by when the serie was added to them
            serie.OrgUnits = _.sortBy(serie.OrgUnits, function(orgUnit) {
                return orgUnit.OrgUnitSeries.createdAt.getTime();
            });
        }

        return callback(null, serie);
    });
};

/**
 * Get a set of series
 *
 * @param  {Number[]}       ids                             The ids of the series to retrieve
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error object, if any
 * @param  {Serie[]}        callback.series                 The requested series
 */
var getSeries = module.exports.getSeries = function(ids, callback) {
    if (_.isEmpty(ids)) {
        return callback(null, []);
    }

    var options = {
        'where': {'id': ids},
        'include': [
            {'model': DB.Group}
        ]
    };
    DB.Serie.findAll(options).complete(function(err, series) {
        if (err) {
            log().error({'err': err, 'ids': ids}, 'Failed to get a set of series');
            return callback({'code': 500, 'msg': err.message});
        } else if (!series || series.length !== ids.length) {
            log().debug({'ids': ids}, 'Not all series could be found');
            return callback({'code': 404, 'msg': 'Not all series could be found'});
        }

        return callback(null, series);
    });
};

/**
 * Delete a serie
 *
 * @param  {Serie}          serie                       The serie to delete
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error object, if any
 */
var deleteSerie = module.exports.deleteSerie = function(serie, callback) {
    serie.destroy().complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Failed to delete a serie');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'serie': serie}, 'Deleted a serie');
        return callback();
    });
};

/**
 * Add one or more events to a serie
 *
 * @param  {Serie}      serie           The serie to which to add the events
 * @param  {Event[]}    events          The events to add
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var addSeriesEvents = module.exports.addSeriesEvents = function(serie, events, callback) {
    serie.addEvent(events).complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Failed to add events to a serie');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'serie': serie, 'events': events}, 'Added events to a serie');
        return callback();
    });
};

/**
 * Get the events for a serie
 *
 * @param  {Serie}          serie               The serie to retrieve the events for
 * @param  {String}         [start]             The timestamp (ISO 8601) from which to get the calendar for the event series
 * @param  {String}         [end]               The timestamp (ISO 8601) until which to get the calendar for the event series
 * @param  {Number}         [limit]             The number of events that should be retrieved, a negative number will return all results
 * @param  {Number}         [offset]            The number to start paging from
 * @param  {Boolean}        [includeUpcoming]   Whether to only include upcoming events
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Event[]}        callback.events     The events for a series
 */
var getSeriesEvents = module.exports.getSeriesEvents = function(serie, start, end, limit, offset, includeUpcoming, callback) {
    var options = {
        'include': [{'model': DB.User, 'as': 'Organisers'}],
        'offset': offset,
        'order': [['start']]
    };

    // A negative `limit` indicates all the events should be returned
    if (limit && limit > 0) {
        options.limit = limit;
    }

    // TODO: Upcoming

    var startFilter = {'start': {'gte': start}};
    var endFilter = {'end': {'lte': end}};

    if (start && end) {
        options.where = Sequelize.and(startFilter, endFilter);
    } else if (start) {
        options.where = startFilter;
    } else if (end) {
        options.where = endFilter;
    }

    serie.getEvents(options).complete(function(err, events) {
        if (err) {
            log().error({'err': err}, 'Failed to get events for a serie');
            return callback({'code': 500, 'msg': err.message});
        }

        return callback(null, events);
    });
};

/**
 * Remove one or more events from a serie
 *
 * @param  {Serie}      serie           The serie from which to remove the events
 * @param  {Event[]}    events          The events to remove
 * @param  {Function}   callback        Standard callback function
 * @param  {Object}     callback.err    An error object, if any
 */
var deleteSeriesEvents = module.exports.deleteSeriesEvents = function(serie, events, callback) {
    serie.removeEvents(events).complete(function(err) {
        if (err) {
            log().error({'err': err}, 'Failed to remove events from a serie');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'serie': serie, 'events': events}, 'Removed events from a serie');
        return callback();
    });
};
