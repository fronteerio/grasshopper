/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var moment = require('moment');

var EventsTestUtil = require('gh-events/tests/util');
var SeriesTestUtil = require('./util');
var TestsUtil = require('gh-tests');

describe('Series', function() {

    describe('Aggregation', function() {

        /**
         * Create a series with 3 events in it. The events will aggregate both in place and organisers
         *
         * @param  {Function}       callback            Standard callback function
         * @param  {Event}          callback.eventA     The first event
         * @param  {Event}          callback.eventB     The second event
         * @param  {Event}          callback.eventC     The third event
         * @param  {Serie}          callback.series     The series that holds the events
         */
        var setupAggregation = function(callback) {
            // Create 3 events that hold aggregatable information. Keep in mind
            // that we have to provide the start/end times in UTC
            EventsTestUtil.assertCreateEvent(global.tests.admins.cam2014.client, 'A', '2014-10-28T13:00:00', '2014-10-28T14:00:00', {'organiserOther': ['Prof William Lawsons'], 'location': 'Room 1'}, function(eventA) {
                EventsTestUtil.assertCreateEvent(global.tests.admins.cam2014.client, 'A', '2014-11-04T13:00:00', '2014-11-04T14:00:00', {'organiserOther': ['Dr Jack Daniels'], 'location': 'Room 1'}, function(eventB) {
                    EventsTestUtil.assertCreateEvent(global.tests.admins.cam2014.client, 'A', '2014-11-11T13:00:00', '2014-11-11T14:00:00', {'organiserOther': ['Prof William Lawsons'], 'location': 'Room 2'}, function(eventC) {

                        // Create a series and add the events
                        SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2014.client, 'Test series', {}, function(series) {
                            SeriesTestUtil.assertAddSeriesEvents(global.tests.admins.cam2014.client, series.id, [eventA.id, eventB.id, eventC.id], function() {

                                // Get the series and check if the aggregated metadata is correct
                                SeriesTestUtil.assertGetSeries(global.tests.admins.cam2014.client, series.id, false, true, null, function(series) {
                                    return callback(eventA, eventB, eventC, series);
                                });
                            });
                        });
                    });
                });
            });
        };

        /**
         * Test that verifies that series metadata contains an aggregated location and organisers
         */
        it('verify series metadata should contain an aggregated location and organisers', function(callback) {
            // Create a series with 3 events that can aggregate
            setupAggregation(function(eventA, eventB, eventC, series) {

                // Assert all the metadata is present
                assert.ok(series.metadata);
                assert.ok(series.metadata.locations);
                assert.ok(series.metadata.organisers);

                // Assert the metadata is aggregated and returned in the correct order
                assert.deepEqual(series.metadata.locations, ['Room 1', 'Room 2']);
                assert.deepEqual(series.metadata.organisers, ['Dr Jack Daniels', 'Prof William Lawsons']);
                return callback();
            });
        });

        /**
         * Test that verifies that series metadata is updated when the location of an event changes
         */
        it('verify series metadata is updated when the location of an event changes', function(callback) {
            // Create a series with 3 events that can aggregate
            setupAggregation(function(eventA, eventB, eventC, series) {
                // Sanity check the locations aggregated
                assert.deepEqual(series.metadata.locations, ['Room 1', 'Room 2']);

                // Update the location of an event
                EventsTestUtil.assertUpdateEvent(global.tests.admins.cam2014.client, eventA.id, {'location': 'Room 3'}, function() {

                    // Get the new event metadata and verify the new location is now in the metadata
                    SeriesTestUtil.assertGetSeries(global.tests.admins.cam2014.client, series.id, false, true, null, function(series) {
                        assert.deepEqual(series.metadata.locations, ['Room 1', 'Room 2', 'Room 3']);

                        // All events should take place in the same location
                        EventsTestUtil.assertUpdateEvent(global.tests.admins.cam2014.client, eventB.id, {'location': 'Room 3'}, function() {
                            EventsTestUtil.assertUpdateEvent(global.tests.admins.cam2014.client, eventC.id, {'location': 'Room 3'}, function() {
                                SeriesTestUtil.assertGetSeries(global.tests.admins.cam2014.client, series.id, false, true, null, function(series) {
                                    assert.deepEqual(series.metadata.locations, ['Room 3']);
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that series metadata is updated when events their organisers change
         */
        it('verify series metadata is updated when events their organisers change', function(callback) {
            // Create a series with 3 events that can aggregate
            setupAggregation(function(eventA, eventB, eventC, series) {
                // Sanity check the organisers aggregated
                assert.deepEqual(series.metadata.organisers, ['Dr Jack Daniels', 'Prof William Lawsons']);

                // Add a plain-text organiser to an event
                EventsTestUtil.assertUpdateEventOrganisers(global.tests.admins.cam2014.client, eventA.id, {'Father Jack McDougal': true}, function() {
                    // Get the new event metadata and verify the new organiser is now in the metadata
                    SeriesTestUtil.assertGetSeries(global.tests.admins.cam2014.client, series.id, false, true, null, function(series) {
                        assert.deepEqual(series.metadata.organisers, ['Dr Jack Daniels', 'Father Jack McDougal', 'Prof William Lawsons']);

                        // All events should have the same organiser
                        EventsTestUtil.assertUpdateEventOrganisers(global.tests.admins.cam2014.client, eventA.id, {'Father Jack McDougal': true, 'Dr Jack Daniels': false, 'Prof William Lawsons': false}, function() {
                            EventsTestUtil.assertUpdateEventOrganisers(global.tests.admins.cam2014.client, eventB.id, {'Father Jack McDougal': true, 'Dr Jack Daniels': false, 'Prof William Lawsons': false}, function() {
                                EventsTestUtil.assertUpdateEventOrganisers(global.tests.admins.cam2014.client, eventC.id, {'Father Jack McDougal': true, 'Dr Jack Daniels': false, 'Prof William Lawsons': false}, function() {
                                    SeriesTestUtil.assertGetSeries(global.tests.admins.cam2014.client, series.id, false, true, null, function(series) {
                                        assert.deepEqual(series.metadata.organisers, ['Father Jack McDougal']);

                                        // Add a user as an organiser
                                        TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(simon) {
                                            var update = {};
                                            update[simon.profile.id] = true;
                                            EventsTestUtil.assertUpdateEventOrganisers(global.tests.admins.cam2014.client, eventA.id, update, function() {

                                                // Simon should be in the aggregated set of organisers
                                                SeriesTestUtil.assertGetSeries(global.tests.admins.cam2014.client, series.id, false, true, null, function(series) {
                                                    var expectedOrganisers = ['Father Jack McDougal', simon.profile.displayName].sort();
                                                    assert.deepEqual(series.metadata.organisers, expectedOrganisers);
                                                    return callback();
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that series metadata is updated when an event gets created under a series
         */
        it('verify series metadata is updated when an event gets created under a series', function(callback) {
            // Create a series with 3 events that can aggregate
            setupAggregation(function(eventA, eventB, eventC, series) {
                assert.deepEqual(series.metadata.locations, ['Room 1', 'Room 2']);
                assert.deepEqual(series.metadata.organisers, ['Dr Jack Daniels', 'Prof William Lawsons']);

                // Create a new event under the series
                var opts = {
                    'organiserOther': ['Ms Margaret Sames'],
                    'location': 'Room 3',
                    'series': [series.id]
                };
                EventsTestUtil.assertCreateEvent(global.tests.admins.cam2014.client, 'D', '2014-11-18T13:00:00', '2014-11-18T14:00:00', opts, function(eventD) {

                    // Verify the series metadata has been updated
                    SeriesTestUtil.assertGetSeries(global.tests.admins.cam2014.client, series.id, false, true, null, function(series) {
                        assert.deepEqual(series.metadata.locations, ['Room 1', 'Room 2', 'Room 3']);
                        assert.deepEqual(series.metadata.organisers, ['Dr Jack Daniels', 'Ms Margaret Sames', 'Prof William Lawsons']);

                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies that organisers who are linked users are included when aggregating event organisers
         */
        it('verify organisers who are linked users are included when aggregating event organisers', function(callback) {
            // Create a series with 3 events that can aggregate
            setupAggregation(function(eventA, eventB, eventC, series) {

                // Create an event, but don't specify an organiser. This will make it default
                // to the current user. Ensure the aggregator can handle this
                EventsTestUtil.assertCreateEvent(global.tests.admins.cam2014.client, 'A', '2014-11-11T20:00:00', '2014-11-20T14:00:00', {'location': 'Room 2'}, function(eventD) {
                    SeriesTestUtil.assertAddSeriesEvents(global.tests.admins.cam2014.client, series.id, [eventD.id], function() {

                        // Get the series and check if the aggregated metadata is correct
                        SeriesTestUtil.assertGetSeries(global.tests.admins.cam2014.client, series.id, false, true, null, function(series) {
                            assert.strictEqual(series.metadata.organisers.length, 3);
                            return callback();
                        });
                    });
                });
            });
        });
    });
});
