/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var GroupsTestUtil = require('gh-groups/tests/util');
var OrgUnitTestUtil = require('gh-orgunit/tests/util');
var TestsUtil = require('gh-tests');

var SeriesTestUtil = require('./util');

describe('Series', function() {

    describe('Create serie', function() {

        /**
         * Test that verifies that a new serie can be created
         */
        it('verify create serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Verify creating a basic serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(createdSerie) {

                    // Verify creating a serie with more metadata
                    var opts = {
                        'app': global.tests.apps.cam2013.id,
                        'description': 'bladiebla'
                    };
                    SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', opts, function(createdSerie) {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation for creating series
         */
        it('verify create serie validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Missing displayName
                var opts = {};
                SeriesTestUtil.assertCreateSerieFails(simon.client, null, opts, 400, function() {

                    // Too long displayName
                    SeriesTestUtil.assertCreateSerieFails(simon.client, TestsUtil.generateString(257), opts, 400, function() {

                        // Too long description
                        opts = {'description': TestsUtil.generateString(1001)};
                        SeriesTestUtil.assertCreateSerieFails(simon.client, 'Test serie', opts, 400, function() {

                            // Invalid group id
                            opts = {'group': -1};
                            SeriesTestUtil.assertCreateSerieFails(simon.client, 'Test serie', opts, 404, function() {

                                // Invalid group id
                                opts = {'group': 123234234};
                                SeriesTestUtil.assertCreateSerieFails(simon.client, 'Test serie', opts, 404, callback);
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for creating series
         */
        it('verify create serie authorization', function(callback) {
            // Anonymous users cannot create a serie
            TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                SeriesTestUtil.assertCreateSerieFails(anonymousClient, 'Test serie', null, 401, function() {

                    // Regular users have to stick to creating series on their own tenant
                    TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                        var opts = {'app': global.tests.apps.oxford2014.id};
                        SeriesTestUtil.assertCreateSerieFails(simon.client, 'Test serie', opts, 401, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies that an existing group can be used when creating a serie
         */
        it('verify an existing group can be used when creating a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nico) {

                // Verify a group from another application cannot be used
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2014.client, 'Test org unit', 'course', null, function(otherAppOrgUnit) {
                    var opts = {'group': otherAppOrgUnit.GroupId};
                    SeriesTestUtil.assertCreateSerieFails(global.tests.admins.cam2013.client, 'Test serie', opts, 401, function() {

                        // A group from the same application can be used
                        OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {
                            // Make Simon a member of the group
                            var memberUpdate = {};
                            memberUpdate[simon.profile.id] = true;
                            GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, memberUpdate, function() {

                                // Create the serie
                                var opts = {'group': orgUnit.GroupId};
                                SeriesTestUtil.assertCreateSerie(nico.client, 'Test serie', opts, function(serie) {

                                    // Assert that Simon can update the serie by virtue of the group membership
                                    var update = {'displayName': 'test'};
                                    SeriesTestUtil.assertUpdateSerie(simon.client, serie.id, update, function(updatedSerie) {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Getting a serie', function() {

        /**
         * Test that verifies that a serie can be retrieved
         */
        it('verify getting a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(createdSerie) {

                    // Verify getting the serie
                    SeriesTestUtil.assertGetSerie(simon.client, createdSerie.id, false, createdSerie, function(serie) {
                        SeriesTestUtil.assertSerie(serie, createdSerie);
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies validation for retrieving a serie
         */
        it('verify validation when getting a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Invalid serie id
                SeriesTestUtil.assertGetSerieFails(simon.client, 'not a number', false, 400, function() {

                    // Unknown serie id
                    SeriesTestUtil.assertGetSerieFails(simon.client, -1, false, 404, function() {

                        // Invalid include orgunit boolean flag
                        SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(createdSerie) {
                            SeriesTestUtil.assertGetSerieFails(simon.client, createdSerie.id, 'not a boolean', 400, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization for a serie
         */
        it('verify authorization when getting a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                TestsUtil.generateTestUsers(global.tests.apps.cam2014, 1, false, function(nico) {

                    // Create a serie on the 2013 app
                    SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(createdSerie) {

                        // Assert that it can't be retrieved on the 2014 app
                        SeriesTestUtil.assertGetSerieFails(nico.client, createdSerie.id, false, 401, function() {

                            // Assert a global admin can retrieve it
                            TestsUtil.getGlobalAdminRestClient(function(adminClient) {
                                SeriesTestUtil.assertGetSerie(adminClient, createdSerie.id, false, createdSerie, function(retrievedSerie) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that organisational units can be retrieved when getting a serie
         */
        it('verify organisational units can be retrieved when getting a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {
                // Create a serie on the 2013 app
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(createdSerie) {

                    // Assert that the serie is in 0 organisational units
                    SeriesTestUtil.assertGetSerie(simon.client, createdSerie.id, true, createdSerie, function(serie) {
                        assert.strictEqual(serie.OrgUnits.length, 0);

                        // Add the serie to an organisational unit
                        OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, '#1', 'course', null, function(orgUnit) {
                            OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit.id, [serie.id], null, function() {

                                // Assert that the serie is in 1 organisational units
                                SeriesTestUtil.assertGetSerie(simon.client, createdSerie.id, true, createdSerie, function(serie) {
                                    assert.strictEqual(serie.OrgUnits.length, 1);
                                    assert.strictEqual(serie.OrgUnits[0].id, orgUnit.id);

                                    // Add the serie to another organisational unit
                                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, '#2', 'course', null, function(orgUnit2) {
                                        OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, orgUnit2.id, [serie.id], null, function() {

                                            // Assert that the serie is in 2 organisational units
                                            SeriesTestUtil.assertGetSerie(simon.client, createdSerie.id, true, createdSerie, function(serie) {
                                                assert.strictEqual(serie.OrgUnits.length, 2);

                                                // Ensure the order of the organisational units is the same as the order
                                                // in which the serie was added to them
                                                assert.strictEqual(serie.OrgUnits[0].id, orgUnit.id);
                                                assert.strictEqual(serie.OrgUnits[1].id, orgUnit2.id);
                                                return callback();
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that the from organisational unit is returned when including organisational units
         */
        it('verify the from organisational unit is returned when including organisational units', function(callback) {
            // Create a couple organisational units
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Parent', 'parent', null, function(parent) {
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Child', 'child', {'parent': parent.id}, function(child) {
                    OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Original', 'original', null, function(original) {

                        // Create a series and add it to the original organisational unit
                        SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test series', null, function(series) {
                            OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, original.id, [series.id], null, function() {

                                // Add the series to the child organisational unit and indicate we borrowed it from the "original" one
                                OrgUnitTestUtil.assertAddOrgUnitSeries(global.tests.admins.cam2013.client, child.id, [series.id], original.id, function() {

                                    // Get the series
                                    SeriesTestUtil.assertGetSerie(global.tests.admins.cam2013.client, series.id, true, series, function(series) {
                                        // The series is available under 2 organisational units ("child" and "original")
                                        assert.strictEqual(series.OrgUnits.length, 2);

                                        // The "child" should point to the "original" organisational unit as it's "from" organisational unit
                                        var childOrgUnit = _.find(series.OrgUnits, {'id': child.id});
                                        assert.ok(childOrgUnit.fromOrgUnit);
                                        assert.strictEqual(childOrgUnit.fromOrgUnit.id, original.id);

                                        // The "original" should have no "from" organisational unit
                                        var originalOrgUnit = _.find(series.OrgUnits, {'id': original.id});
                                        assert.ok(!originalOrgUnit.fromOrgUnit);
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Updating a serie', function() {

        /**
         * Test that verifies that a serie can be updated
         */
        it('verify updating a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(createdSerie) {
                    SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(otherSerie) {

                        // Update it
                        var update = {
                            'displayName': 'Updated displayName',
                            'description': 'Update description',
                            'group': otherSerie.GroupId
                        };
                        SeriesTestUtil.assertUpdateSerie(simon.client, createdSerie.id, update, function(updatedSerie) {

                            // Retrieve it
                            SeriesTestUtil.assertGetSerie(simon.client, createdSerie.id, false, updatedSerie, function(retrievedSerie) {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the validation for updating a serie
         */
        it('verify updating a serie validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    // No updates
                    var update = {};
                    SeriesTestUtil.assertUpdateSerieFails(simon.client, serie.id, update, 400, function() {

                        // Too long displayName
                        update = {'displayName': TestsUtil.generateString(257)};
                        SeriesTestUtil.assertUpdateSerieFails(simon.client, serie.id, update, 400, function() {

                            // Too long description
                            update = {'description': TestsUtil.generateString(1001)};
                            SeriesTestUtil.assertUpdateSerieFails(simon.client, serie.id, update, 400, function() {

                                // Invalid group id
                                update = {'group': 'not a number'};
                                SeriesTestUtil.assertUpdateSerieFails(simon.client, serie.id, update, 400, function() {

                                    // Unknown group id
                                    update = {'group': -1};
                                    SeriesTestUtil.assertUpdateSerieFails(simon.client, serie.id, update, 404, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization for updating a serie
         */
        it('verify updating a serie authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nico) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    var update = {'displayName': 'foo'};

                    // Anonymous users cannot update a serie
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        SeriesTestUtil.assertUpdateSerieFails(anonymousClient, serie.id, update, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                SeriesTestUtil.assertUpdateSerieFails(anonymousGlobalClient, serie.id, update, 401, function() {

                                    // Unrelated authenticated users cannot update a serie
                                    SeriesTestUtil.assertUpdateSerieFails(nico.client, serie.id, update, 401, function() {

                                        // Application admins from another application cannot update a serie
                                        SeriesTestUtil.assertUpdateSerieFails(global.tests.admins.cam2014.client, serie.id, update, 401, function() {

                                            // Members of the serie's group can update the serie
                                            var memberUpdate = {};
                                            memberUpdate[nico.profile.id] = true;
                                            GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, serie.GroupId, memberUpdate, function() {
                                                SeriesTestUtil.assertUpdateSerie(nico.client, serie.id, update, function() {

                                                    // Global admins can update a serie
                                                    SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie 2', null, function(serie2) {
                                                        TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                            SeriesTestUtil.assertUpdateSerie(globalAdminClient, serie2.id, update, function(updatedSerie) {
                                                                return callback();
                                                            });
                                                        });
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies that an existing group can be used when updating a serie
         */
        it('verify an existing group can be used when updating a serie', function(callback) {
            // Create a test serie
            SeriesTestUtil.assertCreateSerie(global.tests.admins.cam2013.client, 'Test serie', null, function(serie) {

                // Verify a group from another application cannot be used
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2014.client, 'Test org unit', 'course', null, function(otherAppOrgUnit) {
                    var update = {'group': otherAppOrgUnit.GroupId};
                    SeriesTestUtil.assertUpdateSerieFails(global.tests.admins.cam2013.client, serie.id, update, 401, function() {

                        // A group from the same application can be used
                        OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {
                            update = {'group': orgUnit.GroupId};
                            SeriesTestUtil.assertUpdateSerie(global.tests.admins.cam2013.client, serie.id, update, function() {
                                return callback();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Deleting a serie', function() {

        /**
         * Test that verifies that a serie can be deleted
         */
        it('verify deleting a serie', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(createdSerie) {

                    // Delete it
                    SeriesTestUtil.assertDeleteSerie(simon.client, createdSerie.id, function() {

                        // Sanity-check it has been removed
                        SeriesTestUtil.assertGetSerieFails(simon.client, createdSerie.id, false, 404, callback);
                    });
                });
            });
        });

        /**
         * Test that verifies the validation for deleting a serie
         */
        it('verify deleting a serie validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    // Invalid serie id
                    SeriesTestUtil.assertDeleteSerieFails(simon.client, 'not a number', 400, function() {

                        // Unknown serie id
                        SeriesTestUtil.assertDeleteSerieFails(simon.client, 'not a number', 400, function() {

                            // Sanity-check the serie still exists
                            SeriesTestUtil.assertGetSerie(simon.client, serie.id, false, serie, function(serie) {
                                return callback();
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies the authorization for deleting a serie
         */
        it('verify deleting a serie authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nico) {

                // Create a serie
                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie', null, function(serie) {

                    // Anonymous users cannot delete a serie
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        SeriesTestUtil.assertDeleteSerieFails(anonymousClient, serie.id, 401, function() {
                            TestsUtil.getAnonymousGlobalAdminRestClient(function(anonymousGlobalClient) {
                                SeriesTestUtil.assertDeleteSerieFails(anonymousGlobalClient, serie.id, 401, function() {

                                    // Unrelated authenticated users cannot delete a serie
                                    SeriesTestUtil.assertDeleteSerieFails(nico.client, serie.id, 401, function() {

                                        // Application admins from another application cannot delete a serie
                                        SeriesTestUtil.assertDeleteSerieFails(global.tests.admins.cam2014.client, serie.id, 401, function() {

                                            // Members of the serie's group can delete the serie
                                            SeriesTestUtil.assertDeleteSerie(simon.client, serie.id, function() {

                                                // Global admins can delete a serie
                                                SeriesTestUtil.assertCreateSerie(simon.client, 'Test serie 2', null, function(serie2) {
                                                    TestsUtil.getGlobalAdminRestClient(function(globalAdminClient) {
                                                        SeriesTestUtil.assertDeleteSerie(globalAdminClient, serie2.id, callback);
                                                    });
                                                });
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
