/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
var _ = require('lodash');
var Mixpanel = require('mixpanel');

var log = require('./logger').logger('gh-core/mixpanel');

var mixpanelClient = null;

/**
 * Initialize the mixpanel telemetry logger
 *
 * @param  {Object}     config      The application configuration
 */
var init = module.exports.init = function(config) {
    if (config.mixpanel.enabled) {
        // Set up a mixpanel client
        mixpanelClient = Mixpanel.init(config.mixpanel.token);
        log().info('Using mixpanel for telemetry data');
    } else {
        // If we didn't enable telemetry logging, we stub out a dummy mixpanel client
        mixpanelClient = Mixpanel.init('465ad65a98d22e42d75173ad700f3d52');
        _stub(mixpanelClient);
        log().info('Stubbed a mixpanel client');
    }
};

/**
 * An instantiated mixpanel instance
 *
 * @see https://github.com/carlsverre/mixpanel-node
 */
var mixpanel = module.exports.mixpanel = function() {
    return mixpanelClient;
};

/**
 * A set of constants that can be used to track events or people with
 * mixpanel in a uniform manner
 */
var MixpanelConstants = module.exports.MixpanelConstants = {
    'people': {
        'LOG_IN': 'log_in',
        'LOG_OUT': 'log_out',
        'SUBSCRIPTION': 'subscription'
    },

    'events': {
        'AUTHENTICATION_ERROR': 'auth_error',
        'AUTHENTICATION_FAILURE': 'auth_failure',

        'ERROR_CSRF': 'error_csrf',
        'ERROR_UNCAUGHT': 'error_uncaught',

        'USER_CREATE': 'user_created',
        'USER_LOG_IN': 'user_log_in',
        'USER_LOG_OUT': 'user_log_out'
    }
};

/**
 * Stub out all function calls on a given object. Any function
 * that's been exposed on `obj` will be replaced by no-operation functions
 *
 * @param  {Object}     obj     The object in which to replace the functions by no-operation functions
 * @api private
 */
var _stub = function(obj) {
    _.each(obj, function(val, key) {
        // Replace all functions by a no-operation
        if (_.isFunction(val)) {
            obj[key] = _.noop;

        // Re-curse further down any objects
        } else if (_.isObject(val)) {
            _stub(val);
        }
    });
};
