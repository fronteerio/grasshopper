/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var Validator = module.exports.Validator = require('validator').Validator;

/*!
 * Wrapper function around node-validator that ensures that a validation
 * failure doesn't throw an error and just collects all of the errors
 *
 * @param  {Object}     msg         Error that should be recorded if the validation fails
 */
Validator.prototype.error = function(msg) {
    this._errors.push(msg);
};

/**
 * Wrapper function around node-validator that retrieves all validation error
 * for a Validator instance
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * ...
 * var errors = validator.getErrors();
 * ```
 *
 * @return {Object[]}               Array containing all of the validation errors
 */
Validator.prototype.getErrors = function () {
    if (this._errors && this._errors.length > 0) {
        return this._errors;
    } else {
        return null;
    }
};

/**
 * Wrapper function around node-validator that retrieves the number of validation
 * errors that have been collected for a Validator instance
 *
 * @return {Number}                 The number of collected validation errors
 */
Validator.prototype.getErrorCount = function() {
    if (this._errors) {
        return this._errors.length;
    } else {
        return 0;
    }
};

/**
 * Get the first error for a Validator instance
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * ...
 * var firstErorr = validator.getFirstError();
 * ```
 *
 * @return {Object}                 The first validation error or `null` if no validation errors have happened
 */
Validator.prototype.getFirstError = function () {
    if (this._errors && this._errors.length > 0) {
        return this._errors[0];
    } else {
        return null;
    }
};

/**
 * Check whether a Validator instance has any validation errors
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * ...
 * var hasError = validator.hasErrors();
 * ```
 *
 * @return {Boolean}                `true` when validation errors have occured and `false` otherwise
 */
Validator.prototype.hasErrors = function () {
    return (this._errors && this._errors.length) ? true : false;
};

///////////////////////
// Custom validators //
///////////////////////

/**
 * Validate that a passed in parameter is a JSON object
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(null, error).isObject(obj);
 * ```
 *
 * @param  {Object}     obj         Object that needs to be checked for validity
 */
Validator.prototype.isObject = function(obj) {
    if (!_.isObject(obj)) {
        this.error(this.msg || 'A non-object has been passed in');
    }
    return this;
};

/**
 * Validate that a passed in parameter is an array
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(null, error).isArray(arr);
 * ```
 *
 * @param  {Object[]}     arr       Array that needs to be checked for validity
 */
Validator.prototype.isArray = function(arr) {
    if (!_.isArray(arr)) {
        this.error(this.msg || 'A non-array has been passed in');
    }
    return this;
};

/**
 * Validate that a passed in parameter is a boolean
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(null, error).isBoolean(val);
 * ```
 *
 * @param  {Boolean}     bool       Boolean that needs to be checked for validity
 */
Validator.prototype.isBoolean = function(bool) {
    var isBoolean = (bool === true || bool === false);
    if (!isBoolean) {
        this.error(this.msg || 'A non-boolean has been passed in');
    }
    return this;
};

/**
 * Validate that a passed in parameter is a short string
 *
 * A short string should be:
 *     * At least 1 character long
 *     * At most 256 characters long
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(aString, error).isShortString();
 * ```
 */
Validator.prototype.isShortString = function(str) {
    this.len(1, 256);
};

/**
 * Checks whether the string that was passed in the `check` method is a medium string.
 *
 * A medium string should be:
 *     * At least 1 character long
 *     * At most 1000 characters long
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(aString, error).isMediumString();
 * ```
 */
Validator.prototype.isMediumString = function() {
    this.len(1, 1000);
};

/**
 * Checks whether the string that was passed in the `check` method is a long string.
 *
 * A long string should be:
 *     * At least 1 character long
 *     * At most 10000 characters long
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(aString, error).isLongString();
 * ```
 */
Validator.prototype.isLongString = function() {
    this.len(1, 10000);
};

/**
 * Check whether or not a context represents a logged in user
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(null, error).isLoggedInUser(ctx, appId);
 * ```
 *
 * @param  {Context}    ctx             Standard context object containing the current user and the current app
 * @param  {Number}     [appId]         The id of the application to verify the context is authenticated to. If unspecified, the check will validate that the context is simply authenticated anywhere
 */
Validator.prototype.isLoggedInUser = function(ctx, appId) {
    if (!_.isObject(ctx)) {
        this.error(this.msg || 'An empty context has been passed in');
    } else if (!_.isObject(ctx.app) || (!ctx.app.id && !ctx.app.isGlobalAdmin)) {
        this.error(this.msg || 'The context is not associated to an application');
    } else if (!_.isObject(ctx.user) || !ctx.user.id) {
        this.error(this.msg || 'The user is not logged in');
    } else if (appId && ctx.user.AppId !== appId && !ctx.user.isGlobalAdmin()) {
        this.error(this.msg || 'The user is logged into the wrong application');
    }
    return this;
};

/**
 * Validate that a passed in context is a global administrator
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(null, error).isGlobalAdmin(ctx);
 * ```
 *
 * @param  {Context}     ctx        Standard context containing the current user and the current app
 */
Validator.prototype.isGlobalAdmin = function(ctx) {
    if (!_.isObject(ctx)) {
        this.error(this.msg || 'An invalid context has been passed in');
    } else if (!ctx.user || !ctx.user.id) {
        this.error(this.msg || 'The user is not logged in');
    } else if (ctx.user.isGlobalAdmin() !== true) {
        this.error(this.msg || 'The user is not a global administrator');
    }

    return this;
};

/**
 * Validate that a passed in context is a global or app administrator
 *
 * Usage:
 * ```
 * var validator = new Validator();
 * validator.check(null, error).isAdmin(ctx);
 * validator.check(null, error).isAdmin(ctx, appId);
 * ```
 *
 * @param  {Context}     ctx        Standard context containing the current user and the current app
 * @param  {Number}      [appId]    The id of the app for which the user should be an administrator. If unspecified, the check will validate that the user is an app administrator on any tenant
 */
Validator.prototype.isAdmin = function(ctx, appId) {
    if (!_.isObject(ctx)) {
        this.error(this.msg || 'An invalid context has been passed in');
    } else if (!ctx.user || !ctx.user.id) {
        this.error(this.msg || 'The user is not logged in');
    // The context is the global adminstrator server
    } else if (ctx.app.isGlobalAdmin) {
        if (ctx.user.isGlobalAdmin() !== true) {
            this.error(this.msg || 'The user is not a global administrator');
        }
    // The context is an app server
    } else if (appId) {
        if (ctx.user.isAdmin !== true || ctx.user.AppId !== appId) {
            this.error(this.msg || 'The user is not an app administrator on the provided app');
        }
    } else {
        if (ctx.user.isAdmin !== true) {
            this.error(this.msg || 'The user is not an app administrator');
        }
    }

    return this;
};
