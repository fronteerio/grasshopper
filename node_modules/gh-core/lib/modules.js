/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var fs = require('fs');
var path = require('path');
var util = require('util');

var log = require('./logger').logger('gh-modules');

// Variable that will be used to cache the available modules
var cachedAvailableModules = [];

/**
 * Cache all the grasshopper modules
 *
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {String[]}       callback.modules    The set of grasshopper modules
 */
var init = module.exports.init = function(callback) {
    // Get all the node modules
    var nodeModulesDir = _getNodeModulesDir();
    fs.readdir(nodeModulesDir, function(err, modules) {
        if (err) {
            log().error({'err': err}, 'Unable to read the node modules directory');
            return callback({'code': 500, 'msg': 'Unable to read the node modules directory'});
        }

        // Filter all the node modules down the grasshopper-only modules and cache them
        cachedAvailableModules = _.filter(modules, function(module) {
            return module.match(/^gh-.+$/);
        });

        return callback(null, cachedAvailableModules.slice());
    });
};

/**
 * Returns the available modules from cache
 *
 * @return {String[]}   Returns an Array of strings representing the names of the available modules
 */
var getAvailableModules = module.exports.getAvailableModules = function() {
    // Return a copy of the modules
    return cachedAvailableModules.slice();
};

/**
 * Get the path to the node_modules directory
 *
 * @return {String}    The path to the node_modules directory
 * @api private
 */
var _getNodeModulesDir = function() {
    var dir = util.format('%s/../../../node_modules/', __dirname);
    return path.normalize(dir);
};
