/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var fs = require('fs');
var path = require('path');

var Context = require('gh-context').Context;
var DocsAPI = require('gh-docs');
var UsersAPI = require('gh-users');

var DB = require('./db');
var Logger = require('./logger');
var Mixpanel = require('./mixpanel');
var Server = require('./server');

var log = Logger.logger('gh-core/api');

// Will hold the express server for the global admin
var globalAdminServer = module.exports.globalAdminServer = null;

// Will hold the express server for regular apps
var appServer = module.exports.appServer = null;

/**
 * Initialize the application
 *
 * @param  {Object}         config              The config as per `config.js` in the root directory
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var init = module.exports.init = function(config, callback) {
    // Initialize the logger
    Logger.refreshLogConfiguration(config.log);

    // Initialize the mixpanel telemetry logger
    Mixpanel.init(config);

    // Connect to the database
    DB.init(config, function(err) {
        if (err) {
            return callback(err);
        }

        // Create the global tenant & app
        DB.Tenant.findOrCreate({'where': {'displayName': 'Global admin tenant'}, 'defaults': {'displayName': 'Global admin tenant'}}).done(function(err, tenant, created) {
            if (err) {
                log().error({'err': err}, 'Could not get or create admin tenant');
                return callback({'code': 500, 'msg': 'Could not get or create admin tenant'});
            } else if (created) {
                log().info({'tenant': tenant}, 'Created an admin tenant');
            }

            var appOpts = {
                'displayName': 'Global admin app',
                'hostname': config.servers.adminHostname,
                'type': 'admin',
                'enabled': true,
                'TenantId': tenant.id
            };
            DB.App.findOrCreate({'where': {'hostname': config.servers.adminHostname}, 'defaults': appOpts}).done(function(err, app, created) {
                if (err) {
                    log().error({'err': err}, 'Could not get or create admin app');
                    return callback({'code': 500, 'msg': 'Could not get or create admin app'});
                } else if (created) {
                    log().info({'app': app}, 'Created an admin app');
                }

                // Create a global admin user / password
                var ctx = new Context(app);
                var credentials = {
                    'type': 'local',
                    'username': 'administrator',
                    'password': 'password'
                };
                var userProfile = {
                    'displayName': 'Global administrator',
                    'email': 'admin@localhost',
                    'emailPreference': 'no'
                };
                UsersAPI.getOrCreateUser(ctx, tenant.id, credentials, userProfile, function(err, user) {
                    if (err) {
                        log().error({'err': err}, 'Unable to create a user on the global admin');
                        return callback(err);
                    }

                    // Make the user an admin of the global admin app
                    user.setAdminApps([app]).done(function(err) {
                        if (err) {
                            log().error({'err': err}, 'Could not make the user an admin of the global app');
                            return callback(err);
                        }

                        // Initiate the Express servers
                        module.exports.globalAdminServer = Server.setUpServer(config.servers.adminPort, config);
                        module.exports.appServer = Server.setUpServer(config.servers.appsPort, config);

                        // Get all the node modules
                        fs.readdir(path.join(__dirname, '../..'), function(err, modules) {
                            if (err) {
                                log().error({'err': err}, 'Unable to read the node modules directory');
                                return callback({'code': 500, 'msg': 'Unable to read the node modules directory'});
                            }

                            var ghModules = _.filter(modules, function(module) {
                                return module.match(/^gh-.+$/);
                            });

                            // Check if a `rest.js` file exists in the `lib` folder in each
                            // module. If such a file exists, we require it. This allows other
                            // modules to add in their own set of REST apis
                            _.each(ghModules, function(module) {
                                var restFile = path.join(__dirname, '../..', module, '/lib/rest.js');
                                if (fs.existsSync(restFile)) {
                                    log().debug({'module': module}, 'Trying to register REST apis');
                                    require(module + '/lib/rest');
                                }
                            });
                            log().info('All REST APIs have been initialized');

                            module.exports.globalAdminServer.postInit();
                            module.exports.appServer.postInit();

                            /*!
                             * Called when all the modules have been documented
                             */
                            var moduleDocumented = _.after(ghModules.length, function() {
                                // Add the models to all the api resources
                                DocsAPI.addModelsToResources();
                                log().info('All REST APIs have been documented');
                                return callback();
                            });

                            // Document each module's REST APIs
                            _.each(ghModules, function(module) {
                                DocsAPI.documentModule(module, moduleDocumented);
                            });
                        });
                    });
                });
            });
        });
    });
};
