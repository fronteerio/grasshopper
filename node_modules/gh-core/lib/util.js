/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

/**
 * Get a numeric parameter as specified by `value`. If `value` is not a valid number,
 * `defaultValue` will be returned instead. If a minimum is specified and `value` is
 * smaller than the minimum, the minimum will be returned. If a maximum is specified
 * and `value` is larger than the maximum, the maximum will be returned
 *
 * @param  {String|Number}      value           The value to try and convert to an integer
 * @param  {Number}             defaultValue    The value to return if `value` is not a valid integer
 * @param  {Number}             [minimum]       A lower bound for `value`. If this is not provided, no bounding will be applied
 * @param  {Number}             [maximum]       An upper bound for `value`. If this is not provided, no bounding will be applied
 * @return {Number}                             `value` converted to an integer without the specified bounds. Otherwise, `defaultValue` is returned
 */
var getNumberParam = module.exports.getNumberParam = function(value, defaultValue, minimum, maximum) {
    value = parseInt(value, 10);
    value = (isNaN(value)) ? defaultValue : value;
    if ((minimum || minimum === 0) && value < minimum) {
        value = minimum;
    }
    if ((maximum || maximum === 0) && value > maximum) {
        value = maximum;
    }
    return value;
};

/**
 * Get a boolean parameter as specified by `value`. If `value` is not a valid boolean,
 * `defaultValue` will be returned instead
 *
 * @param  {String|Boolean}     value           The value to try and convert to a boolean
 * @param  {Boolean}            defaultValue    The value to return if `value` is not a valid boolean
 * @return {Boolean}                            `value` converted to a boolean. Otherwise, `defaultValue` is returned
 */
var getBooleanParam = module.exports.getBooleanParam = function(value, defaultValue) {
    if (value === true || value === 'true') {
        return true;
    } else if (value === false || value === 'false') {
        return false;
    }
    return defaultValue;
};

/**
 * Wrap a value in an array. If the value is already an array, no wrapping
 * will take place. If the value is an object, the object's values will be returned
 *
 * @param  {Object}     val     The value to wrap
 * @return {Object[]}           The wrapped value
 * @see http://devdocs.io/lodash/index#toArray
 */
var toArray = module.exports.toArray = function(val) {
    if (!val) {
        return [];
    }
    // Lodash doesn't wrap primitive or sequelize values
    if (typeof val === 'number' || typeof val === 'string' || val instanceof Date || typeof val.dataValues === 'object') {
        return [val];
    }

    return _.toArray(val);
};
