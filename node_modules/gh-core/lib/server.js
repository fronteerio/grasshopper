/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var cookieSession = require('cookie-session');
var express = require('express');
var http = require('http');
var passport = require('passport');
var util = require('util');

var Context = require('gh-context').Context;

var DB = require('./db');
var log = require('./logger').logger('gh-core/server');
var mixpanel = require('./mixpanel');
var MixpanelConstants = require('./mixpanel').MixpanelConstants;

var safePathPrefixes = [];

/**
 * Starts an express server on the specified port. This will be done for the global admin server, as well
 * as for the tenant server.
 *
 * @param  {Number}     port        The port on which the express server should be started
 * @param  {Object}     config      JSON object containing configuration values for the secret cookies
 * @return {Express}                The created express server
 */
var setUpServer = module.exports.setUpServer = function(port, config) {
    // Create the express server
    var app = express();

    // Expose the HTTP server on the express app server so other modules can hook into it
    app.httpServer = http.createServer(app);

    // Start listening for requests
    app.httpServer.listen(port);

    // Don't output pretty JSON
    app.set('json spaces', 0);

    // We'll be using cookies to hash the user id
    // Signing of the cookie will be done by the session middleware
    app.use(cookieParser(config.cookie.secret));

    /*!
     * We support the following type of request encodings:
     *
     *  * urlencoded (regular POST requests)
     *  * application/json
     *  * TODO: multipart (file uploads)
     *
     * A maximum limit of 250kb is imposed for `urlencoded` and `application/json` requests. This limit only
     * applies to the *incoming request data*. If the client needs to send more than 250kb, it should consider
     * using a proper multipart form request
     */
    app.use(bodyParser.urlencoded({ 'limit': '250kb', 'extended': true}));
    app.use(bodyParser.json({'limit': '250kb'}));

    // This needs to come BEFORE passport and AFTER cookieParser. The secret will be used to sign the cookie
    app.use(cookieSession({'secret': config.cookie.secret}));

    app.use(passport.initialize());
    app.use(passport.session());

    // TODO: Add telemetry before we do anything else

    // TODO/MAYBE: this middleware could potentially be combined with passport's deserialize middleware
    // and 1 query might be removed
    app.use(function(req, res, next) {
        DB.App.find({'where': {'hostname': req.hostname}, 'include': [DB.Tenant]}).done(function(err, app) {
            if (err) {
                log().error({'err': err, 'hostname': req.hostname}, 'Unable to find an app by hostname');
                return next(err);
            } else if (!app) {
                return res.status(418).send('App not registered yet');
            }

            req.ctx = new Context(app);
            return next();
        });
    });

    var that = {};
    that.routes = [];

    /**
     * Set up a route on the associated server
     *
     * @param  {String}               method          The http method for the route
     * @param  {String|RegEx}         route           The path for the route
     * @param  {Function|Function[]}  handler         The function to handle requests to this route
     * @param  {String}               [telemetryUrl]  The string to use for telemetry tracking
     * @throws {Error}                                Error thrown when arguments aren't of the proper type
     */
    that.on = function(method, route, handler, telemetryUrl) {
        var isRouteValid = (_.isString(route) || _.isRegExp(route));
        var isHandlerValid = (_.isFunction(handler) || _.isArray(handler));
        if (!_.isString(method)) {
            throw new Error(util.format('Invalid type for request method "%s" when binding route "%s" to OAE Router', method, route.toString()));
        } else if (!isRouteValid) {
            throw new Error(util.format('Invalid route path "%s" while binding route to OAE Router', route.toString()));
        } else if (!isHandlerValid) {
            throw new Error(util.format('Invalid method handler given for route "%s" while binding to OAE Router', route.toString()));
        }

        that.routes.push({
            'method': method,
            'route': route,
            'handler': handler,
            'telemetryUrl': telemetryUrl
        });
    };

    /**
     * Bind all the routes, this should only be called once by the server initialization
     */
    that.bind = function() {
        _.each(that.routes, function(route) {
            // Add a telemetry handler
            var handlers = [
                function(req, res, next) {
                    req.telemetryUrl = route.telemetryUrl || route.route.replace(/:/, '');
                    next();
                }
            ];

            app[route.method].apply(app, [route.route, handlers.concat(route.handler)]);
        });
    };

    that.postInit = function() {
        /*!
         * Referer-based CSRF protection. If the request is not safe (e.g., POST, DELETE) and the origin of the request (as
         * specified by the HTTP Referer header) does not match the target host of the request (as specified by the HTTP
         * Host header), then the request will result in a 500 error.
         *
         * While referer-based protection is not highly recommended due to spoofing possibilities in insecure environments,
         * it currently offers the best trade-off between ease of use (e.g., for cURL interoperability), effort and security
         * against CSRF attacks.
         *
         * Middleware that gets called earlier, can force the CSRF check to be skipped by setting `_checkCSRF` on the request.
         *
         * If using a utility such as `curl` to POST requests to the API, you can bypass this by just setting the referer
         * header to "/":
         *
         * curl -X POST -e / http://my.grasshopper.com/api/auth/login
         *
         * More information about CSRF attacks: http://en.wikipedia.org/wiki/Cross-site_request_forgery
         */
        app.use(function(req, res, next) {
            // If earlier middleware determined that CSRF is not required, we can skip the check
            if (req['_checkCSRF'] === false) {
                return next();
            }

            if (!_isSafeMethod(req.method) && !_isSafePath(req) && !_isSameOrigin(req)) {
                log().warn({
                    'method': req.method,
                    'host': req.headers.host,
                    'referer': req.headers.referer,
                    'targetPath': req.path
                }, 'CSRF validation failed: attempted to execute unsafe operation from untrusted origin');
                return _abort(res, 500, 'CSRF validation failed: attempted to execute unsafe method from untrusted origin');

                // Track the CSRF error
                mixpanel().track(MixpanelConstants.events.ERROR_CSRF);
            }

            return next();
        });

        // Bind routes
        that.bind();

        // Catch-all error handler
        app.use(function(err, req, res, next) {
            log(req.ctx).error({
                err: err,
                req: req,
                res: res
            }, 'Unhandled error in the request chain, caught at the default error handler');
            res.status(500).send('An unexpected error occurred');

            // Track the uncaught error with mixpanel
            var opts = {};
            if (req.user) {
                opts.distinct_id = req.user.id
            }
            mixpanel().track(MixpanelConstants.events.ERROR_UNCAUGHT, opts);
        });
    };

    return that;
};

/**
 * Abort a request with a given code and response message.
 *
 * @param  {Response}   res     The express response object
 * @param  {Number}     code    The HTTP response code
 * @param  {String}     message The message body to provide as a reason for aborting the request
 * @api private
 */
var _abort = function(res, code, message) {
    res.setHeader('Connection', 'Close');
    return res.send(code, message);
};

/**
 * Determines if the target path for a request is considered "safe" from CSRF attacks.
 *
 * @param  {Request}    req     The express request object
 * @return {Boolean}            `true` if the path is safe from CSRF attacks, `false` otherwise
 * @api private
 */
var _isSafePath = function(req) {
    var path = req.path;
    var matchingPaths = _.filter(safePathPrefixes, function(safePathPrefix) {
        return (path.indexOf(safePathPrefix) === 0);
    });
    return (matchingPaths.length > 0);
};

/**
 * Determine whether or not the given request method is considered "safe"
 *
 * @param  {String}     method  The request method
 * @return {Boolean}            `true` if the request method is safe (e.g., GET, HEAD), `false` otherwise
 * @api private
 */
var _isSafeMethod = function(method) {
    return (method === 'GET' || method === 'HEAD');
};

/**
 * Determine whether or not the origin host of the given request is the same as the target host.
 *
 * @param  {Request}    req     The express request object to test
 * @return {Boolean}            `true` if the request is of the same origin as the target host, `false` otherwise
 * @api private
 */
var _isSameOrigin = function(req) {
    var host = req.headers.host;
    var referer = req.headers.referer;

    if (!referer) {
        return false;
    }

    if (referer.indexOf('/') !== 0) {
        // Verify the host portion against the host header
        referer = referer.split('://')[1];
        if (!referer || referer.split('/')[0] !== host) {
            // If there is nothing after the protocol (e.g., "http://") or the host before the first slash does not match
            // we deem it not to be the same origin.
            return false;
        } else {
            return true;
        }
    } else {
        // If the referer is a relative uri, it must be from same origin.
        return true;
    }
};
