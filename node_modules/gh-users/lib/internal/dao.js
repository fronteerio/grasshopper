/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var AuthUtil = require('gh-auth/lib/util');
var DB = require('gh-core/lib/db');
var GrasshopperUtil = require('gh-core/lib/util');
var log = require('gh-core/lib/logger').logger('gh-users');

/**
 * Get a user
 *
 * @param  {Number}         id                              The id of the user to retrieve
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error object, if any
 * @param  {User}           callback.user                   The requested user
 */
var getUser = module.exports.getUser = function(id, callback) {
    DB.User.find(id).complete(function(err, user) {
        if (err) {
            log().error({'err': err, 'id': id}, 'Failed to get a user');
            return callback({'code': 500, 'msg': err.message});
        } else if (!user) {
            log().debug({'err': err, 'id': id}, 'A user with the specified id could not be found');
            return callback({'code': 404, 'msg': 'A user with the specified id could not be found'});
        }

        return callback(null, user);
    });
};

/**
 * Get a set of users
 *
 * @param  {Number[]}       ids                             The ids of the users to retrieve
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error object, if any
 * @param  {User[]}         callback.users                  The requested users
 */
var getUsers = module.exports.getUsers = function(ids, callback) {
    if (_.isEmpty(ids)) {
        return callback(null, []);
    }

    DB.User.findAll({'where': {'id': ids}}).complete(function(err, users) {
        if (err) {
            log().error({'err': err, 'id': id}, 'Failed to get a set of users');
            return callback({'code': 500, 'msg': err.message});
        } else if (!users || users.length !== ids.length) {
            log().debug({'ids': ids}, 'Not all users could be found');
            return callback({'code': 404, 'msg': 'Not all users could be found'});
        }

        // If only 1 user was found, sequelize will return the object. Ensure
        // that we always return an array to the caller
        users = GrasshopperUtil.toArray(users);

        return callback(null, users);
    });
};

/**
 * Get a user by its authentication credentials
 *
 * @param  {Number}         appId                           The id of the app to which the user belongs
 * @param  {String}         strategy                        The authentication strategy for the user. One of `local` or `shibboleth`
 * @param  {String}         identifier                      The unique credentials identifier for the user. `email` when using local authentication or `shibbolethId` when using Shibboleth authentication
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error object, if any
 * @param  {User}           callback.user                   The requested user
 */
var getUserByCredentials = module.exports.getUserByCredentials = function(appId, strategy, identifier, callback) {
    var where = {'AppId': appId};
    if (strategy === 'local') {
        where['email'] = identifier;
    } else {
        where['shibbolethId'] = identifier;
    }

    DB.User.find({'where': where}).complete(function(err, user) {
        if (err) {
            log().error({'err': err, 'appId': appId, 'strategy': strategy, 'identifier': identifier}, 'Failed to get a user by its authentication credentials');
            return callback({'code': 500, 'msg': err.message});
        } else if (!user) {
            log().debug({'err': err, 'appId': appId, 'strategy': strategy, 'identifier': identifier}, 'A user with the specified authentication credentials could not be found');
            return callback({'code': 404, 'msg': 'A user with the specified authentication credentials could not be found'});
        }

        return callback(null, user);
    });
};

/**
 * Create a new user
 *
 * @param  {Number}         appId                           The id of the app on which the user should be created
 * @param  {Object}         userProfile                     The user profile parameters for the user
 * @param  {String}         userProfile.displayName         The name of the user
 * @param  {String}         userProfile.email               The email address for the user
 * @param  {String}         userProfile.emailPreference     The email preference for the user. One of `immediate` or `no`
 * @param  {Object}         credentials                     The authentication credentials for the user
 * @param  {String}         credentials.strategy            The authentication strategy for the user. One of `local` or `shibboleth`
 * @param  {String}         [credentials.password]          The password with which the user will authenticate. Only required when using the local authentiation strategy
 * @param  {String}         [credentials.shibbolethId]      The unique shibboleth id for the user. Only required when using the Shibboleth authentication strategy
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error object, if any
 * @param  {User}           callback.user                   The created user
 */
var createUser = module.exports.createUser = function(appId, userProfile, credentials, callback) {
    if (credentials.strategy === 'local') {
        createLocalUser(appId, userProfile, credentials, callback);
    } else if (credentials.strategy === 'shibboleth') {
        createShibbolethUser(appId, userProfile, credentials, callback);
    }
};

/**
 * Create a new user with a local authentication strategy
 *
 * @param  {Number}         appId                           The id of the app on which the user should be created
 * @param  {Object}         userProfile                     The user profile parameters for the user
 * @param  {String}         userProfile.displayName         The name of the user
 * @param  {String}         userProfile.email               The email address for the user
 * @param  {String}         userProfile.emailPreference     The email preference for the user. One of `immediate` or `no`
 * @param  {Object}         credentials                     The authentication credentials for the user
 * @param  {String}         credentials.strategy            The authentication strategy for the user. `local` for a user with local authentication
 * @param  {String}         credentials.password            The password with which the user will authenticate
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error object, if any
 * @param  {User}           callback.user                   The created user
 * @api private
 */
var createLocalUser = function(appId, userProfile, credentials, callback) {
    // Hash the provided password
    AuthUtil.hashPassword(credentials.password, function(err, hashedPassword) {
        if (err) {
            log().error({'err': err}, 'Failed to hash the password when creating a new user with a local authentication strategy');
            return callback(err);
        }

        var localUser = {
            'AppId': appId,
            'displayName': userProfile.displayName,
            'email': userProfile.email,
            'emailPreference': userProfile.emailPreference,
            'authenticationStrategy': credentials.strategy,
            'password': hashedPassword
        };

        DB.User.create(localUser).complete(function(err, localUser) {
            if (err) {
                log().error({'err': err}, 'Failed to create a new user with a local authentication strategy');
                return callback({'code': 500, 'msg': err.message});
            }

            log().debug({'localUser': localUser}, 'Created a new user with a local authentication strategy');
            return callback(null, localUser);
        });
    });
};

/**
 * Create a new user with a Shibboleth authentication strategy
 *
 * @param  {Number}       appId                             The id of the app on which the user should be created
 * @param  {Object}         userProfile                     The user profile parameters for the user
 * @param  {String}         userProfile.displayName         The name of the user
 * @param  {String}         userProfile.email               The email address for the user
 * @param  {String}         userProfile.emailPreference     The email preference for the user. One of `immediate` or `no`
 * @param  {Object}         credentials                     The authentication credentials for the user
 * @param  {String}         credentials.strategy            The authentication strategy for the user. `shibboleth` for a user with Shibboleth authentication
 * @param  {String}         credentials.shibbolethId        The unique shibboleth id for the user
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error object, if any
 * @param  {User}           callback.user                   The created user
 * @api private
 */
var createShibbolethUser = function(appId, userProfile, credentials, callback) {
    var shibbolethUser = {
        'AppId': appId,
        'displayName': userProfile.displayName,
        'email': userProfile.email,
        'emailPreference': userProfile.emailPreference,
        'authenticationStrategy': credentials.strategy,
        'shibbolethId': credentials.shibbolethId
    };

    DB.User.create(shibbolethUser).complete(function(err, shibbolethUser) {
        if (err) {
            log().error({'err': err}, 'Failed to create a new user with a Shibboleth authentication strategy');
            return callback({'code': 500, 'msg': err.message});
        }

        log().debug({'shibbolethUser': shibbolethUser}, 'Created a new user with a Shibboleth authentication strategy');
        return callback(null, localUser);
    });
};
