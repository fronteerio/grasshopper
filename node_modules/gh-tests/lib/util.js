/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');
var ConfigAPI = require('gh-config');
var ICalParser = require('cozy-ical').ICalParser;
var moment = require('moment');
var parseString = require('xml2js').parseString;
var util = require('util');

var Grasshopper = require('gh-core');
var RestAPI = require('gh-rest');
var RestUtil = require('gh-rest/lib/util');

/**
 * Create the initial test configuration
 *
 * @return {Object}     config           The application configuration
 */
var createInitialTestConfig = module.exports.createInitialTestConfig = function() {
    // Require the configuration file. From here on, the configuration should be
    // passed around instead of required
    var config = require('../../../config');

    // Streams can't be deep copied so we stash them in a variable, delete them from the config
    // and add them to the final config
    var logConfig = config.log;
    delete config.log;
    config = _.cloneDeep(config);
    config.log = logConfig;
    config.log.streams = [{
        'level': 'trace',
        'path': './tests.log'
    }];

    // Ensure that test data does not find its way into the main database
    config.db.database = 'grasshoppertest';
    config.db.dropOnStartup = true;

    // Ensure that the tests always run on the correct hostname/ports
    config.servers.adminHostname = 'admin.grasshopper.com';
    config.servers.adminPort = 2000;
    config.servers.appsPort = 2001;

    return config;
};

/**
 * Set up Grasshopper and create a number of test tenants, apps and admins
 *
 * @param  {Object}      config         The application configuration
 * @param  {Function}    callback       Standard callback function
 */
var setUpBeforeTests = module.exports.setUpBeforeTests = function(config, callback) {
    Grasshopper.init(config, function(err) {
        if (err) {
            return callback(new Error(err.msg));
        }

        // Pipe REST events to our test logger
        _bindRequestLogger();

        // Get a global admin rest client
        getGlobalAdminRestClient(function(globalAdminRestClient) {

            // Create 2 tenants with 2 apps each
            globalAdminRestClient.tenant.createTenant('Cambridge University', function(err, cambridgeTenant) {
                if (err) {
                    return callback(err);
                }
                globalAdminRestClient.tenant.createTenant('Oxford University', function(err, oxfordTenant) {
                    if (err) {
                        return callback(err);
                    }

                    createDefaultTestApps(globalAdminRestClient, cambridgeTenant, 'timetable.cam.ac.uk', function(err, cambridge2013App, cambridge2014App, cambridge2013Admin, cambridge2014Admin) {
                        if (err) {
                            return callback(err);
                        }
                        createDefaultTestApps(globalAdminRestClient, oxfordTenant, 'timetable.oxford.ac.uk', function(err, oxford2013App, oxford2014App, oxford2013Admin, oxford2014Admin) {
                            if (err) {
                                return callback(err);
                            }

                            // Expose the tenant and apps on the global object
                            global.tests = {
                                'tenants': {
                                    'cam': cambridgeTenant,
                                    'oxford': oxfordTenant
                                },
                                'apps': {
                                    'cam2013': cambridge2013App,
                                    'cam2014': cambridge2014App,
                                    'oxford2013': oxford2013App,
                                    'oxford2014': oxford2014App
                                },
                                'admins': {
                                    'cam2013': cambridge2013Admin,
                                    'cam2014': cambridge2014Admin,
                                    'oxford2013': oxford2013Admin,
                                    'oxford2014': oxford2014Admin
                                }
                            };

                            return callback();
                        });
                    });
                });
            });
        });
    });
};

/**
 * Bind request logging for gh-rest unit test debugging
 *
 * @api private
 */
var _bindRequestLogger = function() {
    var requestLog = require('gh-core/lib/logger').logger('request-log');

    RestUtil.on('request', function(restCtx, url, method, data) {
        requestLog().trace({
            'restCtx': restCtx,
            'url': url,
            'method': method,
            'data': data
        }, 'Performing REST request');
    });

    RestUtil.on('response', function(body, res) {
        requestLog().trace({ 'res': res, 'body': body }, 'REST Request complete');
    });

    RestUtil.on('error', function(err, body, res) {
        requestLog().error({
            'err': err,
            'res': res,
            'body': body
        }, 'An error occurred sending a REST request');
    });
};

/**
 * Create 2 timetable apps for a tenant. Each app represents a different year
 *
 * @param  {RestClient}     globalAdminRestClient       A rest client that is authenticated as the global admin
 * @param  {Tenant}         tenant                      The tenant on which to create the app
 * @param  {String}         hostSuffix                  The suffix for the application hostnames (e.g. `timetable.oxford.ac.uk`)
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error that occurred, if any
 * @param  {App}            callback.app2013            The 2013 app
 * @param  {App}            callback.app2014            The 2014 app
 * @param  {User}           callback.admin2013          An app administrator for the 2013 app
 * @param  {User}           callback.admin2014          An app administrator for the 2014 app
 * @api private
 */
var createDefaultTestApps = function(globalAdminRestClient, tenant, hostSuffix, callback) {
    createDefaultTestApp(globalAdminRestClient, tenant, hostSuffix, 2013, function(err, app2013, admin2013) {
        if (err) {
            return callback(err);
        }

        createDefaultTestApp(globalAdminRestClient, tenant, hostSuffix, 2014, function(err, app2014, admin2014) {
            if (err) {
                return callback(err);
            }

            return callback(null, app2013, app2014, admin2013, admin2014);
        });
    });
};

/**
 * Create a timetable app for a given tenant and year
 *
 * @param  {RestClient}     globalAdminRestClient       A rest client that is authenticated as the global admin
 * @param  {Tenant}         tenant                      The tenant on which to create the application
 * @param  {String}         hostSuffix                  The suffix for the application hostnames (e.g. `timetable.oxford.ac.uk`)
 * @param  {Number}         year                        The year for which to create the application
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error that occurred, if any
 * @param  {App}            callback.app                The created app
 * @param  {User}           callback.user               An app administrator for the created app
 * @api private
 */
var createDefaultTestApp = function(globalAdminRestClient, tenant, hostSuffix, year, callback) {
    var displayName = year;
    var host = util.format('%s.%s', year, hostSuffix);

    globalAdminRestClient.app.createApp(tenant.id, displayName, host, 'timetable', function(err, app) {
        if (err) {
            return callback(err);
        }

        // Create an app administrator for this app
        generateTestUser(app, true, function(err, user) {
            if (err) {
                return callback(err);
            }

            return callback(null, app, user);
        });
    });
};

/**
 * Get an anonymous global administrator REST client
 *
 * @param  {Function}       callback                    Standard callback function
 * @param  {RestClient}     callback.client             An anonymous global administrator REST client
 */
var getAnonymousGlobalAdminRestClient = module.exports.getAnonymousGlobalAdminRestClient = function(callback) {
    var options = {
        'host': 'localhost:2000',
        'hostHeader': 'admin.grasshopper.com'
    };
    RestAPI.createClient(options, function(err, client) {
        assert.ok(!err);
        return callback(client);
    });
};

/**
 * Get an authenticated global administrator REST client
 *
 * @param  {Function}       callback                    Standard callback function
 * @param  {RestClient}     callback.client             An authenticated global administrator REST client
 */
var getGlobalAdminRestClient = module.exports.getGlobalAdminRestClient = function(callback) {
    var options = {
        'host': 'localhost:2000',
        'hostHeader': 'admin.grasshopper.com',
        'authenticationStrategy': 'local',
        'username': 'administrator',
        'password': 'administrator'
    };
    RestAPI.createClient(options, function(err, client) {
        assert.ok(!err);
        return callback(client);
    });
};

/**
 * Get a mocked global admin application object
 *
 * @return {Object}     A mocked global admin object
 */
var getGlobalAdminApp = module.exports.getGlobalAdminApp = function() {
    return {
        'displayName': 'Global admin server',
        'host': 'admin.grasshopper.com',
        'isGlobalAdmin': true
    };
};

/**
 * Get an anonymous app user REST client
 *
 * @param  {App}            app                         The app for which to create an anonymous user REST client
 * @param  {Function}       callback                    Standard callback function
 * @param  {RestClient}     callback.client             An anonymous app user REST client
 */
var getAnonymousAppUserClient = module.exports.getAnonymousAppUserClient = function(app, callback) {
    var options = {
        'host': 'localhost:2001',
        'hostHeader': app.host
    };
    RestAPI.createClient(options, function(err, client) {
        assert.ok(!err);
        return callback(client);
    });
};

/**
 * Create a test tenant and a number of applications
 *
 * @param  {Number}     nrOfApps            The number of apps that should be added to the tenant
 * @param  {Function}   callback            Standard callback function
 * @param  {Tenant}     callback.tenant     The created tenant
 * @param  {App}        [callback.app1]     The first created application
 * @param  {App}        [callback.app2]     The next created application
 * @param  {App}        [callback...]       Each application is provided as an argument
 */
var generateTestTenant = module.exports.generateTestTenant = function(nrOfApps, callback) {
    var displayName = generateString();
    var host = generateString().toLowerCase() + '.grasshopper.com';

    getGlobalAdminRestClient(function(globalAdminClient) {
        globalAdminClient.tenant.createTenant(displayName, function(err, tenant) {
            assert.ok(!err);

            if (nrOfApps === 0) {
                return callback(tenant);
            }

            var args = [tenant];

            // Gets executed once all the applications have been created
            var done = _.after(nrOfApps, function() {
                return callback.apply(callback, args);
            });

            // Create a number of applications
            _.times(nrOfApps, function() {
                generateTestApp(tenant.id, function(app) {
                    args.push(app);
                    return done();
                });
            });
        });
    });
};

/**
 * Generate a test app
 *
 * @param  {Number}         tenantId                    The id of the tenant on which to create the test app
 * @param  {Function}       callback                    Standard callback function
 * @param  {App}            callback.app                The created test app
 */
var generateTestApp = module.exports.generateTestApp = function(tenantId, callback) {
    var displayName = generateString();
    var host = util.format('%s.grasshopper.com', displayName);

    getGlobalAdminRestClient(function(globalAdminClient) {
        var app = null;

        // Create the app
        globalAdminClient.app.createApp(tenantId, displayName, host, 'timetable', function(err, _app) {
            assert.ok(!err);
            app = _app;
        });

        // Only return once the config api has cached the new application's config
        ConfigAPI.once('cached', function() {
            return callback(app);
        });
    });
};

/**
 * Generate a number of test users
 *
 * @param  {App}            app                         The app on which to create the test users
 * @param  {Number}         total                       The total number of test users that need to be created. If not provided, a single test user will be created
 * @param  {Boolean}        [isAdmin]                   Whether the test users should be app administrators
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.user1              An object containing the REST client and profile of the created user
 * @param  {User}           callback.user1.profile      The basic user profile of the created user
 * @param  {RestClient}     callback.user1.client       The REST client for the created user
 * @param  {Object}         [callback.user2]            The next created user(s)
 * @param  {Object}         [callback....]              Each created user as an additional callback argument
 */
var generateTestUsers = module.exports.generateTestUsers = function(app, total, isAdmin, callback) {
    var createdUsers = [];
    
    // Only gets executed once all the users have been created
    var done = _.after(total, function() {
        return callback.apply(callback, createdUsers);
    });

    // Generate each user asynchronous
    _.times(total, function() {
        generateTestUser(app, isAdmin, function(err, user) {
            assert.ok(!err);

            createdUsers.push(user);
            done();
        });
    });
};

/**
 * Generate a test app user
 *
 * @param  {App}            app                         The app on which to create the test user
 * @param  {Boolean}        [isAdmin]                   Whether the test user should be an app administrator
 * @param  {Function}       callback                    Standard callback function
 * @param  {Object}         callback.err                An error that occurred, if any
 * @param  {Object}         callback.user               An object containing the REST client and profile of the created test user
 * @param  {User}           callback.user.profile       The basic user profile of the created test user
 * @param  {RestClient}     callback.user.client        The REST client for the created test user
 */
var generateTestUser = function(app, isAdmin, callback) {
    // Lower-case the name to avoid weird ordering issues
    var displayName = generateString().toLowerCase();
    var email = generateTestEmailAddress();
    var password = generateString();

    getGlobalAdminRestClient(function(globalAdminClient) {
        globalAdminClient.user.createUser(displayName, email, password, {'appId': app.id, 'isAdmin': isAdmin}, function(err, user) {
            if (err) {
                return callback(err);
            }

            // Create a REST client for the created user
            var options = {
                'host': 'localhost:2001',
                'hostHeader': app.host,
                'authenticationStrategy': 'local',
                'username': email,
                'password': password
            };

            RestAPI.createClient(options, function(err, client) {
                if (err) {
                    return callback(err);
                }

                return callback(null, {
                    'profile': user,
                    'client': client
                });
            });
        });
    });
};

/**
 * Generate a random unique user id that can be used inside of tests
 *
 * @param  {String}     [seed]  String that should be used as the first part of the generated user id. Defaults to "user"
 * @return {String}             A random user id
 */
var generateTestUserId = module.exports.generateTestUserId = function(seed) {
    seed = seed || 'user';
    return util.format('%s-%s', seed, generateString());
};

/**
 * Generate a unique and random email address based on an optional seed
 *
 * @param  {String}     [seed]      The seed / prefix of the email address. Defaults to "email"
 * @param  {String}     [domain]    The domain on which to put the email. Defaults to "gh-email.com"
 * @return {String}                 A random email address
 */
var generateTestEmailAddress = module.exports.generateTestEmailAddress = function(seed, domain) {
    seed = seed || 'email';
    domain = domain || 'gh-email.com';
    return util.format('%s_%s@%s', seed, generateString(), domain);
};

/**
 * Generate a random string
 *
 * @param  {Number}     [letters]   The number of letters that should be in the string, defaults to `10`
 * @return {String}                 A random string of letters
 */
var generateString = module.exports.generateString = function(letters) {
    letters = letters || 10;
    var alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var word = '';
    for (var i = 0; i < letters; i++) {
        word += alphabet[_.random(alphabet.length - 1)];
    }
    return word;
};

/**
 * Parse an RSS calendar
 *
 * @param  {String}             calendar                The RSS calendar
 * @param  {Function}           callback                Standard callback function
 * @param  {Object}             callback.calendar       The parsed RSS calendar
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var parseRssCalendar = module.exports.parseRssCalendar = function(calendar, callback) {
    parseString(calendar, function(err, result) {
        assert.ok(!err);

        // Assert the calendar is in proper RSS format
        assert.ok(result.rss);
        assert.ok(result.rss['$']);
        assert.strictEqual(result.rss['$']['version'], '2.0');
        assert.strictEqual(result.rss['$']['xmlns:ev'], 'http://purl.org/rss/1.0/modules/event/');

        // Assert that some basic information like a calendar title is present
        assert.ok(result.rss.channel[0]);
        assert.ok(result.rss.channel[0].title);

        // Return the calendar
        return callback(result.rss.channel[0]);
    });
};

/**
 * Parse an iCal calendar
 *
 * @param  {String}             calendar                The iCal calendar
 * @param  {Function}           callback                Standard callback function
 * @param  {Object}             callback.calendar       The parsed iCal calendar
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var parseIcalCalendar = module.exports.parseIcalCalendar = function(calendar, callback) {
    var parser = new ICalParser();
    parser.parseString(calendar, function(err, calendar) {
        assert.ok(!err);

        // Assert the calendar has a title
        // TODO: Broken in cozy-ical's 1.1.2 parser
        //assert.ok(calendar.fields);
        //assert.ok(calendar.fields.PRODID);

        _.each(calendar.subComponents, function(item) {
            // Convert the date timestamps to ISO8601 so they can be properly reasoned on
            if (item.fields && item.fields.DTSTART) {
                item.fields.DTSTART = moment(item.fields.DTSTART, 'YYYYMMDDTHHmmss').format();
            }
            if (item.fields && item.fields.DTEND) {
                item.fields.DTEND = moment(item.fields.DTEND, 'YYYYMMDDTHHmmss').format();
            }
        });

        return callback(calendar);
    });
};
