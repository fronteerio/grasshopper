/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

var OrgUnitTestUtil = require('gh-orgunit/tests/util');
var TestsUtil = require('gh-tests');

var GroupsTestUtil = require('./util');

describe('Groups', function() {

    describe('Getting group members', function() {

        /**
         * Test that verifies getting a group's members
         */
        it('verify getting group members', function(callback) {
            // Create a group by creating a new organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Get the group members
                GroupsTestUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, null, null, [global.tests.admins.cam2013.profile], function(members) {
                    return callback();
                });
            });
        });

        /**
         * Test that verifies validation when getting a group's members
         */
        it('verify getting group members validation', function(callback) {
            // Create a group by creating a new organisational unit
            OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                // Invalid group id
                GroupsTestUtil.assertGetGroupMembersFails(global.tests.admins.cam2013.client, 'Not a number', null, null, 400, function() {

                    // Unknown group id
                    GroupsTestUtil.assertGetGroupMembersFails(global.tests.admins.cam2013.client, -1, null, null, 404, function() {
                        return callback();
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when getting a group's members
         */
        it('verify getting group members authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    // Anonymous users cannot get group members
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        GroupsTestUtil.assertGetGroupMembersFails(anonymousClient, orgUnit.GroupId, null, null, 401, function() {

                            // Non-members cannot get group members
                            GroupsTestUtil.assertGetGroupMembersFails(simon.client, orgUnit.GroupId, null, null, 401, function() {    

                                // Make Simon a member
                                var update = {};
                                update[simon.profile.id] = true;
                                GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                                    // Simon can now get the group's members
                                    GroupsTestUtil.assertGetGroupMembers(simon.client, orgUnit.GroupId, null, null, null, function(members) {

                                        // Administrators from other applications cannot get group members
                                        GroupsTestUtil.assertGetGroupMembersFails(global.tests.admins.cam2014.client, orgUnit.GroupId, null, null, 401, function(members) {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies paging when getting a group's members
         */
        it('verify getting group members paging', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 30, false, function() {
                var users = _.values(arguments);

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    // Add 30 users as members of the group
                    var update = {};
                    _.each(users, function(user) {
                        update[user.profile.id] = true;
                    });
                    GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                        // Verify that specifying no limit defaults to 10
                        GroupsTestUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, null, null, null, function(members) {
                            assert.strictEqual(members.results.length, 10);

                            // Verify that the upper limit is 25
                            GroupsTestUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, 50000, null, null, function(members) {
                                assert.strictEqual(members.results.length, 25);

                                // Verify proper paging
                                // Get the first set of members
                                GroupsTestUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, 5, null, null, function(firstPage) {
                                    assert.strictEqual(firstPage.results.length, 5);

                                    // Assert the members are sorted on their displayName
                                    for (var i = 1; i < firstPage.results.length; i++) {
                                        assert.ok(firstPage.results[i].displayName > firstPage.results[i - 1].displayName);
                                    }

                                    // Verify the next set of members
                                    GroupsTestUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, 5, 5, null, function(secondPage) {
                                        assert.strictEqual(secondPage.results.length, 5);

                                        for (var i = 1; i < secondPage.results.length; i++) {
                                            // Assert the members are sorted on their displayName
                                            assert.ok(secondPage.results[i].displayName > secondPage.results[i - 1].displayName);

                                            // Assert this member does not appear in the first page
                                            assert.ok(!_.find(firstPage.results, {'id': secondPage.results[i].id}));
                                        }
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });

    describe('Updating group members', function() {

        /**
         * Test that verifies updating a group's members
         */
        it('verify updating group members', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    // Make Simon a member of the group
                    var update = {};
                    update[simon.profile.id] = true;
                    GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                        // Simon and the app admin should be the only members of the group
                        var expectedMembers = [simon.profile, global.tests.admins.cam2013.profile];
                        GroupsTestUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, null, null, expectedMembers, function(members) {

                            // Remove Simon
                            update[simon.profile.id] = false;
                            GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                                // The app admin should be the only member of the group
                                expectedMembers = [global.tests.admins.cam2013.profile];
                                GroupsTestUtil.assertGetGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, null, null, expectedMembers, function(members) {
                                    return callback();
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies validation when updating a group's members
         */
        it('verify updating group members validation', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 1, false, function(simon) {

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    var update = {};
                    update[simon.profile.id] = true;

                    // Invalid group id
                    GroupsTestUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, 'Not a number', update, 400, function() {

                        // Unknown group id
                        GroupsTestUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, -1, update, 404, function() {

                            // Invalid user id
                            update = {};
                            update['Not a number'] = true;
                            GroupsTestUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, orgUnit.GroupId, update, 400, function() {

                                // Unknown user id
                                update = {};
                                update['-1'] = true;
                                GroupsTestUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, orgUnit.GroupId, update, 400, function() {

                                    // Unknown value
                                    update = {};
                                    update[simon.profile.id] = 'what';
                                    GroupsTestUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2013.client, orgUnit.GroupId, update, 400, function() {
                                        return callback();
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });

        /**
         * Test that verifies authorization when updating a group's members
         */
        it('verify updating group members authorization', function(callback) {
            TestsUtil.generateTestUsers(global.tests.apps.cam2013, 2, false, function(simon, nico) {

                // Create a new group by creating a new organisational unit
                OrgUnitTestUtil.assertCreateOrgUnit(global.tests.admins.cam2013.client, 'Test org unit', 'course', null, function(orgUnit) {

                    var update = {};
                    update[simon.profile.id] = true;

                    // Anonymous users cannot update group members
                    TestsUtil.getAnonymousAppUserClient(global.tests.apps.cam2013, function(anonymousClient) {
                        GroupsTestUtil.assertUpdateGroupMembersFails(anonymousClient, orgUnit.GroupId, update, 401, function() {

                            // Non-members cannot update group members
                            GroupsTestUtil.assertUpdateGroupMembersFails(simon.client, orgUnit.GroupId, update, 401, function() {

                                // Administrators from other applications cannot update group members
                                GroupsTestUtil.assertUpdateGroupMembersFails(global.tests.admins.cam2014.client, orgUnit.GroupId, update, 401, function() {

                                    
                                    // Make Simon a member
                                    GroupsTestUtil.assertUpdateGroupMembers(global.tests.admins.cam2013.client, orgUnit.GroupId, update, function() {

                                        // Members can add other members
                                        update = {};
                                        update[nico.profile.id] = true;
                                        GroupsTestUtil.assertUpdateGroupMembers(simon.client, orgUnit.GroupId, update, function() {
                                            return callback();
                                        });
                                    });
                                });
                            });
                        });
                    });
                });
            });
        });
    });
});
