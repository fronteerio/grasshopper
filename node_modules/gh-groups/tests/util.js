/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper OrgUnit Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');
var assert = require('assert');

/**
 * Assert that the members of a group can be retrieved
 *
 * @param  {RestClient}         client                  The REST client to make the request with
 * @param  {Number}             groupId                 The id of the group to get the members of
 * @param  {Number}             [limit]                 The amount of members that should be returned
 * @param  {Number}             [offset]                The paging number of the results to retrieve
 * @param  {User[]}             [expectedMembers]       The expected members
 * @param  {Function}           callback                Standard callback function
 * @param  {OrgUnit}            callback.members        The members of the group
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertGetGroupMembers = module.exports.assertGetGroupMembers = function(client, id, limit, offset, expectedMembers, callback) {
    client.group.getGroupMembers(id, limit, offset, function(err, members) {
        assert.ok(!err);
        assert.ok(members);
        assert.ok(members.results);

        if (expectedMembers) {
            assert.strictEqual(members.results.length, expectedMembers.length);
            _.each(members.results, function(member) {
                assert.ok(_.find(expectedMembers, {'id': member.id}));
            });
        }

        return callback(members);
    });
};

/**
 * Assert that the members of a group can not be retrieved
 *
 * @param  {RestClient}         client                  The REST client to make the request with
 * @param  {Number}             groupId                 The id of the group to get the members of
 * @param  {Number}             [limit]                 The amount of groups that should be returned, defaults to 50
 * @param  {Number}             [offset]                The paging number of the results to retrieve
 * @param  {Number}             code                    The expected HTTP error code
 * @param  {Function}           callback                Standard callback function
 * @throws {AssertionError}                             Error thrown when an assertion failed
 */
var assertGetGroupMembersFails = module.exports.assertGetGroupMembersFails = function(client, id, limit, offset, code, callback) {
    client.group.getGroupMembers(id, limit, offset, function(err, members) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};

/**
 * Assert a group's members can be updated
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the group to update
 * @param  {Object}             update              The members to add to or remove from the group. The keys should hold the user ids and the value should be a boolean indicating whether the user should be added(true) or removed(false)
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertUpdateGroupMembers = module.exports.assertUpdateGroupMembers = function(client, id, update, callback) {
    client.group.updateGroupMembers(id, update, function(err) {
        assert.ok(!err);
        return callback();
    });
};

/**
 * Assert a group's members can not be updated
 *
 * @param  {RestClient}         client              The REST client to make the request with
 * @param  {Number}             id                  The id of the group to update
 * @param  {Object}             update              The members to add to or remove from the group. The keys should hold the user ids and the value should be a boolean indicating whether the user should be added(true) or removed(false)
 * @param  {Number}             code                The expected HTTP error code
 * @param  {Function}           callback            Standard callback function
 * @throws {AssertionError}                         Error thrown when an assertion failed
 */
var assertUpdateGroupMembersFails = module.exports.assertUpdateGroupMembersFails = function(client, id, update, code, callback) {
    client.group.updateGroupMembers(id, update, function(err) {
        assert.ok(err);
        assert.strictEqual(err.code, code);
        return callback();
    });
};
