/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var GrasshopperUtil = require('gh-core/lib/util');
var log = require('gh-core/lib/logger').logger('gh-groups');
var Validator = require('gh-core/lib/validator').Validator;

var GroupsAuthz = require('./authz');
var GroupsDAO = require('./internal/dao');

/**
 * Get the users that are members of a group
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         groupId             The id of the group to get the members of
 * @param  {Number}         [limit]             The amount of members that should be returned, defaults to 25
 * @param  {Number}         [offset]            The paging number of the results to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Group[]}        callback.users      The users that are members of the group
 */
var getGroupMembers = module.exports.getGroupMembers = function(ctx, groupId, limit, offset, callback) {
    // Ensure that the group id is a valid number
    groupId = GrasshopperUtil.getNumberParam(groupId);

    // Ensure that the paging values are valid
    limit = GrasshopperUtil.getNumberParam(limit, 10, 1, 25);
    offset = GrasshopperUtil.getNumberParam(offset, 0, 0);

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only authenticated users can list a group\'s members'}).isLoggedInUser(ctx);
    validator.check(groupId, {'code': 400, 'msg': 'A valid group id must be provided'}).isInt();
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure the group exists
    _getGroup(ctx, ctx.app.id, groupId, function(err, group) {
        if (err) {
            return callback(err);
        }

        // Ensure the current user can get this group's members
        GroupsAuthz.canGetGroupMembers(ctx, group, function(err, canGetGroupMembers) {
            if (err) {
                return callback(err);
            } else if (!canGetGroupMembers) {
                log().warn({'groupId': groupId, 'actor': ctx.user.id}, 'Unauthorized attempt at retrieving a group\'s members');
                return callback({'code': 401, 'msg': 'You are not allowed to view this group\'s members'});
            }

            GroupsDAO.getGroupMembers(group, limit, offset, callback);
        });
    });
};

/**
 * Update a group's members
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         id                  The id of the group to update
 * @param  {Object}         memberUpdates       The members to add to or remove from the group. The keys should hold the user ids and the value should be a boolean indicating whether the user should be added(true) or removed(false)
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 */
var updateGroupMembers = module.exports.updateGroupMembers = function(ctx, groupId, memberUpdates, callback) {
    // Ensure that the group id is a valid number
    groupId = GrasshopperUtil.getNumberParam(groupId);

    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only app administrators can update a group\'s members'}).isLoggedInUser(ctx);
    validator.check(groupId, {'code': 400, 'msg': 'A valid group id must be provided'}).isInt();
    validator.check(null, {'code': 400, 'msg': 'The member updates must be provided as an object'}).isObject(memberUpdates);
    _.each(memberUpdates, function(memberValue, userId) {
        memberUpdates[userId] = GrasshopperUtil.getBooleanParam(memberValue);
        validator.check(null, {'code': 400, 'msg': 'A valid member change must be a boolean value'}).isBoolean(memberUpdates[userId]);
        validator.check(userId, {'code': 400, 'msg': 'A valid user id must be an integer'}).isInt();
    });
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }

    // Ensure the group exists
    _getGroup(ctx, ctx.app.id, groupId, function(err, group) {
        if (err) {
            return callback(err);
        }

        // Ensure the user is allowed to make changes to this group
        GroupsAuthz.canUpdateGroupMembers(ctx, group, memberUpdates, function(err, canUpdateGroupMembers) {
            if (err) {
                return callback(err);
            } else if (!canUpdateGroupMembers) {
                log().warn({'groupId': groupId, 'actor': ctx.user.id}, 'Unauthorized attempt at updating a group\'s members');
                return callback({'code': 401, 'msg': 'You are not allowed to update this group\'s members'});
            }

            // FIXMEMAYBE: Check that there is at least 1 member left?
            GroupsDAO.updateGroupMembers(group, memberUpdates, callback);
        });
    });
};

/**
 * Get a group by its id. If no group ID was provided
 * a group will be created and the current user will be made a member of the group
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         appId               The id of the application on which to create the group or to which the existing group should belong
 * @param  {Number}         [groupId]           The id of the group to retrieve, if any
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Group}          callback.group      The retrieved or created group
 */
var getOrCreateGroup = module.exports.getOrCreateGroup = function(ctx, appId, groupId, callback) {
    var validator = new Validator();
    validator.check(null, {'code': 401, 'msg': 'Only authenticated users can create a group'}).isLoggedInUser(ctx, appId);
    if (validator.hasErrors()) {
        return callback(validator.getFirstError());
    }
    
    if (groupId) {
        // Ensure that the group id is a valid number
        groupId = GrasshopperUtil.getNumberParam(groupId);

        // Get the group from the database
        _getGroup(ctx, appId, groupId, callback);
    } else {
        // Ensure that the app id is a valid number
        appId = GrasshopperUtil.getNumberParam(appId);

        // Create the group and add the current user as a member
        GroupsDAO.createGroup(appId, [ctx.user.id], callback);
    }
};


/**
 * Get a group by its id
 *
 * @param  {Context}        ctx                 Standard context containing the current user and the current app
 * @param  {Number}         appId               The id of the application to which the group should belong
 * @param  {Number}         groupId             The id of the group to retrieve
 * @param  {Function}       callback            Standard callback function
 * @param  {Object}         callback.err        An error object, if any
 * @param  {Group}          callback.group      The retrieved group
 * @api private
 */
var _getGroup = function(ctx, appId, groupId, callback) {
    GroupsDAO.getGroup(groupId, function(err, group) {
        if (err) {
            return callback(err);
        } else if (group.AppId !== appId && (!ctx.user || !ctx.user.isGlobalAdmin())) {
            return callback({'code': 401, 'msg': 'You cannot get a group from another application'});
        }

        return callback(null, group);
    });
};
