/**
 * Copyright (c) 2014 "Fronteer LTD"
 * Grasshopper Event Engine
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var _ = require('lodash');

var UsersDAO = require('gh-users/lib/internal/dao');

var GroupsDAO = require('gh-groups/lib/internal/dao');

/**
 * Determine whether or not the user in context can get a group's members
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Group}      group                       The group whose members will be retrieved
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canGetMembers      `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canGetGroupMembers = module.exports.canGetGroupMembers = function(ctx, group, callback) {
    // Anonymous users can never retrieve a group's members
    if (!ctx.user) {
        return callback(null, false);

    // Administrators who can administer the group's application
    // can retrieve the group's members
    } else if (ctx.user.canAdmin(group.AppId)) {
        return callback(null, true);
    }

    // At this point we need to check if the user is a member of the group
    GroupsDAO.isMember(group, ctx.user, callback);
};

/**
 * Determine whether or not the user in context can update a group's members
 *
 * @param  {Context}    ctx                         Standard context object containing the current user and the current application
 * @param  {Group}      group                       The group whose members will be updated
 * @param  {Object}     update                      The members to add to or remove from the group. The keys should hold the user ids and the value should be a boolean indicating whether the user should be added(true) or removed(false)
 * @param  {Function}   callback                    Standard callback function
 * @param  {Object}     callback.err                An error that occurred, if any
 * @param  {Boolean}    callback.canUpdateMembers   `true` if the user in context has the appropriate permission. `false` otherwise
 */
var canUpdateGroupMembers = module.exports.canUpdateGroupMembers = function(ctx, group, update, callback) {
    // Ensure the current user can update the group. If you can
    // retrieve the members of a group, you are also allowed to update them
    canGetGroupMembers(ctx, group, function(err, canGetMembers) {
        if (err) {
            return callback(err);
        } else if (!canGetMembers) {
            return callback(null, false);
        }

        // Ensure the specified users exist and are on the same application
        var userIds = _.keys(update);
        UsersDAO.getUsers(group.AppId, userIds, function(err, users) {
            if (err) {
                return callback(err);
            }

            // We only allow the update if the users exist and are on the same application
            return callback(null, true);
        });
    });
};
